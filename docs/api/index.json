[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "js/.external-ecmascript.js",
    "static": true,
    "longname": "js/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "js/controls/animation-display.js",
    "content": "/**\r\n * @file animation-display.js\r\n * @since 2.0.0\r\n */\r\n\r\nimport videojs from 'video.js';\r\n\r\nconst Component = videojs.getComponent('Component');\r\n\r\n/**\r\n * Image for displaying animated GIF image.\r\n *\r\n * @class\r\n * @augments videojs.Component\r\n*/\r\nclass AnimationDisplay extends Component {\r\n\r\n    /**\r\n     * Create the `AnimationDisplay`s DOM element.\r\n     *\r\n     * @return {Element}\r\n     *         The dom element that gets created.\r\n     */\r\n    createEl() {\r\n        const imgElement = videojs.dom.createEl('img');\r\n        const el = super.createEl('div', {\r\n            className: 'vjs-animation-display',\r\n            dir: 'ltr'\r\n        });\r\n        el.appendChild(imgElement);\r\n\r\n        return el;\r\n    }\r\n}\r\n\r\nComponent.registerComponent('AnimationDisplay', AnimationDisplay);\r\n\r\nexport default AnimationDisplay;\r\n",
    "static": true,
    "longname": "C:/Users/Thijs/projects/videojs-record/src/js/controls/animation-display.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "variable",
    "name": "Component",
    "memberof": "js/controls/animation-display.js",
    "static": true,
    "longname": "js/controls/animation-display.js~Component",
    "access": "public",
    "export": false,
    "importPath": "videojs-record/js/controls/animation-display.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 50,
    "kind": "class",
    "name": "AnimationDisplay",
    "memberof": "js/controls/animation-display.js",
    "static": true,
    "longname": "js/controls/animation-display.js~AnimationDisplay",
    "access": "public",
    "export": true,
    "importPath": "videojs-record/js/controls/animation-display.js",
    "importStyle": "AnimationDisplay",
    "description": "Image for displaying animated GIF image.",
    "lineNumber": 16,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": ""
      },
      {
        "tagName": "@augments",
        "tagValue": "videojs.Component"
      }
    ],
    "interface": false,
    "extends": [
      "Component"
    ]
  },
  {
    "__docId__": 51,
    "kind": "method",
    "name": "createEl",
    "memberof": "js/controls/animation-display.js~AnimationDisplay",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/controls/animation-display.js~AnimationDisplay#createEl",
    "access": "public",
    "description": "Create the `AnimationDisplay`s DOM element.",
    "lineNumber": 24,
    "return": {
      "nullable": null,
      "types": [
        "Element"
      ],
      "spread": false,
      "description": "The dom element that gets created."
    },
    "params": []
  },
  {
    "__docId__": 52,
    "kind": "file",
    "name": "js/controls/camera-button.js",
    "content": "/**\r\n * @file camera-button.js\r\n * @since 2.0.0\r\n */\r\n\r\nimport videojs from 'video.js';\r\n\r\nimport Event from '../event';\r\n\r\nconst Button = videojs.getComponent('Button');\r\nconst Component = videojs.getComponent('Component');\r\n\r\n/**\r\n * Button to toggle between create and retry snapshot image.\r\n *\r\n * @class\r\n * @augments videojs.Button\r\n*/\r\nclass CameraButton extends Button {\r\n    /**\r\n     * Builds the default DOM `className`.\r\n     *\r\n     * @return {string}\r\n     *         The DOM `className` for this object.\r\n     */\r\n    buildCSSClass() {\r\n        return 'vjs-camera-button vjs-control vjs-button vjs-icon-photo-camera';\r\n    }\r\n\r\n    /**\r\n     * Enable the `CameraButton` element so that it can be activated or clicked.\r\n     */\r\n    enable() {\r\n        super.enable();\r\n\r\n        this.on(this.player_, Event.START_RECORD, this.onStart);\r\n        this.on(this.player_, Event.STOP_RECORD, this.onStop);\r\n    }\r\n\r\n    /**\r\n     * Disable the `CameraButton` element so that it cannot be activated or clicked.\r\n     */\r\n    disable() {\r\n        super.disable();\r\n\r\n        this.off(this.player_, Event.START_RECORD, this.onStart);\r\n        this.off(this.player_, Event.STOP_RECORD, this.onStop);\r\n    }\r\n\r\n    /**\r\n     * Show the `CameraButton` element if it is hidden by removing the\r\n     * 'vjs-hidden' class name from it.\r\n     */\r\n    show() {\r\n        if (this.layoutExclude && this.layoutExclude === true) {\r\n            // ignore\r\n            return;\r\n        }\r\n        super.show();\r\n    }\r\n\r\n    /**\r\n     * This gets called when the button is clicked.\r\n     *\r\n     * @param {EventTarget~Event} event\r\n     *        The `tap` or `click` event that caused this function to be\r\n     *        called.\r\n     *\r\n     * @listens tap\r\n     * @listens click\r\n     */\r\n    handleClick(event) {\r\n        let recorder = this.player_.record();\r\n\r\n        if (!recorder.isProcessing()) {\r\n            // create snapshot\r\n            recorder.start();\r\n        } else {\r\n            // retry\r\n            recorder.retrySnapshot();\r\n\r\n            // reset camera button appearance\r\n            this.onStop();\r\n\r\n            // trigger replay event\r\n            this.player_.trigger(Event.RETRY);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Add the vjs-icon-replay class to the element so it can change appearance.\r\n     *\r\n     * @param {EventTarget~Event} [event]\r\n     *        The event that caused this function to run.\r\n     *\r\n     * @listens Player#startRecord\r\n     */\r\n    onStart(event) {\r\n        // replace element class so it can change appearance\r\n        this.removeClass('vjs-icon-photo-camera');\r\n        this.addClass('vjs-icon-replay');\r\n\r\n        // change the button text\r\n        this.controlText('Retry');\r\n    }\r\n\r\n    /**\r\n     * Add the vjs-icon-photo-camera class to the element so it can change appearance.\r\n     *\r\n     * @param {EventTarget~Event} [event]\r\n     *        The event that caused this function to run.\r\n     *\r\n     * @listens Player#stopRecord\r\n     */\r\n    onStop(event) {\r\n        // replace element class so it can change appearance\r\n        this.removeClass('vjs-icon-replay');\r\n        this.addClass('vjs-icon-photo-camera');\r\n\r\n        // change the button text\r\n        this.controlText('Image');\r\n    }\r\n}\r\n\r\n/**\r\n * The text that should display over the `CameraButton`s controls. Added for localization.\r\n *\r\n * @type {string}\r\n * @private\r\n */\r\nCameraButton.prototype.controlText_ = 'Image';\r\n\r\nComponent.registerComponent('CameraButton', CameraButton);\r\n\r\nexport default CameraButton;\r\n",
    "static": true,
    "longname": "C:/Users/Thijs/projects/videojs-record/src/js/controls/camera-button.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 53,
    "kind": "variable",
    "name": "Button",
    "memberof": "js/controls/camera-button.js",
    "static": true,
    "longname": "js/controls/camera-button.js~Button",
    "access": "public",
    "export": false,
    "importPath": "videojs-record/js/controls/camera-button.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 54,
    "kind": "variable",
    "name": "Component",
    "memberof": "js/controls/camera-button.js",
    "static": true,
    "longname": "js/controls/camera-button.js~Component",
    "access": "public",
    "export": false,
    "importPath": "videojs-record/js/controls/camera-button.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 55,
    "kind": "class",
    "name": "CameraButton",
    "memberof": "js/controls/camera-button.js",
    "static": true,
    "longname": "js/controls/camera-button.js~CameraButton",
    "access": "public",
    "export": true,
    "importPath": "videojs-record/js/controls/camera-button.js",
    "importStyle": "CameraButton",
    "description": "Button to toggle between create and retry snapshot image.",
    "lineNumber": 19,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": ""
      },
      {
        "tagName": "@augments",
        "tagValue": "videojs.Button"
      }
    ],
    "interface": false,
    "extends": [
      "Button"
    ]
  },
  {
    "__docId__": 56,
    "kind": "method",
    "name": "buildCSSClass",
    "memberof": "js/controls/camera-button.js~CameraButton",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/controls/camera-button.js~CameraButton#buildCSSClass",
    "access": "public",
    "description": "Builds the default DOM `className`.",
    "lineNumber": 26,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "The DOM `className` for this object."
    },
    "params": []
  },
  {
    "__docId__": 57,
    "kind": "method",
    "name": "enable",
    "memberof": "js/controls/camera-button.js~CameraButton",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/controls/camera-button.js~CameraButton#enable",
    "access": "public",
    "description": "Enable the `CameraButton` element so that it can be activated or clicked.",
    "lineNumber": 33,
    "params": [],
    "return": null
  },
  {
    "__docId__": 58,
    "kind": "method",
    "name": "disable",
    "memberof": "js/controls/camera-button.js~CameraButton",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/controls/camera-button.js~CameraButton#disable",
    "access": "public",
    "description": "Disable the `CameraButton` element so that it cannot be activated or clicked.",
    "lineNumber": 43,
    "params": [],
    "return": null
  },
  {
    "__docId__": 59,
    "kind": "method",
    "name": "show",
    "memberof": "js/controls/camera-button.js~CameraButton",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/controls/camera-button.js~CameraButton#show",
    "access": "public",
    "description": "Show the `CameraButton` element if it is hidden by removing the\n'vjs-hidden' class name from it.",
    "lineNumber": 54,
    "params": [],
    "return": null
  },
  {
    "__docId__": 60,
    "kind": "method",
    "name": "handleClick",
    "memberof": "js/controls/camera-button.js~CameraButton",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/controls/camera-button.js~CameraButton#handleClick",
    "access": "public",
    "description": "This gets called when the button is clicked.",
    "lineNumber": 72,
    "params": [
      {
        "nullable": null,
        "types": [
          "EventTarget~Event"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": "The `tap` or `click` event that caused this function to be\n       called."
      }
    ],
    "listens": [
      {
        "types": [
          "*"
        ],
        "description": "tap"
      },
      {
        "types": [
          "*"
        ],
        "description": "click"
      }
    ],
    "return": null
  },
  {
    "__docId__": 61,
    "kind": "method",
    "name": "onStart",
    "memberof": "js/controls/camera-button.js~CameraButton",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/controls/camera-button.js~CameraButton#onStart",
    "access": "public",
    "description": "Add the vjs-icon-replay class to the element so it can change appearance.",
    "lineNumber": 98,
    "params": [
      {
        "nullable": null,
        "types": [
          "EventTarget~Event"
        ],
        "spread": false,
        "optional": true,
        "name": "event",
        "description": "The event that caused this function to run."
      }
    ],
    "listens": [
      {
        "types": [
          "*"
        ],
        "description": "Player#startRecord"
      }
    ],
    "return": null
  },
  {
    "__docId__": 62,
    "kind": "method",
    "name": "onStop",
    "memberof": "js/controls/camera-button.js~CameraButton",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/controls/camera-button.js~CameraButton#onStop",
    "access": "public",
    "description": "Add the vjs-icon-photo-camera class to the element so it can change appearance.",
    "lineNumber": 115,
    "params": [
      {
        "nullable": null,
        "types": [
          "EventTarget~Event"
        ],
        "spread": false,
        "optional": true,
        "name": "event",
        "description": "The event that caused this function to run."
      }
    ],
    "listens": [
      {
        "types": [
          "*"
        ],
        "description": "Player#stopRecord"
      }
    ],
    "return": null
  },
  {
    "__docId__": 63,
    "kind": "file",
    "name": "js/controls/device-button.js",
    "content": "/**\r\n * @file device-button.js\r\n * @since 2.0.0\r\n */\r\n\r\nimport videojs from 'video.js';\r\n\r\nconst Button = videojs.getComponent('Button');\r\nconst Component = videojs.getComponent('Component');\r\n\r\n/**\r\n * Button to select recording device.\r\n *\r\n * @class\r\n * @augments videojs.Button\r\n*/\r\nclass DeviceButton extends Button {\r\n    /**\r\n     * This gets called when this button gets:\r\n     *\r\n     * - Clicked (via the `click` event, listening starts in the constructor)\r\n     * - Tapped (via the `tap` event, listening starts in the constructor)\r\n     *\r\n     * @param {EventTarget~Event} event\r\n     *        The `keydown`, `tap`, or `click` event that caused this function to be\r\n     *        called.\r\n     *\r\n     * @listens tap\r\n     * @listens click\r\n     */\r\n    handleClick(event) {\r\n        // open device dialog\r\n        this.player_.record().getDevice();\r\n    }\r\n\r\n    /**\r\n     * Show the `DeviceButton` element if it is hidden by removing the\r\n     * 'vjs-hidden' class name from it.\r\n     */\r\n    show() {\r\n        if (this.layoutExclude && this.layoutExclude === true) {\r\n            // ignore\r\n            return;\r\n        }\r\n        super.show();\r\n    }\r\n}\r\n\r\n/**\r\n * The text that should display over the `DeviceButton`s controls. Added for localization.\r\n *\r\n * @type {string}\r\n * @private\r\n */\r\nDeviceButton.prototype.controlText_ = 'Device';\r\n\r\nComponent.registerComponent('DeviceButton', DeviceButton);\r\n\r\nexport default DeviceButton;\r\n",
    "static": true,
    "longname": "C:/Users/Thijs/projects/videojs-record/src/js/controls/device-button.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 64,
    "kind": "variable",
    "name": "Button",
    "memberof": "js/controls/device-button.js",
    "static": true,
    "longname": "js/controls/device-button.js~Button",
    "access": "public",
    "export": false,
    "importPath": "videojs-record/js/controls/device-button.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 65,
    "kind": "variable",
    "name": "Component",
    "memberof": "js/controls/device-button.js",
    "static": true,
    "longname": "js/controls/device-button.js~Component",
    "access": "public",
    "export": false,
    "importPath": "videojs-record/js/controls/device-button.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 66,
    "kind": "class",
    "name": "DeviceButton",
    "memberof": "js/controls/device-button.js",
    "static": true,
    "longname": "js/controls/device-button.js~DeviceButton",
    "access": "public",
    "export": true,
    "importPath": "videojs-record/js/controls/device-button.js",
    "importStyle": "DeviceButton",
    "description": "Button to select recording device.",
    "lineNumber": 17,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": ""
      },
      {
        "tagName": "@augments",
        "tagValue": "videojs.Button"
      }
    ],
    "interface": false,
    "extends": [
      "Button"
    ]
  },
  {
    "__docId__": 67,
    "kind": "method",
    "name": "handleClick",
    "memberof": "js/controls/device-button.js~DeviceButton",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/controls/device-button.js~DeviceButton#handleClick",
    "access": "public",
    "description": "This gets called when this button gets:\n\n- Clicked (via the `click` event, listening starts in the constructor)\n- Tapped (via the `tap` event, listening starts in the constructor)",
    "lineNumber": 31,
    "params": [
      {
        "nullable": null,
        "types": [
          "EventTarget~Event"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": "The `keydown`, `tap`, or `click` event that caused this function to be\n       called."
      }
    ],
    "listens": [
      {
        "types": [
          "*"
        ],
        "description": "tap"
      },
      {
        "types": [
          "*"
        ],
        "description": "click"
      }
    ],
    "return": null
  },
  {
    "__docId__": 68,
    "kind": "method",
    "name": "show",
    "memberof": "js/controls/device-button.js~DeviceButton",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/controls/device-button.js~DeviceButton#show",
    "access": "public",
    "description": "Show the `DeviceButton` element if it is hidden by removing the\n'vjs-hidden' class name from it.",
    "lineNumber": 40,
    "params": [],
    "return": null
  },
  {
    "__docId__": 69,
    "kind": "file",
    "name": "js/controls/picture-in-picture-toggle.js",
    "content": "/**\r\n * @file picture-in-picture-toggle.js\r\n * @since 3.5.0\r\n */\r\n\r\nimport videojs from 'video.js';\r\n\r\nimport Event from '../event';\r\n\r\nconst Button = videojs.getComponent('Button');\r\nconst Component = videojs.getComponent('Component');\r\n\r\n/**\r\n * Button to toggle Picture-in-Picture mode.\r\n *\r\n * @class\r\n * @augments videojs.Button\r\n*/\r\nclass PictureInPictureToggle extends Button {\r\n    /**\r\n     * The constructor function for the class.\r\n     *\r\n     * @private\r\n     * @param {(videojs.Player|Object)} player - Video.js player instance.\r\n     * @param {Object} options - Player options.\r\n     */\r\n    constructor(player, options) {\r\n        super(player, options);\r\n\r\n        // listen for events\r\n        this.on(this.player_, Event.ENTER_PIP, this.onStart);\r\n        this.on(this.player_, Event.LEAVE_PIP, this.onStop);\r\n    }\r\n\r\n    /**\r\n     * Builds the default DOM `className`.\r\n     *\r\n     * @return {string}\r\n     *         The DOM `className` for this object.\r\n     */\r\n    buildCSSClass() {\r\n        return 'vjs-pip-button vjs-control vjs-button vjs-icon-picture-in-picture-start';\r\n    }\r\n\r\n    /**\r\n     * Show the `PictureInPictureToggle` element if it is hidden by removing the\r\n     * 'vjs-hidden' class name from it.\r\n     */\r\n    show() {\r\n        if (this.layoutExclude && this.layoutExclude === true) {\r\n            // ignore\r\n            return;\r\n        }\r\n        super.show();\r\n    }\r\n\r\n    /**\r\n     * This gets called when the button is clicked.\r\n     *\r\n     * @param {EventTarget~Event} event\r\n     *        The `tap` or `click` event that caused this function to be\r\n     *        called.\r\n     *\r\n     * @listens tap\r\n     * @listens click\r\n     */\r\n    async handleClick(event) {\r\n        let recorder = this.player_.record();\r\n\r\n        // disable button during picture-in-picture switch\r\n        this.disable();\r\n\r\n        // switch picture-in-picture mode\r\n        try {\r\n            if (recorder.mediaElement !== document.pictureInPictureElement) {\r\n                // request picture-in-picture\r\n                await recorder.mediaElement.requestPictureInPicture();\r\n            } else {\r\n                // exit picture-in-picture\r\n                await document.exitPictureInPicture();\r\n            }\r\n        } catch (error) {\r\n            // notify listeners\r\n            this.player_.trigger(Event.ERROR, error);\r\n        } finally {\r\n            // switch completed\r\n            this.enable();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Add the vjs-icon-picture-in-picture-stop class to the element so it can\r\n     * change appearance.\r\n     *\r\n     * @param {EventTarget~Event} [event]\r\n     *        The event that caused this function to run.\r\n     *\r\n     * @listens Player#enterPIP\r\n     */\r\n    onStart(event) {\r\n        // replace element class so it can change appearance\r\n        this.removeClass('vjs-icon-picture-in-picture-start');\r\n        this.addClass('vjs-icon-picture-in-picture-stop');\r\n    }\r\n\r\n    /**\r\n     * Add the vjs-icon-picture-in-picture-start class to the element so it can\r\n     * change appearance.\r\n     *\r\n     * @param {EventTarget~Event} [event]\r\n     *        The event that caused this function to run.\r\n     *\r\n     * @listens Player#leavePIP\r\n     */\r\n    onStop(event) {\r\n        // replace element class so it can change appearance\r\n        this.removeClass('vjs-icon-picture-in-picture-stop');\r\n        this.addClass('vjs-icon-picture-in-picture-start');\r\n    }\r\n}\r\n\r\n/**\r\n * The text that should display over the `PictureInPictureToggle`s controls.\r\n *\r\n * Added for localization.\r\n *\r\n * @type {string}\r\n * @private\r\n */\r\nPictureInPictureToggle.prototype.controlText_ = 'Picture in Picture';\r\n\r\nComponent.registerComponent('PictureInPictureToggle', PictureInPictureToggle);\r\n\r\nexport default PictureInPictureToggle;\r\n",
    "static": true,
    "longname": "C:/Users/Thijs/projects/videojs-record/src/js/controls/picture-in-picture-toggle.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 70,
    "kind": "variable",
    "name": "Button",
    "memberof": "js/controls/picture-in-picture-toggle.js",
    "static": true,
    "longname": "js/controls/picture-in-picture-toggle.js~Button",
    "access": "public",
    "export": false,
    "importPath": "videojs-record/js/controls/picture-in-picture-toggle.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 71,
    "kind": "variable",
    "name": "Component",
    "memberof": "js/controls/picture-in-picture-toggle.js",
    "static": true,
    "longname": "js/controls/picture-in-picture-toggle.js~Component",
    "access": "public",
    "export": false,
    "importPath": "videojs-record/js/controls/picture-in-picture-toggle.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 72,
    "kind": "class",
    "name": "PictureInPictureToggle",
    "memberof": "js/controls/picture-in-picture-toggle.js",
    "static": true,
    "longname": "js/controls/picture-in-picture-toggle.js~PictureInPictureToggle",
    "access": "public",
    "export": true,
    "importPath": "videojs-record/js/controls/picture-in-picture-toggle.js",
    "importStyle": "PictureInPictureToggle",
    "description": "Button to toggle Picture-in-Picture mode.",
    "lineNumber": 19,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": ""
      },
      {
        "tagName": "@augments",
        "tagValue": "videojs.Button"
      }
    ],
    "interface": false,
    "extends": [
      "Button"
    ]
  },
  {
    "__docId__": 73,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "js/controls/picture-in-picture-toggle.js~PictureInPictureToggle",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/controls/picture-in-picture-toggle.js~PictureInPictureToggle#constructor",
    "access": "private",
    "description": "The constructor function for the class.",
    "lineNumber": 27,
    "params": [
      {
        "nullable": null,
        "types": [
          "videojs.Player",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "player",
        "description": "Video.js player instance."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "Player options."
      }
    ]
  },
  {
    "__docId__": 74,
    "kind": "method",
    "name": "buildCSSClass",
    "memberof": "js/controls/picture-in-picture-toggle.js~PictureInPictureToggle",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/controls/picture-in-picture-toggle.js~PictureInPictureToggle#buildCSSClass",
    "access": "public",
    "description": "Builds the default DOM `className`.",
    "lineNumber": 41,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "The DOM `className` for this object."
    },
    "params": []
  },
  {
    "__docId__": 75,
    "kind": "method",
    "name": "show",
    "memberof": "js/controls/picture-in-picture-toggle.js~PictureInPictureToggle",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/controls/picture-in-picture-toggle.js~PictureInPictureToggle#show",
    "access": "public",
    "description": "Show the `PictureInPictureToggle` element if it is hidden by removing the\n'vjs-hidden' class name from it.",
    "lineNumber": 49,
    "params": [],
    "return": null
  },
  {
    "__docId__": 76,
    "kind": "method",
    "name": "handleClick",
    "memberof": "js/controls/picture-in-picture-toggle.js~PictureInPictureToggle",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "js/controls/picture-in-picture-toggle.js~PictureInPictureToggle#handleClick",
    "access": "public",
    "description": "This gets called when the button is clicked.",
    "lineNumber": 67,
    "params": [
      {
        "nullable": null,
        "types": [
          "EventTarget~Event"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": "The `tap` or `click` event that caused this function to be\n       called."
      }
    ],
    "listens": [
      {
        "types": [
          "*"
        ],
        "description": "tap"
      },
      {
        "types": [
          "*"
        ],
        "description": "click"
      }
    ],
    "return": null
  },
  {
    "__docId__": 77,
    "kind": "method",
    "name": "onStart",
    "memberof": "js/controls/picture-in-picture-toggle.js~PictureInPictureToggle",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/controls/picture-in-picture-toggle.js~PictureInPictureToggle#onStart",
    "access": "public",
    "description": "Add the vjs-icon-picture-in-picture-stop class to the element so it can\nchange appearance.",
    "lineNumber": 100,
    "params": [
      {
        "nullable": null,
        "types": [
          "EventTarget~Event"
        ],
        "spread": false,
        "optional": true,
        "name": "event",
        "description": "The event that caused this function to run."
      }
    ],
    "listens": [
      {
        "types": [
          "*"
        ],
        "description": "Player#enterPIP"
      }
    ],
    "return": null
  },
  {
    "__docId__": 78,
    "kind": "method",
    "name": "onStop",
    "memberof": "js/controls/picture-in-picture-toggle.js~PictureInPictureToggle",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/controls/picture-in-picture-toggle.js~PictureInPictureToggle#onStop",
    "access": "public",
    "description": "Add the vjs-icon-picture-in-picture-start class to the element so it can\nchange appearance.",
    "lineNumber": 115,
    "params": [
      {
        "nullable": null,
        "types": [
          "EventTarget~Event"
        ],
        "spread": false,
        "optional": true,
        "name": "event",
        "description": "The event that caused this function to run."
      }
    ],
    "listens": [
      {
        "types": [
          "*"
        ],
        "description": "Player#leavePIP"
      }
    ],
    "return": null
  },
  {
    "__docId__": 79,
    "kind": "file",
    "name": "js/controls/record-canvas.js",
    "content": "/**\r\n * @file record-canvas\r\n * @since 2.0.0\r\n */\r\n\r\nimport videojs from 'video.js';\r\n\r\nconst Component = videojs.getComponent('Component');\r\n\r\n/**\r\n * Canvas for displaying snapshot image.\r\n *\r\n * @class\r\n * @augments videojs.Component\r\n*/\r\nclass RecordCanvas extends Component {\r\n\r\n    /**\r\n     * Create the `RecordCanvas`s DOM element.\r\n     *\r\n     * @return {Element}\r\n     *         The dom element that gets created.\r\n     */\r\n    createEl() {\r\n        const canvasElement = videojs.dom.createEl('canvas');\r\n        const el = super.createEl('div', {\r\n            className: 'vjs-record-canvas',\r\n            dir: 'ltr'\r\n        });\r\n        el.appendChild(canvasElement);\r\n\r\n        return el;\r\n    }\r\n}\r\n\r\nComponent.registerComponent('RecordCanvas', RecordCanvas);\r\n\r\nexport default RecordCanvas;\r\n",
    "static": true,
    "longname": "C:/Users/Thijs/projects/videojs-record/src/js/controls/record-canvas.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 80,
    "kind": "variable",
    "name": "Component",
    "memberof": "js/controls/record-canvas.js",
    "static": true,
    "longname": "js/controls/record-canvas.js~Component",
    "access": "public",
    "export": false,
    "importPath": "videojs-record/js/controls/record-canvas.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 81,
    "kind": "class",
    "name": "RecordCanvas",
    "memberof": "js/controls/record-canvas.js",
    "static": true,
    "longname": "js/controls/record-canvas.js~RecordCanvas",
    "access": "public",
    "export": true,
    "importPath": "videojs-record/js/controls/record-canvas.js",
    "importStyle": "RecordCanvas",
    "description": "Canvas for displaying snapshot image.",
    "lineNumber": 16,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": ""
      },
      {
        "tagName": "@augments",
        "tagValue": "videojs.Component"
      }
    ],
    "interface": false,
    "extends": [
      "Component"
    ]
  },
  {
    "__docId__": 82,
    "kind": "method",
    "name": "createEl",
    "memberof": "js/controls/record-canvas.js~RecordCanvas",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/controls/record-canvas.js~RecordCanvas#createEl",
    "access": "public",
    "description": "Create the `RecordCanvas`s DOM element.",
    "lineNumber": 24,
    "return": {
      "nullable": null,
      "types": [
        "Element"
      ],
      "spread": false,
      "description": "The dom element that gets created."
    },
    "params": []
  },
  {
    "__docId__": 83,
    "kind": "file",
    "name": "js/controls/record-indicator.js",
    "content": "/**\r\n * @file record-indicator.js\r\n * @since 2.0.0\r\n */\r\n\r\nimport videojs from 'video.js';\r\n\r\nimport Event from '../event';\r\n\r\nconst Component = videojs.getComponent('Component');\r\n\r\n/**\r\n * Icon indicating recording is active.\r\n *\r\n * @class\r\n * @augments videojs.Component\r\n*/\r\nclass RecordIndicator extends Component {\r\n    /**\r\n     * The constructor function for the class.\r\n     *\r\n     * @private\r\n     * @param {(videojs.Player|Object)} player - Video.js player instance.\r\n     * @param {Object} options - Player options.\r\n     */\r\n    constructor(player, options) {\r\n        super(player, options);\r\n\r\n        this.enable();\r\n    }\r\n\r\n    /**\r\n     * Create the `RecordIndicator`s DOM element.\r\n     *\r\n     * @return {Element}\r\n     *         The dom element that gets created.\r\n     */\r\n    createEl() {\r\n        let props = {\r\n            className: 'vjs-record-indicator vjs-control',\r\n            dir: 'ltr'\r\n        };\r\n        let attr = {\r\n            'data-label': this.localize('REC')\r\n        };\r\n        return super.createEl('div', props, attr);\r\n    }\r\n\r\n    /**\r\n     * Enable event handlers.\r\n     */\r\n    enable() {\r\n        this.on(this.player_, Event.START_RECORD, this.show);\r\n        this.on(this.player_, Event.STOP_RECORD, this.hide);\r\n    }\r\n\r\n    /**\r\n     * Disable event handlers.\r\n     */\r\n    disable() {\r\n        this.off(this.player_, Event.START_RECORD, this.show);\r\n        this.off(this.player_, Event.STOP_RECORD, this.hide);\r\n    }\r\n\r\n    /**\r\n     * Show the `RecordIndicator` element if it is hidden by removing the\r\n     * 'vjs-hidden' class name from it.\r\n     */\r\n    show() {\r\n        if (this.layoutExclude && this.layoutExclude === true) {\r\n            // ignore\r\n            return;\r\n        }\r\n        super.show();\r\n    }\r\n}\r\n\r\nComponent.registerComponent('RecordIndicator', RecordIndicator);\r\n\r\nexport default RecordIndicator;\r\n",
    "static": true,
    "longname": "C:/Users/Thijs/projects/videojs-record/src/js/controls/record-indicator.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 84,
    "kind": "variable",
    "name": "Component",
    "memberof": "js/controls/record-indicator.js",
    "static": true,
    "longname": "js/controls/record-indicator.js~Component",
    "access": "public",
    "export": false,
    "importPath": "videojs-record/js/controls/record-indicator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 85,
    "kind": "class",
    "name": "RecordIndicator",
    "memberof": "js/controls/record-indicator.js",
    "static": true,
    "longname": "js/controls/record-indicator.js~RecordIndicator",
    "access": "public",
    "export": true,
    "importPath": "videojs-record/js/controls/record-indicator.js",
    "importStyle": "RecordIndicator",
    "description": "Icon indicating recording is active.",
    "lineNumber": 18,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": ""
      },
      {
        "tagName": "@augments",
        "tagValue": "videojs.Component"
      }
    ],
    "interface": false,
    "extends": [
      "Component"
    ]
  },
  {
    "__docId__": 86,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "js/controls/record-indicator.js~RecordIndicator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/controls/record-indicator.js~RecordIndicator#constructor",
    "access": "private",
    "description": "The constructor function for the class.",
    "lineNumber": 26,
    "params": [
      {
        "nullable": null,
        "types": [
          "videojs.Player",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "player",
        "description": "Video.js player instance."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "Player options."
      }
    ]
  },
  {
    "__docId__": 87,
    "kind": "method",
    "name": "createEl",
    "memberof": "js/controls/record-indicator.js~RecordIndicator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/controls/record-indicator.js~RecordIndicator#createEl",
    "access": "public",
    "description": "Create the `RecordIndicator`s DOM element.",
    "lineNumber": 38,
    "return": {
      "nullable": null,
      "types": [
        "Element"
      ],
      "spread": false,
      "description": "The dom element that gets created."
    },
    "params": []
  },
  {
    "__docId__": 88,
    "kind": "method",
    "name": "enable",
    "memberof": "js/controls/record-indicator.js~RecordIndicator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/controls/record-indicator.js~RecordIndicator#enable",
    "access": "public",
    "description": "Enable event handlers.",
    "lineNumber": 52,
    "params": [],
    "return": null
  },
  {
    "__docId__": 89,
    "kind": "method",
    "name": "disable",
    "memberof": "js/controls/record-indicator.js~RecordIndicator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/controls/record-indicator.js~RecordIndicator#disable",
    "access": "public",
    "description": "Disable event handlers.",
    "lineNumber": 60,
    "params": [],
    "return": null
  },
  {
    "__docId__": 90,
    "kind": "method",
    "name": "show",
    "memberof": "js/controls/record-indicator.js~RecordIndicator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/controls/record-indicator.js~RecordIndicator#show",
    "access": "public",
    "description": "Show the `RecordIndicator` element if it is hidden by removing the\n'vjs-hidden' class name from it.",
    "lineNumber": 69,
    "params": [],
    "return": null
  },
  {
    "__docId__": 91,
    "kind": "file",
    "name": "js/controls/record-toggle.js",
    "content": "/**\r\n * @file record-toggle.js\r\n * @since 2.0.0\r\n */\r\n\r\nimport videojs from 'video.js';\r\n\r\nimport Event from '../event';\r\n\r\nconst Button = videojs.getComponent('Button');\r\nconst Component = videojs.getComponent('Component');\r\n\r\n/**\r\n * Button to toggle between start and stop recording.\r\n *\r\n * @class\r\n * @augments videojs.Button\r\n*/\r\nclass RecordToggle extends Button {\r\n    /**\r\n     * Builds the default DOM `className`.\r\n     *\r\n     * @return {string}\r\n     *         The DOM `className` for this object.\r\n     */\r\n    buildCSSClass() {\r\n        return 'vjs-record-button vjs-control vjs-button vjs-icon-record-start';\r\n    }\r\n\r\n    /**\r\n     * Enable the `RecordToggle` element so that it can be activated or clicked.\r\n     */\r\n    enable() {\r\n        super.enable();\r\n\r\n        this.on(this.player_, Event.START_RECORD, this.onStart);\r\n        this.on(this.player_, Event.STOP_RECORD, this.onStop);\r\n    }\r\n\r\n    /**\r\n     * Disable the `RecordToggle` element so that it cannot be activated or clicked.\r\n     */\r\n    disable() {\r\n        super.disable();\r\n\r\n        this.off(this.player_, Event.START_RECORD, this.onStart);\r\n        this.off(this.player_, Event.STOP_RECORD, this.onStop);\r\n    }\r\n\r\n    /**\r\n     * Show the `RecordToggle` element if it is hidden by removing the\r\n     * 'vjs-hidden' class name from it.\r\n     */\r\n    show() {\r\n        if (this.layoutExclude && this.layoutExclude === true) {\r\n            // ignore\r\n            return;\r\n        }\r\n        super.show();\r\n    }\r\n\r\n    /**\r\n     * This gets called when the button is clicked.\r\n     *\r\n     * @param {EventTarget~Event} event\r\n     *        The `tap` or `click` event that caused this function to be\r\n     *        called.\r\n     *\r\n     * @listens tap\r\n     * @listens click\r\n     */\r\n    handleClick(event) {\r\n        let recorder = this.player_.record();\r\n        if (!recorder.isRecording()) {\r\n            recorder.start();\r\n        } else {\r\n            recorder.stop();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Add the vjs-icon-record-stop class to the element so it can change appearance.\r\n     *\r\n     * @param {EventTarget~Event} [event]\r\n     *        The event that caused this function to run.\r\n     *\r\n     * @listens Player#startRecord\r\n     */\r\n    onStart(event) {\r\n        // replace element class so it can change appearance\r\n        this.removeClass('vjs-icon-record-start');\r\n        this.addClass('vjs-icon-record-stop');\r\n\r\n        // change the button text\r\n        this.controlText('Stop');\r\n    }\r\n\r\n    /**\r\n     * Add the vjs-icon-record-start class to the element so it can change appearance.\r\n     *\r\n     * @param {EventTarget~Event} [event]\r\n     *        The event that caused this function to run.\r\n     *\r\n     * @listens Player#stopRecord\r\n     */\r\n    onStop(event) {\r\n        // replace element class so it can change appearance\r\n        this.removeClass('vjs-icon-record-stop');\r\n        this.addClass('vjs-icon-record-start');\r\n\r\n        // change the button text\r\n        this.controlText('Record');\r\n    }\r\n}\r\n\r\n/**\r\n * The text that should display over the `RecordToggle`s controls. Added for localization.\r\n *\r\n * @type {string}\r\n * @private\r\n */\r\nRecordToggle.prototype.controlText_ = 'Record';\r\n\r\nComponent.registerComponent('RecordToggle', RecordToggle);\r\n\r\nexport default RecordToggle;\r\n",
    "static": true,
    "longname": "C:/Users/Thijs/projects/videojs-record/src/js/controls/record-toggle.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 92,
    "kind": "variable",
    "name": "Button",
    "memberof": "js/controls/record-toggle.js",
    "static": true,
    "longname": "js/controls/record-toggle.js~Button",
    "access": "public",
    "export": false,
    "importPath": "videojs-record/js/controls/record-toggle.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 93,
    "kind": "variable",
    "name": "Component",
    "memberof": "js/controls/record-toggle.js",
    "static": true,
    "longname": "js/controls/record-toggle.js~Component",
    "access": "public",
    "export": false,
    "importPath": "videojs-record/js/controls/record-toggle.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 94,
    "kind": "class",
    "name": "RecordToggle",
    "memberof": "js/controls/record-toggle.js",
    "static": true,
    "longname": "js/controls/record-toggle.js~RecordToggle",
    "access": "public",
    "export": true,
    "importPath": "videojs-record/js/controls/record-toggle.js",
    "importStyle": "RecordToggle",
    "description": "Button to toggle between start and stop recording.",
    "lineNumber": 19,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": ""
      },
      {
        "tagName": "@augments",
        "tagValue": "videojs.Button"
      }
    ],
    "interface": false,
    "extends": [
      "Button"
    ]
  },
  {
    "__docId__": 95,
    "kind": "method",
    "name": "buildCSSClass",
    "memberof": "js/controls/record-toggle.js~RecordToggle",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/controls/record-toggle.js~RecordToggle#buildCSSClass",
    "access": "public",
    "description": "Builds the default DOM `className`.",
    "lineNumber": 26,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "The DOM `className` for this object."
    },
    "params": []
  },
  {
    "__docId__": 96,
    "kind": "method",
    "name": "enable",
    "memberof": "js/controls/record-toggle.js~RecordToggle",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/controls/record-toggle.js~RecordToggle#enable",
    "access": "public",
    "description": "Enable the `RecordToggle` element so that it can be activated or clicked.",
    "lineNumber": 33,
    "params": [],
    "return": null
  },
  {
    "__docId__": 97,
    "kind": "method",
    "name": "disable",
    "memberof": "js/controls/record-toggle.js~RecordToggle",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/controls/record-toggle.js~RecordToggle#disable",
    "access": "public",
    "description": "Disable the `RecordToggle` element so that it cannot be activated or clicked.",
    "lineNumber": 43,
    "params": [],
    "return": null
  },
  {
    "__docId__": 98,
    "kind": "method",
    "name": "show",
    "memberof": "js/controls/record-toggle.js~RecordToggle",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/controls/record-toggle.js~RecordToggle#show",
    "access": "public",
    "description": "Show the `RecordToggle` element if it is hidden by removing the\n'vjs-hidden' class name from it.",
    "lineNumber": 54,
    "params": [],
    "return": null
  },
  {
    "__docId__": 99,
    "kind": "method",
    "name": "handleClick",
    "memberof": "js/controls/record-toggle.js~RecordToggle",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/controls/record-toggle.js~RecordToggle#handleClick",
    "access": "public",
    "description": "This gets called when the button is clicked.",
    "lineNumber": 72,
    "params": [
      {
        "nullable": null,
        "types": [
          "EventTarget~Event"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": "The `tap` or `click` event that caused this function to be\n       called."
      }
    ],
    "listens": [
      {
        "types": [
          "*"
        ],
        "description": "tap"
      },
      {
        "types": [
          "*"
        ],
        "description": "click"
      }
    ],
    "return": null
  },
  {
    "__docId__": 100,
    "kind": "method",
    "name": "onStart",
    "memberof": "js/controls/record-toggle.js~RecordToggle",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/controls/record-toggle.js~RecordToggle#onStart",
    "access": "public",
    "description": "Add the vjs-icon-record-stop class to the element so it can change appearance.",
    "lineNumber": 89,
    "params": [
      {
        "nullable": null,
        "types": [
          "EventTarget~Event"
        ],
        "spread": false,
        "optional": true,
        "name": "event",
        "description": "The event that caused this function to run."
      }
    ],
    "listens": [
      {
        "types": [
          "*"
        ],
        "description": "Player#startRecord"
      }
    ],
    "return": null
  },
  {
    "__docId__": 101,
    "kind": "method",
    "name": "onStop",
    "memberof": "js/controls/record-toggle.js~RecordToggle",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/controls/record-toggle.js~RecordToggle#onStop",
    "access": "public",
    "description": "Add the vjs-icon-record-start class to the element so it can change appearance.",
    "lineNumber": 106,
    "params": [
      {
        "nullable": null,
        "types": [
          "EventTarget~Event"
        ],
        "spread": false,
        "optional": true,
        "name": "event",
        "description": "The event that caused this function to run."
      }
    ],
    "listens": [
      {
        "types": [
          "*"
        ],
        "description": "Player#stopRecord"
      }
    ],
    "return": null
  },
  {
    "__docId__": 102,
    "kind": "file",
    "name": "js/defaults.js",
    "content": "/**\r\n * @file defaults.js\r\n * @since 2.0.0\r\n */\r\n\r\n// plugin defaults\r\nconst pluginDefaultOptions = {\r\n    // Single snapshot image.\r\n    image: false,\r\n    // Include audio in the recorded clip.\r\n    audio: false,\r\n    // Include video in the recorded clip.\r\n    video: false,\r\n    // Animated GIF.\r\n    animation: false,\r\n    // Screen capture.\r\n    screen: false,\r\n    // Maximum length of the recorded clip.\r\n    maxLength: 10,\r\n    // Maximum file size of the recorded clip. Works only when the timeSlice\r\n    // option is also enabled.\r\n    maxFileSize: 0,\r\n    // Boolean indicating if milliseconds should be included,\r\n    // e.g. \"00:00:000\" vs \"00:00\".\r\n    displayMilliseconds: false,\r\n    // Use a custom time format function, for example: (seconds, guide) => `test:${seconds}:${guide}`\r\n    formatTime: undefined,\r\n    // Width of the recorded video frames.\r\n    frameWidth: 320,\r\n    // Height of the recorded video frames.\r\n    frameHeight: 240,\r\n    // Enables console logging for debugging purposes.\r\n    debug: false,\r\n    // Enable Picture-in-Picture support.\r\n    pip: false,\r\n    // Turn off the camera/mic (and light) when audio and/or video recording\r\n    // stops, and turns them on again when you resume recording.\r\n    autoMuteDevice: false,\r\n    // The video bitrate in kbps (only used in webm-wasm plugin).\r\n    videoBitRate: 1200,\r\n    // Video recording library to use. Legal values are 'recordrtc' (default)\r\n    // and 'webm-wasm'.\r\n    videoEngine: 'recordrtc',\r\n    // The video frame rate in frames per second (only used in webm-wasm plugin).\r\n    videoFrameRate: 30,\r\n    // The mime type for the video recorder.\r\n    // Use 'video/mp4' (Firefox) or 'video/webm;codecs=H264' (Chrome 52 and\r\n    // newer) for MP4.\r\n    videoMimeType: 'video/webm',\r\n    // Video recorder type to use. This allows you to specify an alternative\r\n    // recorder class, e.g. WhammyRecorder from recordrtc. Defaults to 'auto'\r\n    // which let's recordrtc specify the best available recorder type.\r\n    videoRecorderType: 'auto',\r\n    // URL for the video worker. Use an empty string '' to disable (default).\r\n    videoWorkerURL: '',\r\n    // URL for the video worker WebAssembly file. Use an empty string '' to\r\n    // disable (default).\r\n    videoWebAssemblyURL: '',\r\n    // Audio recording library to use. Legal values are 'recordrtc' (default),\r\n    // 'libvorbis.js', 'opus-recorder', 'opus-media-recorder', 'lamejs', 'vmsg'\r\n    // and 'recorder.js'.\r\n    audioEngine: 'recordrtc',\r\n    // Audio recorder type to use. This allows you to specify an alternative\r\n    // recorder class, e.g. StereoAudioRecorder. Defaults to 'auto' which let's\r\n    // recordrtc specify the best available recorder type. Currently this\r\n    // setting is only used with the 'recordrtc' audioEngine.\r\n    audioRecorderType: 'auto',\r\n    // The mime type for the audio recorder. Defaults to 'auto' which will pick\r\n    // the best option available in the browser (e.g. either 'audio/wav',\r\n    // 'audio/ogg' or 'audio/webm').\r\n    audioMimeType: 'auto',\r\n    // The size of the audio buffer (in sample-frames) which needs to\r\n    // be processed each time onprocessaudio is called.\r\n    // From the spec: This value controls how frequently the audioprocess event is\r\n    // dispatched and how many sample-frames need to be processed each call.\r\n    // Lower values for buffer size will result in a lower (better) latency.\r\n    // Higher values will be necessary to avoid audio breakup and glitches.\r\n    // Legal values are 256, 512, 1024, 2048, 4096, 8192 or 16384.\r\n    audioBufferSize: 4096,\r\n    // The audio sample rate (in sample-frames per second) at which the\r\n    // AudioContext handles audio. It is assumed that all AudioNodes\r\n    // in the context run at this rate. In making this assumption,\r\n    // sample-rate converters or \"varispeed\" processors are not supported\r\n    // in real-time processing.\r\n    // The sampleRate parameter describes the sample-rate of the\r\n    // linear PCM audio data in the buffer in sample-frames per second.\r\n    // An implementation must support sample-rates in at least\r\n    // the range 22050 to 96000.\r\n    audioSampleRate: 44100,\r\n    // The audio bitrate in kbps (only used in lamejs plugin).\r\n    audioBitRate: 128,\r\n    // Allows you to record single-channel audio, which can reduce the\r\n    // file size.\r\n    audioChannels: 2,\r\n    // URL for the audio worker. Use an empty string '' to disable (default).\r\n    audioWorkerURL: '',\r\n    // URL for the audio worker WebAssembly file. Use an empty string '' to\r\n    // disable (default).\r\n    audioWebAssemblyURL: '',\r\n    // Enables the audioBufferUpdate event that provides realtime AudioBuffer\r\n    // instances from the input audio device.\r\n    audioBufferUpdate: false,\r\n    // Frame rate in frames per second.\r\n    animationFrameRate: 200,\r\n    // Sets quality of color quantization (conversion of images to the\r\n    // maximum 256 colors allowed by the GIF specification).\r\n    // Lower values (minimum = 1) produce better colors,\r\n    // but slow processing significantly. 10 is the default,\r\n    // and produces good color mapping at reasonable speeds.\r\n    // Values greater than 20 do not yield significant improvements\r\n    // in speed.\r\n    animationQuality: 10,\r\n    // A string indicating the output type: dataURL (base64 string) or blob.\r\n    // The default output is dataURL.\r\n    imageOutputType: 'dataURL',\r\n    // A string indicating the image format used in image-only mode. The default\r\n    // format type is image/png.\r\n    imageOutputFormat: 'image/png',\r\n    // A number between 0 and 1 indicating the image quality to use for image\r\n    // formats that use lossy compression such as image/jpeg and image/webp.\r\n    // If this argument is anything else, the default value for image quality\r\n    // is used. The default value is 0.92.\r\n    imageOutputQuality: 0.92,\r\n    // Accepts numbers in milliseconds; use this to force intervals-based blobs.\r\n    timeSlice: 0,\r\n    // Media converter library to use. Legal values are 'ts-ebml', 'ffmpeg.wasm'\r\n    // and 'ffmpeg.js'. Use an empty string '' to disable (default).\r\n    convertEngine: '',\r\n    // URL for the converter worker.\r\n    convertWorkerURL: '',\r\n    // List of string options to pass to the convert engine.\r\n    convertOptions: [],\r\n    // If the converter should automatically start after recording (default),\r\n    // or manually by calling `convert()`\r\n    convertAuto: true,\r\n    // Enable keyboard hotkeys.\r\n    hotKeys: false,\r\n    // Use this object to specify additional settings for the library used by the\r\n    // plugin (only used in opus-recorder, ffmpeg.js, ffmpeg.wasm and vmsg plugins).\r\n    pluginLibraryOptions: {}\r\n};\r\n\r\nexport default pluginDefaultOptions;\r\n",
    "static": true,
    "longname": "C:/Users/Thijs/projects/videojs-record/src/js/defaults.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 103,
    "kind": "variable",
    "name": "pluginDefaultOptions",
    "memberof": "js/defaults.js",
    "static": true,
    "longname": "js/defaults.js~pluginDefaultOptions",
    "access": "public",
    "export": true,
    "importPath": "videojs-record/js/defaults.js",
    "importStyle": "pluginDefaultOptions",
    "description": "",
    "lineNumber": 7,
    "since": "2.0.0",
    "unknown": [
      {
        "tagName": "@file",
        "tagValue": "defaults.js"
      }
    ],
    "type": {
      "types": [
        "{\"image\": *, \"audio\": *, \"video\": *, \"animation\": *, \"screen\": *, \"maxLength\": number, \"maxFileSize\": *, \"displayMilliseconds\": *, \"formatTime\": *, \"frameWidth\": number, \"frameHeight\": number, \"debug\": *, \"pip\": *, \"autoMuteDevice\": *, \"videoBitRate\": number, \"videoEngine\": string, \"videoFrameRate\": number, \"videoMimeType\": string, \"videoRecorderType\": string, \"videoWorkerURL\": *, \"videoWebAssemblyURL\": *, \"audioEngine\": string, \"audioRecorderType\": string, \"audioMimeType\": string, \"audioBufferSize\": number, \"audioSampleRate\": number, \"audioBitRate\": number, \"audioChannels\": number, \"audioWorkerURL\": *, \"audioWebAssemblyURL\": *, \"audioBufferUpdate\": *, \"animationFrameRate\": number, \"animationQuality\": number, \"imageOutputType\": string, \"imageOutputFormat\": string, \"imageOutputQuality\": number, \"timeSlice\": *, \"convertEngine\": *, \"convertWorkerURL\": *, \"convertOptions\": *, \"convertAuto\": boolean, \"hotKeys\": *, \"pluginLibraryOptions\": *}"
      ]
    }
  },
  {
    "__docId__": 104,
    "kind": "file",
    "name": "js/engine/convert-engine.js",
    "content": "/**\r\n * @file convert-engine.js\r\n * @since 3.3.0\r\n */\r\n\r\nimport videojs from 'video.js';\r\n\r\nimport {blobToArrayBuffer, addFileInfo, downloadBlob} from '../utils/file-util';\r\n\r\nconst Component = videojs.getComponent('Component');\r\n\r\n// supported convert plugin engines\r\nconst TSEBML = 'ts-ebml';\r\nconst FFMPEGJS = 'ffmpeg.js';\r\nconst FFMPEGWASM = 'ffmpeg.wasm';\r\n\r\n// all convert plugins\r\nconst CONVERT_PLUGINS = [TSEBML, FFMPEGJS, FFMPEGWASM];\r\n\r\n/**\r\n * Base class for converter backends.\r\n * @class\r\n * @augments videojs.Component\r\n */\r\nclass ConvertEngine extends Component {\r\n    /**\r\n     * Creates an instance of this class.\r\n     *\r\n     * @param  {Player} player - The `Player` that this class should be\r\n     *     attached to.\r\n     * @param  {Object} [options] - The key/value store of player options.\r\n     */\r\n    constructor(player, options) {\r\n        // auto mixin the evented mixin (required since video.js v6.6.0)\r\n        options.evented = true;\r\n\r\n        super(player, options);\r\n    }\r\n\r\n    /**\r\n     * Setup recording engine.\r\n     *\r\n     * @param {Object} mediaType - Object describing the media type of this\r\n     *     engine.\r\n     * @param {Boolean} debug - Indicating whether or not debug messages should\r\n     *     be printed in the console.\r\n     */\r\n    setup(mediaType, debug) {\r\n        this.mediaType = mediaType;\r\n        this.debug = debug;\r\n    }\r\n\r\n    /**\r\n     * Load `Blob` and return `Promise`.\r\n     *\r\n     * @param {Blob} data - `Blob` to load.\r\n     * @returns {Promise} - Promise with `ArrayBuffer` data.\r\n     */\r\n    loadBlob(data) {\r\n        return blobToArrayBuffer(data);\r\n    }\r\n\r\n    /**\r\n     * Add filename and timestamp to converted file object.\r\n     *\r\n     * @param {(Blob|File)} fileObj - `Blob` or `File` object to modify.\r\n     * @param {date} [now] - Optional date information, default is\r\n     *    current timestamp.\r\n     */\r\n    addFileInfo(fileObj, now) {\r\n        addFileInfo(fileObj, now);\r\n    }\r\n\r\n    /**\r\n     * Show save as dialog in browser so the user can store the converted\r\n     * media locally.\r\n     *\r\n     * @param {Object} name - Object with names for the particular blob(s)\r\n     *     you want to save. File extensions are added automatically. For\r\n     *     example: {'video': 'name-of-video-file'}. Supported keys are\r\n     *     'audio', 'video' and 'gif'.\r\n     */\r\n    saveAs(name) {\r\n        let fileName = name[Object.keys(name)[0]];\r\n\r\n        // download converted file\r\n        downloadBlob(fileName, this.player().convertedData);\r\n    }\r\n}\r\n\r\n// expose component for external plugins\r\nvideojs.ConvertEngine = ConvertEngine;\r\nComponent.registerComponent('ConvertEngine', ConvertEngine);\r\n\r\nexport {\r\n    ConvertEngine, CONVERT_PLUGINS, TSEBML, FFMPEGJS, FFMPEGWASM\r\n};\r\n",
    "static": true,
    "longname": "C:/Users/Thijs/projects/videojs-record/src/js/engine/convert-engine.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 105,
    "kind": "variable",
    "name": "Component",
    "memberof": "js/engine/convert-engine.js",
    "static": true,
    "longname": "js/engine/convert-engine.js~Component",
    "access": "public",
    "export": false,
    "importPath": "videojs-record/js/engine/convert-engine.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 106,
    "kind": "class",
    "name": "ConvertEngine",
    "memberof": "js/engine/convert-engine.js",
    "static": true,
    "longname": "js/engine/convert-engine.js~ConvertEngine",
    "access": "public",
    "export": true,
    "importPath": "videojs-record/js/engine/convert-engine.js",
    "importStyle": "{ConvertEngine}",
    "description": "Base class for converter backends.",
    "lineNumber": 25,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": ""
      },
      {
        "tagName": "@augments",
        "tagValue": "videojs.Component"
      }
    ],
    "interface": false,
    "extends": [
      "Component"
    ]
  },
  {
    "__docId__": 107,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "js/engine/convert-engine.js~ConvertEngine",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/engine/convert-engine.js~ConvertEngine#constructor",
    "access": "public",
    "description": "Creates an instance of this class.",
    "lineNumber": 33,
    "params": [
      {
        "nullable": null,
        "types": [
          "Player"
        ],
        "spread": false,
        "optional": false,
        "name": "player",
        "description": "The `Player` that this class should be\n    attached to."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "The key/value store of player options."
      }
    ]
  },
  {
    "__docId__": 108,
    "kind": "method",
    "name": "setup",
    "memberof": "js/engine/convert-engine.js~ConvertEngine",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/engine/convert-engine.js~ConvertEngine#setup",
    "access": "public",
    "description": "Setup recording engine.",
    "lineNumber": 48,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "mediaType",
        "description": "Object describing the media type of this\n    engine."
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "debug",
        "description": "Indicating whether or not debug messages should\n    be printed in the console."
      }
    ],
    "return": null
  },
  {
    "__docId__": 109,
    "kind": "member",
    "name": "mediaType",
    "memberof": "js/engine/convert-engine.js~ConvertEngine",
    "static": false,
    "longname": "js/engine/convert-engine.js~ConvertEngine#mediaType",
    "access": "public",
    "description": null,
    "lineNumber": 49,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 110,
    "kind": "member",
    "name": "debug",
    "memberof": "js/engine/convert-engine.js~ConvertEngine",
    "static": false,
    "longname": "js/engine/convert-engine.js~ConvertEngine#debug",
    "access": "public",
    "description": null,
    "lineNumber": 50,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 111,
    "kind": "method",
    "name": "loadBlob",
    "memberof": "js/engine/convert-engine.js~ConvertEngine",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/engine/convert-engine.js~ConvertEngine#loadBlob",
    "access": "public",
    "description": "Load `Blob` and return `Promise`.",
    "lineNumber": 59,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} - Promise with `ArrayBuffer` data."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Blob"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "`Blob` to load."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Promise with `ArrayBuffer` data."
    }
  },
  {
    "__docId__": 112,
    "kind": "method",
    "name": "addFileInfo",
    "memberof": "js/engine/convert-engine.js~ConvertEngine",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/engine/convert-engine.js~ConvertEngine#addFileInfo",
    "access": "public",
    "description": "Add filename and timestamp to converted file object.",
    "lineNumber": 70,
    "params": [
      {
        "nullable": null,
        "types": [
          "Blob",
          "File"
        ],
        "spread": false,
        "optional": false,
        "name": "fileObj",
        "description": "`Blob` or `File` object to modify."
      },
      {
        "nullable": null,
        "types": [
          "date"
        ],
        "spread": false,
        "optional": true,
        "name": "now",
        "description": "Optional date information, default is\n   current timestamp."
      }
    ],
    "return": null
  },
  {
    "__docId__": 113,
    "kind": "method",
    "name": "saveAs",
    "memberof": "js/engine/convert-engine.js~ConvertEngine",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/engine/convert-engine.js~ConvertEngine#saveAs",
    "access": "public",
    "description": "Show save as dialog in browser so the user can store the converted\nmedia locally.",
    "lineNumber": 83,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "Object with names for the particular blob(s)\n    you want to save. File extensions are added automatically. For\n    example: {'video': 'name-of-video-file'}. Supported keys are\n    'audio', 'video' and 'gif'."
      }
    ],
    "return": null
  },
  {
    "__docId__": 114,
    "kind": "variable",
    "name": "CONVERT_PLUGINS",
    "memberof": "js/engine/convert-engine.js",
    "static": true,
    "longname": "js/engine/convert-engine.js~CONVERT_PLUGINS",
    "access": "public",
    "export": true,
    "importPath": "videojs-record/js/engine/convert-engine.js",
    "importStyle": "{CONVERT_PLUGINS}",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 115,
    "kind": "variable",
    "name": "TSEBML",
    "memberof": "js/engine/convert-engine.js",
    "static": true,
    "longname": "js/engine/convert-engine.js~TSEBML",
    "access": "public",
    "export": true,
    "importPath": "videojs-record/js/engine/convert-engine.js",
    "importStyle": "{TSEBML}",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 116,
    "kind": "variable",
    "name": "FFMPEGJS",
    "memberof": "js/engine/convert-engine.js",
    "static": true,
    "longname": "js/engine/convert-engine.js~FFMPEGJS",
    "access": "public",
    "export": true,
    "importPath": "videojs-record/js/engine/convert-engine.js",
    "importStyle": "{FFMPEGJS}",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 117,
    "kind": "variable",
    "name": "FFMPEGWASM",
    "memberof": "js/engine/convert-engine.js",
    "static": true,
    "longname": "js/engine/convert-engine.js~FFMPEGWASM",
    "access": "public",
    "export": true,
    "importPath": "videojs-record/js/engine/convert-engine.js",
    "importStyle": "{FFMPEGWASM}",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 118,
    "kind": "file",
    "name": "js/engine/engine-loader.js",
    "content": "/**\r\n * @file engine-loader.js\r\n * @since 3.3.0\r\n */\r\n\r\nimport videojs from 'video.js';\r\n\r\nimport RecordRTCEngine from './record-rtc';\r\nimport {CONVERT_PLUGINS, TSEBML, FFMPEGJS, FFMPEGWASM} from './convert-engine';\r\nimport {RECORDRTC, LIBVORBISJS, RECORDERJS, LAMEJS, OPUSRECORDER, OPUSMEDIARECORDER, VMSG, WEBMWASM, AUDIO_PLUGINS} from './record-engine';\r\n\r\n/**\r\n * Get audio plugin engine class.\r\n *\r\n * @private\r\n * @param {String} audioEngine - Name of the audio engine.\r\n * @returns {Object} Audio engine class.\r\n */\r\nconst getAudioEngine = function(audioEngine) {\r\n    let AudioEngineClass;\r\n    switch (audioEngine) {\r\n        case RECORDRTC:\r\n            // RecordRTC.js (default)\r\n            AudioEngineClass = RecordRTCEngine;\r\n            break;\r\n\r\n        case LIBVORBISJS:\r\n            // libvorbis.js\r\n            AudioEngineClass = videojs.LibVorbisEngine;\r\n            break;\r\n\r\n        case RECORDERJS:\r\n            // recorder.js\r\n            AudioEngineClass = videojs.RecorderjsEngine;\r\n            break;\r\n\r\n        case LAMEJS:\r\n            // lamejs\r\n            AudioEngineClass = videojs.LamejsEngine;\r\n            break;\r\n\r\n        case OPUSRECORDER:\r\n            // opus-recorder\r\n            AudioEngineClass = videojs.OpusRecorderEngine;\r\n            break;\r\n\r\n        case OPUSMEDIARECORDER:\r\n            // opus-media-recorder\r\n            AudioEngineClass = videojs.OpusMediaRecorderEngine;\r\n            break;\r\n\r\n        case VMSG:\r\n            // vmsg\r\n            AudioEngineClass = videojs.VmsgEngine;\r\n            break;\r\n\r\n        default:\r\n            // unknown engine\r\n            throw new Error('Unknown audioEngine: ' + audioEngine);\r\n    }\r\n    return AudioEngineClass;\r\n};\r\n\r\n\r\n/**\r\n * Get video plugin engine class.\r\n *\r\n * @private\r\n * @param {String} videoEngine - Name of the video engine.\r\n * @returns {Object} Video engine class.\r\n */\r\nconst getVideoEngine = function(videoEngine) {\r\n    let VideoEngineClass;\r\n    switch (videoEngine) {\r\n        case RECORDRTC:\r\n            // RecordRTC.js (default)\r\n            VideoEngineClass = RecordRTCEngine;\r\n            break;\r\n\r\n        case WEBMWASM:\r\n            // webm-wasm\r\n            VideoEngineClass = videojs.WebmWasmEngine;\r\n            break;\r\n\r\n        default:\r\n            // unknown engine\r\n            throw new Error('Unknown videoEngine: ' + videoEngine);\r\n    }\r\n    return VideoEngineClass;\r\n};\r\n\r\n/**\r\n * Check whether any audio record plugins are enabled.\r\n *\r\n * @private\r\n * @param {String} audioEngine - Name of the audio engine.\r\n * @returns {Boolean} Whether any audio plugins are enabled or not.\r\n */\r\nconst isAudioPluginActive = function(audioEngine) {\r\n    return AUDIO_PLUGINS.indexOf(audioEngine) > -1;\r\n};\r\n\r\n/**\r\n * Get converter plugin engine class.\r\n *\r\n * @private\r\n * @param {String} convertEngine - Name of the convert engine.\r\n * @returns {Object} Convert engine class.\r\n */\r\nconst getConvertEngine = function(convertEngine) {\r\n    let ConvertEngineClass;\r\n    switch (convertEngine) {\r\n        case '':\r\n            // disabled (default)\r\n            break;\r\n\r\n        case TSEBML:\r\n            // ts-ebml\r\n            ConvertEngineClass = videojs.TsEBMLEngine;\r\n            break;\r\n\r\n        case FFMPEGJS:\r\n            // ffmpeg.js\r\n            ConvertEngineClass = videojs.FFmpegjsEngine;\r\n            break;\r\n\r\n        case FFMPEGWASM:\r\n            // ffmpeg.wasm\r\n            ConvertEngineClass = videojs.FFmpegWasmEngine;\r\n            break;\r\n\r\n        default:\r\n            // unknown engine\r\n            throw new Error('Unknown convertEngine: ' + convertEngine);\r\n    }\r\n    return ConvertEngineClass;\r\n};\r\n\r\nexport {\r\n    getAudioEngine, isAudioPluginActive, getVideoEngine, getConvertEngine\r\n};\r\n",
    "static": true,
    "longname": "C:/Users/Thijs/projects/videojs-record/src/js/engine/engine-loader.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 119,
    "kind": "function",
    "name": "getAudioEngine",
    "memberof": "js/engine/engine-loader.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/engine/engine-loader.js~getAudioEngine",
    "access": "private",
    "export": true,
    "importPath": "videojs-record/js/engine/engine-loader.js",
    "importStyle": "{getAudioEngine}",
    "description": "Get audio plugin engine class.",
    "lineNumber": 19,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object} Audio engine class."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "audioEngine",
        "description": "Name of the audio engine."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "Audio engine class."
    }
  },
  {
    "__docId__": 120,
    "kind": "function",
    "name": "isAudioPluginActive",
    "memberof": "js/engine/engine-loader.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/engine/engine-loader.js~isAudioPluginActive",
    "access": "private",
    "export": true,
    "importPath": "videojs-record/js/engine/engine-loader.js",
    "importStyle": "{isAudioPluginActive}",
    "description": "Check whether any audio record plugins are enabled.",
    "lineNumber": 99,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Boolean} Whether any audio plugins are enabled or not."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "audioEngine",
        "description": "Name of the audio engine."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "Whether any audio plugins are enabled or not."
    }
  },
  {
    "__docId__": 121,
    "kind": "function",
    "name": "getVideoEngine",
    "memberof": "js/engine/engine-loader.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/engine/engine-loader.js~getVideoEngine",
    "access": "private",
    "export": true,
    "importPath": "videojs-record/js/engine/engine-loader.js",
    "importStyle": "{getVideoEngine}",
    "description": "Get video plugin engine class.",
    "lineNumber": 72,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object} Video engine class."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "videoEngine",
        "description": "Name of the video engine."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "Video engine class."
    }
  },
  {
    "__docId__": 122,
    "kind": "function",
    "name": "getConvertEngine",
    "memberof": "js/engine/engine-loader.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/engine/engine-loader.js~getConvertEngine",
    "access": "private",
    "export": true,
    "importPath": "videojs-record/js/engine/engine-loader.js",
    "importStyle": "{getConvertEngine}",
    "description": "Get converter plugin engine class.",
    "lineNumber": 110,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object} Convert engine class."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "convertEngine",
        "description": "Name of the convert engine."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "Convert engine class."
    }
  },
  {
    "__docId__": 123,
    "kind": "file",
    "name": "js/engine/record-engine.js",
    "content": "/**\r\n * @file record-engine.js\r\n * @since 2.0.0\r\n */\r\n\r\nimport videojs from 'video.js';\r\n\r\nimport Event from '../event';\r\nimport {downloadBlob, addFileInfo} from '../utils/file-util';\r\n\r\nconst Component = videojs.getComponent('Component');\r\n\r\n// supported recorder plugin engines\r\n// builtin\r\nconst RECORDRTC = 'recordrtc';\r\n\r\n// audio\r\nconst LIBVORBISJS = 'libvorbis.js';\r\nconst RECORDERJS = 'recorder.js';\r\nconst LAMEJS = 'lamejs';\r\nconst OPUSRECORDER = 'opus-recorder';\r\nconst OPUSMEDIARECORDER = 'opus-media-recorder';\r\nconst VMSG = 'vmsg';\r\n\r\n// video\r\nconst WEBMWASM = 'webm-wasm';\r\n\r\n// all audio plugins\r\nconst AUDIO_PLUGINS = [\r\n    LIBVORBISJS, RECORDERJS, LAMEJS, OPUSRECORDER, OPUSMEDIARECORDER, VMSG\r\n];\r\n\r\n// all video plugins\r\nconst VIDEO_PLUGINS = [WEBMWASM];\r\n\r\n// all record plugins\r\nconst RECORD_PLUGINS = AUDIO_PLUGINS.concat(VIDEO_PLUGINS);\r\n\r\n\r\n/**\r\n * Base class for recorder backends.\r\n * @class\r\n * @augments videojs.Component\r\n */\r\nclass RecordEngine extends Component {\r\n    /**\r\n     * Creates an instance of this class.\r\n     *\r\n     * @param  {Player} player\r\n     *         The `Player` that this class should be attached to.\r\n     *\r\n     * @param  {Object} [options]\r\n     *         The key/value store of player options.\r\n     */\r\n    constructor(player, options) {\r\n        // auto mixin the evented mixin (required since video.js v6.6.0)\r\n        options.evented = true;\r\n\r\n        super(player, options);\r\n    }\r\n\r\n    /**\r\n     * Remove any temporary data and references to streams.\r\n     * @private\r\n     */\r\n    dispose() {\r\n        // dispose previous recording\r\n        if (this.recordedData !== undefined) {\r\n            URL.revokeObjectURL(this.recordedData);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Destroy engine.\r\n     */\r\n    destroy() {}\r\n\r\n    /**\r\n     * Add filename and timestamp to recorded file object.\r\n     *\r\n     * @param {(Blob|File)} fileObj - Blob or File object to modify.\r\n     */\r\n    addFileInfo(fileObj) {\r\n        addFileInfo(fileObj);\r\n    }\r\n\r\n    /**\r\n     * Invoked when recording is stopped and resulting stream is available.\r\n     *\r\n     * @param {blob} data - Reference to the recorded `Blob`.\r\n     * @private\r\n     */\r\n    onStopRecording(data) {\r\n        this.recordedData = data;\r\n\r\n        // add filename and timestamp to recorded file object\r\n        this.addFileInfo(this.recordedData);\r\n\r\n        // remove reference to recorded stream\r\n        this.dispose();\r\n\r\n        // notify listeners\r\n        this.trigger(Event.RECORD_COMPLETE);\r\n    }\r\n\r\n    /**\r\n     * Show save as dialog in browser so the user can store the recorded\r\n     * media locally.\r\n     *\r\n     * @param {Object} name - Object with names for the particular blob(s)\r\n     *     you want to save. File extensions are added automatically. For\r\n     *     example: {'video': 'name-of-video-file'}. Supported keys are\r\n     *     'audio', 'video' and 'gif'.\r\n     * @example\r\n     * // save recorded video file as 'foo.webm'\r\n     * player.record().saveAs({'video': 'foo'});\r\n     * @returns {void}\r\n     */\r\n    saveAs(name) {\r\n        let fileName = name[Object.keys(name)[0]];\r\n\r\n        // download recorded file\r\n        downloadBlob(fileName, this.recordedData);\r\n    }\r\n}\r\n\r\n// expose component for external plugins\r\nvideojs.RecordEngine = RecordEngine;\r\nComponent.registerComponent('RecordEngine', RecordEngine);\r\n\r\nexport {\r\n    RecordEngine, RECORD_PLUGINS, AUDIO_PLUGINS, VIDEO_PLUGINS,\r\n    RECORDRTC, LIBVORBISJS, RECORDERJS, LAMEJS, OPUSRECORDER,\r\n    OPUSMEDIARECORDER, VMSG, WEBMWASM\r\n};\r\n",
    "static": true,
    "longname": "C:/Users/Thijs/projects/videojs-record/src/js/engine/record-engine.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 124,
    "kind": "variable",
    "name": "Component",
    "memberof": "js/engine/record-engine.js",
    "static": true,
    "longname": "js/engine/record-engine.js~Component",
    "access": "public",
    "export": false,
    "importPath": "videojs-record/js/engine/record-engine.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 125,
    "kind": "class",
    "name": "RecordEngine",
    "memberof": "js/engine/record-engine.js",
    "static": true,
    "longname": "js/engine/record-engine.js~RecordEngine",
    "access": "public",
    "export": true,
    "importPath": "videojs-record/js/engine/record-engine.js",
    "importStyle": "{RecordEngine}",
    "description": "Base class for recorder backends.",
    "lineNumber": 45,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": ""
      },
      {
        "tagName": "@augments",
        "tagValue": "videojs.Component"
      }
    ],
    "interface": false,
    "extends": [
      "Component"
    ]
  },
  {
    "__docId__": 126,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "js/engine/record-engine.js~RecordEngine",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/engine/record-engine.js~RecordEngine#constructor",
    "access": "public",
    "description": "Creates an instance of this class.",
    "lineNumber": 55,
    "params": [
      {
        "nullable": null,
        "types": [
          "Player"
        ],
        "spread": false,
        "optional": false,
        "name": "player",
        "description": "The `Player` that this class should be attached to."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "The key/value store of player options."
      }
    ]
  },
  {
    "__docId__": 127,
    "kind": "method",
    "name": "dispose",
    "memberof": "js/engine/record-engine.js~RecordEngine",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/engine/record-engine.js~RecordEngine#dispose",
    "access": "private",
    "description": "Remove any temporary data and references to streams.",
    "lineNumber": 66,
    "params": [],
    "return": null
  },
  {
    "__docId__": 128,
    "kind": "method",
    "name": "destroy",
    "memberof": "js/engine/record-engine.js~RecordEngine",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/engine/record-engine.js~RecordEngine#destroy",
    "access": "public",
    "description": "Destroy engine.",
    "lineNumber": 76,
    "params": [],
    "return": null
  },
  {
    "__docId__": 129,
    "kind": "method",
    "name": "addFileInfo",
    "memberof": "js/engine/record-engine.js~RecordEngine",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/engine/record-engine.js~RecordEngine#addFileInfo",
    "access": "public",
    "description": "Add filename and timestamp to recorded file object.",
    "lineNumber": 83,
    "params": [
      {
        "nullable": null,
        "types": [
          "Blob",
          "File"
        ],
        "spread": false,
        "optional": false,
        "name": "fileObj",
        "description": "Blob or File object to modify."
      }
    ],
    "return": null
  },
  {
    "__docId__": 130,
    "kind": "method",
    "name": "onStopRecording",
    "memberof": "js/engine/record-engine.js~RecordEngine",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/engine/record-engine.js~RecordEngine#onStopRecording",
    "access": "private",
    "description": "Invoked when recording is stopped and resulting stream is available.",
    "lineNumber": 93,
    "params": [
      {
        "nullable": null,
        "types": [
          "blob"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "Reference to the recorded `Blob`."
      }
    ],
    "return": null
  },
  {
    "__docId__": 131,
    "kind": "member",
    "name": "recordedData",
    "memberof": "js/engine/record-engine.js~RecordEngine",
    "static": false,
    "longname": "js/engine/record-engine.js~RecordEngine#recordedData",
    "access": "public",
    "description": null,
    "lineNumber": 94,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 132,
    "kind": "method",
    "name": "saveAs",
    "memberof": "js/engine/record-engine.js~RecordEngine",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/engine/record-engine.js~RecordEngine#saveAs",
    "access": "public",
    "description": "Show save as dialog in browser so the user can store the recorded\nmedia locally.",
    "examples": [
      "// save recorded video file as 'foo.webm'\nplayer.record().saveAs({'video': 'foo'});"
    ],
    "lineNumber": 119,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "Object with names for the particular blob(s)\n    you want to save. File extensions are added automatically. For\n    example: {'video': 'name-of-video-file'}. Supported keys are\n    'audio', 'video' and 'gif'."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 133,
    "kind": "variable",
    "name": "RECORD_PLUGINS",
    "memberof": "js/engine/record-engine.js",
    "static": true,
    "longname": "js/engine/record-engine.js~RECORD_PLUGINS",
    "access": "public",
    "export": true,
    "importPath": "videojs-record/js/engine/record-engine.js",
    "importStyle": "{RECORD_PLUGINS}",
    "description": null,
    "lineNumber": 37,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 134,
    "kind": "variable",
    "name": "AUDIO_PLUGINS",
    "memberof": "js/engine/record-engine.js",
    "static": true,
    "longname": "js/engine/record-engine.js~AUDIO_PLUGINS",
    "access": "public",
    "export": true,
    "importPath": "videojs-record/js/engine/record-engine.js",
    "importStyle": "{AUDIO_PLUGINS}",
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "type": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 135,
    "kind": "variable",
    "name": "VIDEO_PLUGINS",
    "memberof": "js/engine/record-engine.js",
    "static": true,
    "longname": "js/engine/record-engine.js~VIDEO_PLUGINS",
    "access": "public",
    "export": true,
    "importPath": "videojs-record/js/engine/record-engine.js",
    "importStyle": "{VIDEO_PLUGINS}",
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "type": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 136,
    "kind": "variable",
    "name": "RECORDRTC",
    "memberof": "js/engine/record-engine.js",
    "static": true,
    "longname": "js/engine/record-engine.js~RECORDRTC",
    "access": "public",
    "export": true,
    "importPath": "videojs-record/js/engine/record-engine.js",
    "importStyle": "{RECORDRTC}",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 137,
    "kind": "variable",
    "name": "LIBVORBISJS",
    "memberof": "js/engine/record-engine.js",
    "static": true,
    "longname": "js/engine/record-engine.js~LIBVORBISJS",
    "access": "public",
    "export": true,
    "importPath": "videojs-record/js/engine/record-engine.js",
    "importStyle": "{LIBVORBISJS}",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 138,
    "kind": "variable",
    "name": "RECORDERJS",
    "memberof": "js/engine/record-engine.js",
    "static": true,
    "longname": "js/engine/record-engine.js~RECORDERJS",
    "access": "public",
    "export": true,
    "importPath": "videojs-record/js/engine/record-engine.js",
    "importStyle": "{RECORDERJS}",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 139,
    "kind": "variable",
    "name": "LAMEJS",
    "memberof": "js/engine/record-engine.js",
    "static": true,
    "longname": "js/engine/record-engine.js~LAMEJS",
    "access": "public",
    "export": true,
    "importPath": "videojs-record/js/engine/record-engine.js",
    "importStyle": "{LAMEJS}",
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 140,
    "kind": "variable",
    "name": "OPUSRECORDER",
    "memberof": "js/engine/record-engine.js",
    "static": true,
    "longname": "js/engine/record-engine.js~OPUSRECORDER",
    "access": "public",
    "export": true,
    "importPath": "videojs-record/js/engine/record-engine.js",
    "importStyle": "{OPUSRECORDER}",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 141,
    "kind": "variable",
    "name": "OPUSMEDIARECORDER",
    "memberof": "js/engine/record-engine.js",
    "static": true,
    "longname": "js/engine/record-engine.js~OPUSMEDIARECORDER",
    "access": "public",
    "export": true,
    "importPath": "videojs-record/js/engine/record-engine.js",
    "importStyle": "{OPUSMEDIARECORDER}",
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 142,
    "kind": "variable",
    "name": "VMSG",
    "memberof": "js/engine/record-engine.js",
    "static": true,
    "longname": "js/engine/record-engine.js~VMSG",
    "access": "public",
    "export": true,
    "importPath": "videojs-record/js/engine/record-engine.js",
    "importStyle": "{VMSG}",
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 143,
    "kind": "variable",
    "name": "WEBMWASM",
    "memberof": "js/engine/record-engine.js",
    "static": true,
    "longname": "js/engine/record-engine.js~WEBMWASM",
    "access": "public",
    "export": true,
    "importPath": "videojs-record/js/engine/record-engine.js",
    "importStyle": "{WEBMWASM}",
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 144,
    "kind": "file",
    "name": "js/engine/record-mode.js",
    "content": "/**\r\n * @file record-mode.js\r\n * @since 2.0.0\r\n */\r\n\r\n// recorder modes\r\nconst IMAGE_ONLY = 'image_only';\r\nconst AUDIO_ONLY = 'audio_only';\r\nconst VIDEO_ONLY = 'video_only';\r\nconst AUDIO_VIDEO = 'audio_video';\r\nconst AUDIO_SCREEN = 'audio_screen';\r\nconst ANIMATION = 'animation';\r\nconst SCREEN_ONLY = 'screen_only';\r\n\r\n\r\nconst getRecorderMode = function(image, audio, video, animation, screen) {\r\n    if (isModeEnabled(image)) {\r\n        return IMAGE_ONLY;\r\n\r\n    } else if (isModeEnabled(animation)) {\r\n        return ANIMATION;\r\n\r\n    } else if (isModeEnabled(audio) && isModeEnabled(video)) {\r\n        return AUDIO_VIDEO;\r\n\r\n    } else if (isModeEnabled(audio) && isModeEnabled(screen)) {\r\n        return AUDIO_SCREEN;\r\n\r\n    } else if (!isModeEnabled(audio) && isModeEnabled(screen)) {\r\n        return SCREEN_ONLY;\r\n\r\n    } else if (isModeEnabled(audio) && !isModeEnabled(video)) {\r\n        return AUDIO_ONLY;\r\n\r\n    } else if (!isModeEnabled(audio) && isModeEnabled(video)) {\r\n        return VIDEO_ONLY;\r\n    }\r\n};\r\n\r\n/**\r\n * Check whether mode is enabled or not.\r\n *\r\n * @param {(Object|Boolean)} mode - Mode.\r\n * @returns {Boolean} Return boolean indicating whether mode is enabled or not.\r\n * @private\r\n */\r\nconst isModeEnabled = function(mode) {\r\n    return mode === Object(mode) || mode === true;\r\n};\r\n\r\nexport {\r\n    getRecorderMode,\r\n    IMAGE_ONLY, AUDIO_ONLY, VIDEO_ONLY, AUDIO_VIDEO, ANIMATION, SCREEN_ONLY, AUDIO_SCREEN\r\n};\r\n",
    "static": true,
    "longname": "C:/Users/Thijs/projects/videojs-record/src/js/engine/record-mode.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 145,
    "kind": "function",
    "name": "isModeEnabled",
    "memberof": "js/engine/record-mode.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/engine/record-mode.js~isModeEnabled",
    "access": "private",
    "export": false,
    "importPath": "videojs-record/js/engine/record-mode.js",
    "importStyle": null,
    "description": "Check whether mode is enabled or not.",
    "lineNumber": 47,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Boolean} Return boolean indicating whether mode is enabled or not."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object",
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "mode",
        "description": "Mode."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "Return boolean indicating whether mode is enabled or not."
    },
    "ignore": true
  },
  {
    "__docId__": 146,
    "kind": "function",
    "name": "getRecorderMode",
    "memberof": "js/engine/record-mode.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/engine/record-mode.js~getRecorderMode",
    "access": "public",
    "export": true,
    "importPath": "videojs-record/js/engine/record-mode.js",
    "importStyle": "{getRecorderMode}",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "params": [
      {
        "name": "image",
        "types": [
          "*"
        ]
      },
      {
        "name": "audio",
        "types": [
          "*"
        ]
      },
      {
        "name": "video",
        "types": [
          "*"
        ]
      },
      {
        "name": "animation",
        "types": [
          "*"
        ]
      },
      {
        "name": "screen",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 147,
    "kind": "variable",
    "name": "IMAGE_ONLY",
    "memberof": "js/engine/record-mode.js",
    "static": true,
    "longname": "js/engine/record-mode.js~IMAGE_ONLY",
    "access": "public",
    "export": true,
    "importPath": "videojs-record/js/engine/record-mode.js",
    "importStyle": "{IMAGE_ONLY}",
    "description": "",
    "lineNumber": 7,
    "since": "2.0.0",
    "unknown": [
      {
        "tagName": "@file",
        "tagValue": "record-mode.js"
      }
    ],
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 148,
    "kind": "variable",
    "name": "AUDIO_ONLY",
    "memberof": "js/engine/record-mode.js",
    "static": true,
    "longname": "js/engine/record-mode.js~AUDIO_ONLY",
    "access": "public",
    "export": true,
    "importPath": "videojs-record/js/engine/record-mode.js",
    "importStyle": "{AUDIO_ONLY}",
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 149,
    "kind": "variable",
    "name": "VIDEO_ONLY",
    "memberof": "js/engine/record-mode.js",
    "static": true,
    "longname": "js/engine/record-mode.js~VIDEO_ONLY",
    "access": "public",
    "export": true,
    "importPath": "videojs-record/js/engine/record-mode.js",
    "importStyle": "{VIDEO_ONLY}",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 150,
    "kind": "variable",
    "name": "AUDIO_VIDEO",
    "memberof": "js/engine/record-mode.js",
    "static": true,
    "longname": "js/engine/record-mode.js~AUDIO_VIDEO",
    "access": "public",
    "export": true,
    "importPath": "videojs-record/js/engine/record-mode.js",
    "importStyle": "{AUDIO_VIDEO}",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 151,
    "kind": "variable",
    "name": "ANIMATION",
    "memberof": "js/engine/record-mode.js",
    "static": true,
    "longname": "js/engine/record-mode.js~ANIMATION",
    "access": "public",
    "export": true,
    "importPath": "videojs-record/js/engine/record-mode.js",
    "importStyle": "{ANIMATION}",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 152,
    "kind": "variable",
    "name": "SCREEN_ONLY",
    "memberof": "js/engine/record-mode.js",
    "static": true,
    "longname": "js/engine/record-mode.js~SCREEN_ONLY",
    "access": "public",
    "export": true,
    "importPath": "videojs-record/js/engine/record-mode.js",
    "importStyle": "{SCREEN_ONLY}",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 153,
    "kind": "variable",
    "name": "AUDIO_SCREEN",
    "memberof": "js/engine/record-mode.js",
    "static": true,
    "longname": "js/engine/record-mode.js~AUDIO_SCREEN",
    "access": "public",
    "export": true,
    "importPath": "videojs-record/js/engine/record-mode.js",
    "importStyle": "{AUDIO_SCREEN}",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 154,
    "kind": "file",
    "name": "js/engine/record-rtc.js",
    "content": "/**\r\n * @file record-rtc.js\r\n * @since 2.0.0\r\n */\r\n\r\nimport videojs from 'video.js';\r\n\r\nimport RecordRTC from 'recordrtc';\r\n\r\nimport Event from '../event';\r\nimport {RecordEngine} from './record-engine';\r\nimport {isChrome} from '../utils/detect-browser';\r\nimport {IMAGE_ONLY, AUDIO_ONLY, VIDEO_ONLY, AUDIO_VIDEO, ANIMATION, SCREEN_ONLY, AUDIO_SCREEN} from './record-mode';\r\n\r\nconst Component = videojs.getComponent('Component');\r\n\r\n/**\r\n * Engine used with the MRecordRTC class in the RecordRTC library.\r\n *\r\n * @class\r\n * @augments videojs.RecordEngine\r\n */\r\nclass RecordRTCEngine extends RecordEngine {\r\n\r\n    /**\r\n     * Setup recording engine.\r\n     *\r\n     * @param {LocalMediaStream} stream - Media stream to record.\r\n     * @param {Object} mediaType - Object describing the media type of this\r\n     *     engine.\r\n     * @param {Boolean} debug - Indicating whether or not debug messages should\r\n     *     be printed in the console.\r\n     */\r\n    setup(stream, mediaType, debug) {\r\n        this.inputStream = stream;\r\n        this.mediaType = mediaType;\r\n        this.debug = debug;\r\n\r\n        if ('screen' in this.mediaType) {\r\n            this.mediaType.video = true;\r\n        }\r\n\r\n        // recorder type\r\n        if (this.recorderType !== undefined) {\r\n            this.mediaType.video = this.recorderType;\r\n        }\r\n\r\n        // setup RecordRTC\r\n        this.engine = new RecordRTC.MRecordRTC();\r\n        this.engine.mediaType = this.mediaType;\r\n        this.engine.disableLogs = !this.debug;\r\n        this.engine.mimeType = this.mimeType;\r\n\r\n        // audio settings\r\n        this.engine.bufferSize = this.bufferSize;\r\n        this.engine.sampleRate = this.sampleRate;\r\n        this.engine.numberOfAudioChannels = this.audioChannels;\r\n\r\n        // video/canvas settings\r\n        this.engine.video = this.video;\r\n        this.engine.canvas = this.canvas;\r\n        this.engine.bitrate = this.bitRate;\r\n\r\n        // animated gif settings\r\n        this.engine.quality = this.quality;\r\n        this.engine.frameRate = this.frameRate;\r\n\r\n        // timeSlice option\r\n        if (this.timeSlice !== undefined) {\r\n            this.engine.timeSlice = this.timeSlice;\r\n            this.engine.onTimeStamp = this.onTimeStamp.bind(this);\r\n        }\r\n\r\n        // worker\r\n        this.engine.workerPath = this.workerPath;\r\n        this.engine.webAssemblyPath = this.videoWebAssemblyURL;\r\n\r\n        // connect stream to recording engine\r\n        this.engine.addStream(this.inputStream);\r\n    }\r\n\r\n    /**\r\n     * Remove any temporary data and references to streams.\r\n     */\r\n    dispose() {\r\n        super.dispose();\r\n\r\n        this.destroy();\r\n    }\r\n\r\n    /**\r\n     * Destroy engine.\r\n     */\r\n    destroy() {\r\n        if (this.engine && typeof this.engine.destroy === 'function') {\r\n            this.engine.destroy();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Start recording.\r\n     */\r\n    start() {\r\n        this.engine.startRecording();\r\n    }\r\n\r\n    /**\r\n     * Stop recording. Result will be available async when onStopRecording\r\n     * is called.\r\n     */\r\n    stop() {\r\n        this.engine.stopRecording(this.onStopRecording.bind(this));\r\n    }\r\n\r\n    /**\r\n     * Pause recording.\r\n     */\r\n    pause() {\r\n        this.engine.pauseRecording();\r\n    }\r\n\r\n    /**\r\n     * Resume recording.\r\n     */\r\n    resume() {\r\n        this.engine.resumeRecording();\r\n    }\r\n\r\n    /**\r\n     * Show save as dialog in browser so the user can store the recorded media\r\n     * locally.\r\n     *\r\n     * @param {object} name - Object with names for the particular blob(s)\r\n     *     you want to save. File extensions are added automatically. For\r\n     *     example: {'video': 'name-of-video-file'}. Supported keys are\r\n     *     'audio', 'video' and 'gif'.\r\n     * @example\r\n     * // save video file as 'foo.webm'\r\n     * player.record().saveAs({'video': 'foo'});\r\n     */\r\n    saveAs(name) {\r\n        if (this.engine && name !== undefined) {\r\n            this.engine.save(name);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Invoked when recording is stopped and resulting stream is available.\r\n     *\r\n     * @private\r\n     * @param {string} audioVideoURL - URI of the recorded Blob\r\n     *     object, e.g. 'blob:http://localhost:8080/10100016-4248-9949-b0d6-0bb40db56eba'\r\n     * @param {string} type - Media type, eg. 'video' or 'audio'.\r\n     */\r\n    onStopRecording(audioVideoURL, type) {\r\n        // garbage collect unused blob\r\n        URL.revokeObjectURL(audioVideoURL);\r\n\r\n        // store reference to recorded stream data\r\n        let recordType = this.player().record().getRecordType();\r\n        this.engine.getBlob((recording) => {\r\n            switch (recordType) {\r\n                case AUDIO_ONLY:\r\n                    if (recording.audio !== undefined) {\r\n                        this.recordedData = recording.audio;\r\n                    }\r\n                    break;\r\n\r\n                case VIDEO_ONLY:\r\n                case AUDIO_VIDEO:\r\n                case AUDIO_SCREEN:\r\n                case SCREEN_ONLY:\r\n                    // recordrtc returns a single blob that includes both audio\r\n                    // and video data\r\n                    if (recording.video !== undefined) {\r\n                        this.recordedData = recording.video;\r\n                    }\r\n                    break;\r\n\r\n                case ANIMATION:\r\n                    if (recording.gif !== undefined) {\r\n                        this.recordedData = recording.gif;\r\n                    }\r\n                    break;\r\n            }\r\n            // inject file info\r\n            this.addFileInfo(this.recordedData);\r\n\r\n            // notify listeners\r\n            this.trigger(Event.RECORD_COMPLETE);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Received new timestamp (when timeSlice option is enabled).\r\n     * @private\r\n     * @param {float} current - Current timestamp.\r\n     * @param {array} all - List of timestamps so far.\r\n     */\r\n    onTimeStamp(current, all) {\r\n        this.player().currentTimestamp = current;\r\n        this.player().allTimestamps = all;\r\n\r\n        // get blob (only for MediaStreamRecorder)\r\n        let internal;\r\n        switch (this.player().record().getRecordType()) {\r\n            case AUDIO_ONLY:\r\n                internal = this.engine.audioRecorder;\r\n                break;\r\n\r\n            case ANIMATION:\r\n                internal = this.engine.gifRecorder;\r\n                break;\r\n\r\n            default:\r\n                internal = this.engine.videoRecorder;\r\n        }\r\n\r\n        let maxFileSizeReached = false;\r\n        if (internal) {\r\n            internal = internal.getInternalRecorder();\r\n        }\r\n\r\n        if ((internal instanceof RecordRTC.MediaStreamRecorder) === true) {\r\n            this.player().recordedData = internal.getArrayOfBlobs();\r\n\r\n            // inject file info for newest blob\r\n            this.addFileInfo(\r\n                this.player().recordedData[this.player_.recordedData.length - 1]);\r\n\r\n            // check max file size\r\n            if (this.maxFileSize > 0) {\r\n                let currentSize = new Blob(this.player().recordedData).size;\r\n                if (currentSize >= this.maxFileSize) {\r\n                    maxFileSizeReached = true;\r\n                }\r\n            }\r\n        }\r\n\r\n        // notify others\r\n        this.player().trigger(Event.TIMESTAMP);\r\n\r\n        // automatically stop when max file size was reached\r\n        if (maxFileSizeReached) {\r\n            this.player().record().stop();\r\n        }\r\n    }\r\n}\r\n\r\n// expose plugin\r\nvideojs.RecordRTCEngine = RecordRTCEngine;\r\n\r\nComponent.registerComponent('RecordRTCEngine', RecordRTCEngine);\r\n\r\nexport default RecordRTCEngine;\r\n",
    "static": true,
    "longname": "C:/Users/Thijs/projects/videojs-record/src/js/engine/record-rtc.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 155,
    "kind": "variable",
    "name": "Component",
    "memberof": "js/engine/record-rtc.js",
    "static": true,
    "longname": "js/engine/record-rtc.js~Component",
    "access": "public",
    "export": false,
    "importPath": "videojs-record/js/engine/record-rtc.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 156,
    "kind": "class",
    "name": "RecordRTCEngine",
    "memberof": "js/engine/record-rtc.js",
    "static": true,
    "longname": "js/engine/record-rtc.js~RecordRTCEngine",
    "access": "public",
    "export": true,
    "importPath": "videojs-record/js/engine/record-rtc.js",
    "importStyle": "RecordRTCEngine",
    "description": "Engine used with the MRecordRTC class in the RecordRTC library.",
    "lineNumber": 23,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": ""
      },
      {
        "tagName": "@augments",
        "tagValue": "videojs.RecordEngine"
      }
    ],
    "interface": false,
    "extends": [
      "js/engine/record-engine.js~RecordEngine"
    ]
  },
  {
    "__docId__": 157,
    "kind": "method",
    "name": "setup",
    "memberof": "js/engine/record-rtc.js~RecordRTCEngine",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/engine/record-rtc.js~RecordRTCEngine#setup",
    "access": "public",
    "description": "Setup recording engine.",
    "lineNumber": 34,
    "params": [
      {
        "nullable": null,
        "types": [
          "LocalMediaStream"
        ],
        "spread": false,
        "optional": false,
        "name": "stream",
        "description": "Media stream to record."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "mediaType",
        "description": "Object describing the media type of this\n    engine."
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "debug",
        "description": "Indicating whether or not debug messages should\n    be printed in the console."
      }
    ],
    "return": null
  },
  {
    "__docId__": 158,
    "kind": "member",
    "name": "inputStream",
    "memberof": "js/engine/record-rtc.js~RecordRTCEngine",
    "static": false,
    "longname": "js/engine/record-rtc.js~RecordRTCEngine#inputStream",
    "access": "public",
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 159,
    "kind": "member",
    "name": "mediaType",
    "memberof": "js/engine/record-rtc.js~RecordRTCEngine",
    "static": false,
    "longname": "js/engine/record-rtc.js~RecordRTCEngine#mediaType",
    "access": "public",
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 160,
    "kind": "member",
    "name": "debug",
    "memberof": "js/engine/record-rtc.js~RecordRTCEngine",
    "static": false,
    "longname": "js/engine/record-rtc.js~RecordRTCEngine#debug",
    "access": "public",
    "description": null,
    "lineNumber": 37,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 161,
    "kind": "member",
    "name": "engine",
    "memberof": "js/engine/record-rtc.js~RecordRTCEngine",
    "static": false,
    "longname": "js/engine/record-rtc.js~RecordRTCEngine#engine",
    "access": "public",
    "description": null,
    "lineNumber": 49,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 162,
    "kind": "method",
    "name": "dispose",
    "memberof": "js/engine/record-rtc.js~RecordRTCEngine",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/engine/record-rtc.js~RecordRTCEngine#dispose",
    "access": "public",
    "description": "Remove any temporary data and references to streams.",
    "lineNumber": 85,
    "params": [],
    "return": null
  },
  {
    "__docId__": 163,
    "kind": "method",
    "name": "destroy",
    "memberof": "js/engine/record-rtc.js~RecordRTCEngine",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/engine/record-rtc.js~RecordRTCEngine#destroy",
    "access": "public",
    "description": "Destroy engine.",
    "lineNumber": 94,
    "params": [],
    "return": null
  },
  {
    "__docId__": 164,
    "kind": "method",
    "name": "start",
    "memberof": "js/engine/record-rtc.js~RecordRTCEngine",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/engine/record-rtc.js~RecordRTCEngine#start",
    "access": "public",
    "description": "Start recording.",
    "lineNumber": 103,
    "params": [],
    "return": null
  },
  {
    "__docId__": 165,
    "kind": "method",
    "name": "stop",
    "memberof": "js/engine/record-rtc.js~RecordRTCEngine",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/engine/record-rtc.js~RecordRTCEngine#stop",
    "access": "public",
    "description": "Stop recording. Result will be available async when onStopRecording\nis called.",
    "lineNumber": 111,
    "params": [],
    "return": null
  },
  {
    "__docId__": 166,
    "kind": "method",
    "name": "pause",
    "memberof": "js/engine/record-rtc.js~RecordRTCEngine",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/engine/record-rtc.js~RecordRTCEngine#pause",
    "access": "public",
    "description": "Pause recording.",
    "lineNumber": 118,
    "params": [],
    "return": null
  },
  {
    "__docId__": 167,
    "kind": "method",
    "name": "resume",
    "memberof": "js/engine/record-rtc.js~RecordRTCEngine",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/engine/record-rtc.js~RecordRTCEngine#resume",
    "access": "public",
    "description": "Resume recording.",
    "lineNumber": 125,
    "params": [],
    "return": null
  },
  {
    "__docId__": 168,
    "kind": "method",
    "name": "saveAs",
    "memberof": "js/engine/record-rtc.js~RecordRTCEngine",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/engine/record-rtc.js~RecordRTCEngine#saveAs",
    "access": "public",
    "description": "Show save as dialog in browser so the user can store the recorded media\nlocally.",
    "examples": [
      "// save video file as 'foo.webm'\nplayer.record().saveAs({'video': 'foo'});"
    ],
    "lineNumber": 141,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "Object with names for the particular blob(s)\n    you want to save. File extensions are added automatically. For\n    example: {'video': 'name-of-video-file'}. Supported keys are\n    'audio', 'video' and 'gif'."
      }
    ],
    "return": null
  },
  {
    "__docId__": 169,
    "kind": "method",
    "name": "onStopRecording",
    "memberof": "js/engine/record-rtc.js~RecordRTCEngine",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/engine/record-rtc.js~RecordRTCEngine#onStopRecording",
    "access": "private",
    "description": "Invoked when recording is stopped and resulting stream is available.",
    "lineNumber": 155,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "audioVideoURL",
        "description": "URI of the recorded Blob\n    object, e.g. 'blob:http://localhost:8080/10100016-4248-9949-b0d6-0bb40db56eba'"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "Media type, eg. 'video' or 'audio'."
      }
    ],
    "return": null
  },
  {
    "__docId__": 170,
    "kind": "member",
    "name": "recordedData",
    "memberof": "js/engine/record-rtc.js~RecordRTCEngine",
    "static": false,
    "longname": "js/engine/record-rtc.js~RecordRTCEngine#recordedData",
    "access": "public",
    "description": null,
    "lineNumber": 165,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 173,
    "kind": "method",
    "name": "onTimeStamp",
    "memberof": "js/engine/record-rtc.js~RecordRTCEngine",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/engine/record-rtc.js~RecordRTCEngine#onTimeStamp",
    "access": "private",
    "description": "Received new timestamp (when timeSlice option is enabled).",
    "lineNumber": 200,
    "params": [
      {
        "nullable": null,
        "types": [
          "float"
        ],
        "spread": false,
        "optional": false,
        "name": "current",
        "description": "Current timestamp."
      },
      {
        "nullable": null,
        "types": [
          "array"
        ],
        "spread": false,
        "optional": false,
        "name": "all",
        "description": "List of timestamps so far."
      }
    ],
    "return": null
  },
  {
    "__docId__": 174,
    "kind": "file",
    "name": "js/event.js",
    "content": "/**\r\n * @file event.js\r\n * @since 3.5.0\r\n */\r\n\r\nclass Event {}\r\n\r\n// video.js\r\nEvent.READY = 'ready';\r\nEvent.ERROR = 'error';\r\nEvent.PLAYING = 'playing';\r\nEvent.LOADEDMETADATA = 'loadedmetadata';\r\nEvent.LOADSTART = 'loadstart';\r\nEvent.USERINACTIVE = 'userinactive';\r\nEvent.TIMEUPDATE = 'timeupdate';\r\nEvent.DURATIONCHANGE = 'durationchange';\r\nEvent.ENDED = 'ended';\r\nEvent.PAUSE = 'pause';\r\nEvent.PLAY = 'play';\r\n\r\n// videojs-record\r\nEvent.DEVICE_READY = 'deviceReady';\r\nEvent.DEVICE_ERROR = 'deviceError';\r\nEvent.START_RECORD = 'startRecord';\r\nEvent.STOP_RECORD = 'stopRecord';\r\nEvent.FINISH_RECORD = 'finishRecord';\r\nEvent.RECORD_COMPLETE = 'recordComplete';\r\nEvent.PROGRESS_RECORD = 'progressRecord';\r\nEvent.TIMESTAMP = 'timestamp';\r\nEvent.ENUMERATE_READY = 'enumerateReady';\r\nEvent.ENUMERATE_ERROR = 'enumerateError';\r\nEvent.AUDIO_BUFFER_UPDATE = 'audioBufferUpdate';\r\nEvent.AUDIO_OUTPUT_READY = 'audioOutputReady';\r\nEvent.START_CONVERT = 'startConvert';\r\nEvent.FINISH_CONVERT = 'finishConvert';\r\nEvent.ENTER_PIP = 'enterPIP';\r\nEvent.LEAVE_PIP = 'leavePIP';\r\nEvent.RETRY = 'retry';\r\n\r\n// dom\r\nEvent.ENTERPICTUREINPICTURE = 'enterpictureinpicture';\r\nEvent.LEAVEPICTUREINPICTURE = 'leavepictureinpicture';\r\n\r\n// after the freeze, any attempts of altering the class will have no result\r\nObject.freeze(Event);\r\n\r\nexport default Event;\r\n",
    "static": true,
    "longname": "C:/Users/Thijs/projects/videojs-record/src/js/event.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 175,
    "kind": "class",
    "name": "Event",
    "memberof": "js/event.js",
    "static": true,
    "longname": "js/event.js~Event",
    "access": "public",
    "export": true,
    "importPath": "videojs-record/js/event.js",
    "importStyle": "Event",
    "description": "",
    "lineNumber": 6,
    "since": "3.5.0",
    "unknown": [
      {
        "tagName": "@file",
        "tagValue": "event.js"
      }
    ],
    "interface": false
  },
  {
    "__docId__": 176,
    "kind": "file",
    "name": "js/hot-keys.js",
    "content": "/**\r\n * @file hot-keys.js\r\n * @since 3.6.0\r\n */\r\n\r\nimport {IMAGE_ONLY} from './engine/record-mode';\r\n\r\n// check https://github.com/timoxley/keycode for codes\r\nconst X_KEY = 88;\r\nconst P_KEY = 80;\r\nconst C_KEY = 67;\r\n\r\n/**\r\n * Default keyhandler.\r\n *\r\n * @param {object} event - Event containing key info.\r\n * @returns {void}\r\n * @private\r\n */\r\nconst defaultKeyHandler = function(event) {\r\n    switch (event.which) {\r\n        // 'x' key\r\n        case X_KEY:\r\n            // toggle record\r\n            switch (this.player_.record().getRecordType()) {\r\n                case IMAGE_ONLY:\r\n                    this.player_.cameraButton.trigger('click');\r\n                    break;\r\n\r\n                default:\r\n                    this.player_.recordToggle.trigger('click');\r\n            }\r\n            break;\r\n\r\n        // 'p' key\r\n        case P_KEY:\r\n            // toggle picture-in-picture (if enabled)\r\n            if (this.player_.record().pictureInPicture === true) {\r\n                this.player_.pipToggle.trigger('click');\r\n            }\r\n            break;\r\n\r\n        // 'c' key\r\n        case C_KEY:\r\n            // toggle playback\r\n            if (this.player_.controlBar.playToggle &&\r\n                this.player_.controlBar.playToggle.contentEl()) {\r\n                player.controlBar.playToggle.trigger('click');\r\n            }\r\n            break;\r\n    }\r\n};\r\n\r\nexport default defaultKeyHandler;\r\n",
    "static": true,
    "longname": "C:/Users/Thijs/projects/videojs-record/src/js/hot-keys.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 177,
    "kind": "variable",
    "name": "X_KEY",
    "memberof": "js/hot-keys.js",
    "static": true,
    "longname": "js/hot-keys.js~X_KEY",
    "access": "public",
    "export": false,
    "importPath": "videojs-record/js/hot-keys.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 178,
    "kind": "variable",
    "name": "P_KEY",
    "memberof": "js/hot-keys.js",
    "static": true,
    "longname": "js/hot-keys.js~P_KEY",
    "access": "public",
    "export": false,
    "importPath": "videojs-record/js/hot-keys.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 179,
    "kind": "variable",
    "name": "C_KEY",
    "memberof": "js/hot-keys.js",
    "static": true,
    "longname": "js/hot-keys.js~C_KEY",
    "access": "public",
    "export": false,
    "importPath": "videojs-record/js/hot-keys.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 180,
    "kind": "function",
    "name": "defaultKeyHandler",
    "memberof": "js/hot-keys.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/hot-keys.js~defaultKeyHandler",
    "access": "private",
    "export": true,
    "importPath": "videojs-record/js/hot-keys.js",
    "importStyle": "defaultKeyHandler",
    "description": "Default keyhandler.",
    "lineNumber": 20,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": "Event containing key info."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 181,
    "kind": "file",
    "name": "js/plugins/ffmpeg-wasm-plugin.js",
    "content": "/* eslint no-console: [\"error\", { allow: [\"warn\", \"error\", \"log\"] }] */\r\n/**\r\n * @file ffmpeg-wasm-plugin.js\r\n * @since 4.2.0\r\n */\r\n\r\nimport videojs from 'video.js';\r\n\r\nconst ConvertEngine = videojs.getComponent('ConvertEngine');\r\n\r\n/**\r\n * Converter engine using the ffmpeg.wasm library.\r\n *\r\n * @class\r\n * @augments videojs.ConvertEngine\r\n */\r\nclass FFmpegWasmEngine extends ConvertEngine {\r\n    /**\r\n     * Creates an instance of this class.\r\n     *\r\n     * @param  {Player} player\r\n     *         The `Player` that this class should be attached to.\r\n     *\r\n     * @param  {Object} [options]\r\n     *         The key/value store of player options.\r\n     */\r\n    constructor(player, options) {\r\n        super(player, options);\r\n\r\n        /**\r\n         * Enables console logging for debugging purposes.\r\n         *\r\n         * @type {boolean}\r\n         */\r\n        this.debug = false;\r\n        /**\r\n         * Path to script `ffmpeg-core.js`.\r\n         *\r\n         * @type {string}\r\n         */\r\n        this.coreURL = '/node_modules/@ffmpeg/core-mt/dist/umd/ffmpeg-core.js';\r\n        /**\r\n         * Path to script `ffmpeg-core.worker.js`.\r\n         *\r\n         * @type {string}\r\n         */\r\n        this.convertWorkerURL = '/node_modules/@ffmpeg/core-mt/dist/umd/ffmpeg-core.worker.js';\r\n        /**\r\n         * Path to script `ffmpeg-core.wasm`.\r\n         *\r\n         * @type {string}\r\n         */\r\n        this.audioWebAssemblyURL = '/node_modules/@ffmpeg/core-mt/dist/umd/ffmpeg-core.wasm';\r\n        /**\r\n         * Mime-type for output.\r\n         *\r\n         * @type {string}\r\n         */\r\n        this.outputType = null;\r\n        /**\r\n         * Additional configuration options for the ffmpeg.wasm library.\r\n         *\r\n         * @type {object}\r\n         */\r\n        this.pluginLibraryOptions = {};\r\n\r\n        this.ffmpeg = null;\r\n    }\r\n\r\n    /**\r\n     * Inject metadata.\r\n     *\r\n     * @param {Blob} data - Recorded data that needs to be converted.\r\n     */\r\n    async convert(data) {\r\n        // set output mime type\r\n        if (this.pluginLibraryOptions.outputType === undefined) {\r\n            throw new Error('no outputType specified!');\r\n        }\r\n        this.outputType = this.pluginLibraryOptions.outputType;\r\n\r\n        // setup ffmpeg.wasm\r\n        const {fetchFile} = FFmpegUtil;\r\n        const {FFmpeg} = FFmpegWASM;\r\n        if (this.ffmpeg === null) {\r\n            this.ffmpeg = new FFmpeg();\r\n\r\n            if (this.debug) {\r\n                this.ffmpeg.on('log', ({message}) => {\r\n                    console.log(message);\r\n                });\r\n            }\r\n\r\n            await this.ffmpeg.load({\r\n                coreURL: this.coreURL,\r\n                wasmURL: this.audioWebAssemblyURL,\r\n                workerURL: this.convertWorkerURL,\r\n            });\r\n        }\r\n\r\n        // save timestamp\r\n        const timestamp = new Date();\r\n        timestamp.setTime(data.lastModified);\r\n\r\n        // use temporary filenames\r\n        const tempInputName = 'input_' + timestamp.getTime();\r\n        const tempOutputName = 'output_' + timestamp.getTime();\r\n\r\n        // add ffmpeg options\r\n        let opts = ['-i', tempInputName];\r\n        opts = opts.concat(this.convertOptions);\r\n        opts.push(tempOutputName);\r\n\r\n        // notify listeners\r\n        this.player().trigger('startConvert');\r\n\r\n        // load and convert blob\r\n        await this.ffmpeg.writeFile(tempInputName, await fetchFile(data));\r\n        console.log(opts);\r\n        await this.ffmpeg.exec(opts);\r\n        const output = await this.ffmpeg.readFile(tempOutputName);\r\n\r\n        // create new blob\r\n        let result = new Blob([output.buffer], {type: this.outputType});\r\n\r\n        // add existing file info\r\n        this.addFileInfo(result, timestamp);\r\n\r\n        // store result\r\n        this.player().convertedData = result;\r\n\r\n        // notify listeners\r\n        this.player().trigger('finishConvert');\r\n    }\r\n}\r\n\r\n// expose plugin\r\nvideojs.FFmpegWasmEngine = FFmpegWasmEngine;\r\n\r\nexport default FFmpegWasmEngine;\r\n",
    "static": true,
    "longname": "C:/Users/Thijs/projects/videojs-record/src/js/plugins/ffmpeg-wasm-plugin.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 182,
    "kind": "variable",
    "name": "ConvertEngine",
    "memberof": "js/plugins/ffmpeg-wasm-plugin.js",
    "static": true,
    "longname": "js/plugins/ffmpeg-wasm-plugin.js~ConvertEngine",
    "access": "public",
    "export": false,
    "importPath": "videojs-record/js/plugins/ffmpeg-wasm-plugin.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 183,
    "kind": "class",
    "name": "FFmpegWasmEngine",
    "memberof": "js/plugins/ffmpeg-wasm-plugin.js",
    "static": true,
    "longname": "js/plugins/ffmpeg-wasm-plugin.js~FFmpegWasmEngine",
    "access": "public",
    "export": true,
    "importPath": "videojs-record/js/plugins/ffmpeg-wasm-plugin.js",
    "importStyle": "FFmpegWasmEngine",
    "description": "Converter engine using the ffmpeg.wasm library.",
    "lineNumber": 17,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": ""
      },
      {
        "tagName": "@augments",
        "tagValue": "videojs.ConvertEngine"
      }
    ],
    "interface": false,
    "extends": [
      "ConvertEngine"
    ]
  },
  {
    "__docId__": 184,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "js/plugins/ffmpeg-wasm-plugin.js~FFmpegWasmEngine",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/plugins/ffmpeg-wasm-plugin.js~FFmpegWasmEngine#constructor",
    "access": "public",
    "description": "Creates an instance of this class.",
    "lineNumber": 27,
    "params": [
      {
        "nullable": null,
        "types": [
          "Player"
        ],
        "spread": false,
        "optional": false,
        "name": "player",
        "description": "The `Player` that this class should be attached to."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "The key/value store of player options."
      }
    ]
  },
  {
    "__docId__": 185,
    "kind": "member",
    "name": "debug",
    "memberof": "js/plugins/ffmpeg-wasm-plugin.js~FFmpegWasmEngine",
    "static": false,
    "longname": "js/plugins/ffmpeg-wasm-plugin.js~FFmpegWasmEngine#debug",
    "access": "public",
    "description": "Enables console logging for debugging purposes.",
    "lineNumber": 35,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 186,
    "kind": "member",
    "name": "coreURL",
    "memberof": "js/plugins/ffmpeg-wasm-plugin.js~FFmpegWasmEngine",
    "static": false,
    "longname": "js/plugins/ffmpeg-wasm-plugin.js~FFmpegWasmEngine#coreURL",
    "access": "public",
    "description": "Path to script `ffmpeg-core.js`.",
    "lineNumber": 41,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 187,
    "kind": "member",
    "name": "convertWorkerURL",
    "memberof": "js/plugins/ffmpeg-wasm-plugin.js~FFmpegWasmEngine",
    "static": false,
    "longname": "js/plugins/ffmpeg-wasm-plugin.js~FFmpegWasmEngine#convertWorkerURL",
    "access": "public",
    "description": "Path to script `ffmpeg-core.worker.js`.",
    "lineNumber": 47,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 188,
    "kind": "member",
    "name": "audioWebAssemblyURL",
    "memberof": "js/plugins/ffmpeg-wasm-plugin.js~FFmpegWasmEngine",
    "static": false,
    "longname": "js/plugins/ffmpeg-wasm-plugin.js~FFmpegWasmEngine#audioWebAssemblyURL",
    "access": "public",
    "description": "Path to script `ffmpeg-core.wasm`.",
    "lineNumber": 53,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 189,
    "kind": "member",
    "name": "outputType",
    "memberof": "js/plugins/ffmpeg-wasm-plugin.js~FFmpegWasmEngine",
    "static": false,
    "longname": "js/plugins/ffmpeg-wasm-plugin.js~FFmpegWasmEngine#outputType",
    "access": "public",
    "description": "Mime-type for output.",
    "lineNumber": 59,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 190,
    "kind": "member",
    "name": "pluginLibraryOptions",
    "memberof": "js/plugins/ffmpeg-wasm-plugin.js~FFmpegWasmEngine",
    "static": false,
    "longname": "js/plugins/ffmpeg-wasm-plugin.js~FFmpegWasmEngine#pluginLibraryOptions",
    "access": "public",
    "description": "Additional configuration options for the ffmpeg.wasm library.",
    "lineNumber": 65,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 191,
    "kind": "member",
    "name": "ffmpeg",
    "memberof": "js/plugins/ffmpeg-wasm-plugin.js~FFmpegWasmEngine",
    "static": false,
    "longname": "js/plugins/ffmpeg-wasm-plugin.js~FFmpegWasmEngine#ffmpeg",
    "access": "public",
    "description": null,
    "lineNumber": 67,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 192,
    "kind": "method",
    "name": "convert",
    "memberof": "js/plugins/ffmpeg-wasm-plugin.js~FFmpegWasmEngine",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "js/plugins/ffmpeg-wasm-plugin.js~FFmpegWasmEngine#convert",
    "access": "public",
    "description": "Inject metadata.",
    "lineNumber": 75,
    "params": [
      {
        "nullable": null,
        "types": [
          "Blob"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "Recorded data that needs to be converted."
      }
    ],
    "return": null
  },
  {
    "__docId__": 195,
    "kind": "file",
    "name": "js/plugins/ffmpegjs-plugin.js",
    "content": "/**\r\n * @file ffmpegjs-plugin.js\r\n * @since 3.8.0\r\n */\r\n\r\nimport videojs from 'video.js';\r\n\r\nconst ConvertEngine = videojs.getComponent('ConvertEngine');\r\n\r\n/**\r\n * Converter engine using the ffmpeg.js library.\r\n *\r\n * Deprecated. Use the ffmpeg.wasm plugin instead.\r\n *\r\n * @class\r\n * @augments videojs.ConvertEngine\r\n */\r\nclass FFmpegjsEngine extends ConvertEngine {\r\n    /**\r\n     * Creates an instance of this class.\r\n     *\r\n     * @param  {Player} player\r\n     *         The `Player` that this class should be attached to.\r\n     *\r\n     * @param  {Object} [options]\r\n     *         The key/value store of player options.\r\n     */\r\n    constructor(player, options) {\r\n        super(player, options);\r\n\r\n        /**\r\n         * Enables console logging for debugging purposes.\r\n         *\r\n         * @type {boolean}\r\n         */\r\n        this.debug = false;\r\n        /**\r\n         * Path to worker script `ffmpeg-worker-mp4.js` (H.264 & AAC & MP3 encoders)\r\n         * or `ffmpeg-worker-webm.js` (VP8 & Opus encoders).\r\n         *\r\n         * @type {string}\r\n         */\r\n        this.convertWorkerURL = 'ffmpeg-worker-mp4.js';\r\n        /**\r\n         * Mime-type for output.\r\n         *\r\n         * @type {string}\r\n         */\r\n        this.outputType = null;\r\n        /**\r\n         * Additional configuration options for the ffmpeg.js library.\r\n         *\r\n         * @type {object}\r\n         */\r\n        this.pluginLibraryOptions = {};\r\n    }\r\n\r\n    /**\r\n     * Setup recording engine.\r\n     *\r\n     * @param {Object} mediaType - Object describing the media type of this\r\n     *     engine.\r\n     * @param {Boolean} debug - Indicating whether or not debug messages should\r\n     *     be printed in the console.\r\n     */\r\n    setup(mediaType, debug) {\r\n        this.mediaType = mediaType;\r\n        this.debug = debug;\r\n        this.stdout = this.stderr = '';\r\n\r\n        // set output mime type\r\n        if (this.pluginLibraryOptions.outputType === undefined) {\r\n            throw new Error('no outputType specified!');\r\n        }\r\n        this.outputType = this.pluginLibraryOptions.outputType;\r\n\r\n        // setup worker\r\n        this.engine = new Worker(this.convertWorkerURL);\r\n        this.engine.onmessage = this.onWorkerMessage.bind(this);\r\n    }\r\n\r\n    /**\r\n     * Invoked when recording is stopped and resulting stream is available.\r\n     *\r\n     * @param {blob} data - Reference to the recorded `Blob` that needs to be\r\n     *     converted.\r\n     */\r\n    convert(data) {\r\n        // save timestamp\r\n        this.timestamp = new Date();\r\n        this.timestamp.setTime(data.lastModified);\r\n\r\n        // load and convert blob\r\n        this.loadBlob(data).then((buffer) => {\r\n            // specify input\r\n            let opts = ['-i', data.name];\r\n\r\n            // add ffmpeg options\r\n            opts = opts.concat(this.convertOptions);\r\n\r\n            // use a temporary name\r\n            opts.push('output_' + this.timestamp.getTime());\r\n\r\n            // start conversion\r\n            this.engine.postMessage({\r\n                type: 'run',\r\n                MEMFS: [{name: data.name, data: buffer}],\r\n                arguments: opts\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Received a message from the worker.\r\n     *\r\n     * @param {Object} event - Event containing converted data.\r\n     * @private\r\n     */\r\n    onWorkerMessage(event) {\r\n        let msg = event.data;\r\n        switch (msg.type) {\r\n            // worker loaded and ready to accept commands\r\n            case 'ready':\r\n                break;\r\n\r\n            // worker started job\r\n            case 'run':\r\n                // notify listeners\r\n                this.player().trigger('startConvert');\r\n                break;\r\n\r\n            // job finished with some result\r\n            case 'done':\r\n                // converted data\r\n                let buf;\r\n                try {\r\n                    buf = msg.data.MEMFS[0].data;\r\n                } catch (e) {\r\n                    this.player().trigger('error', this.stderr);\r\n                }\r\n\r\n                // store in blob\r\n                let result = new Blob(buf, {type: this.outputType});\r\n\r\n                // inject date and name into blob\r\n                this.addFileInfo(result, this.timestamp);\r\n\r\n                // store result\r\n                this.player().convertedData = result;\r\n\r\n                // notify listeners\r\n                this.player().trigger('finishConvert');\r\n                break;\r\n\r\n            // FFmpeg printed to stdout\r\n            case 'stdout':\r\n                this.stdout += msg.data + '\\n';\r\n                break;\r\n\r\n            // FFmpeg printed to stderr\r\n            case 'stderr':\r\n                this.stderr += msg.data + \"\\n\";\r\n                break;\r\n\r\n            // FFmpeg exited\r\n            case 'exit':\r\n                break;\r\n\r\n            // FFmpeg terminated abnormally (e.g. out of memory, wasm error)\r\n            case 'abort':\r\n            case 'error':\r\n                this.player().trigger('error', msg.data);\r\n                break;\r\n        }\r\n    }\r\n}\r\n\r\n// expose plugin\r\nvideojs.FFmpegjsEngine = FFmpegjsEngine;\r\n\r\nexport default FFmpegjsEngine;\r\n",
    "static": true,
    "longname": "C:/Users/Thijs/projects/videojs-record/src/js/plugins/ffmpegjs-plugin.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 196,
    "kind": "variable",
    "name": "ConvertEngine",
    "memberof": "js/plugins/ffmpegjs-plugin.js",
    "static": true,
    "longname": "js/plugins/ffmpegjs-plugin.js~ConvertEngine",
    "access": "public",
    "export": false,
    "importPath": "videojs-record/js/plugins/ffmpegjs-plugin.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 197,
    "kind": "class",
    "name": "FFmpegjsEngine",
    "memberof": "js/plugins/ffmpegjs-plugin.js",
    "static": true,
    "longname": "js/plugins/ffmpegjs-plugin.js~FFmpegjsEngine",
    "access": "public",
    "export": true,
    "importPath": "videojs-record/js/plugins/ffmpegjs-plugin.js",
    "importStyle": "FFmpegjsEngine",
    "description": "Converter engine using the ffmpeg.js library.\n\nDeprecated. Use the ffmpeg.wasm plugin instead.",
    "lineNumber": 18,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": ""
      },
      {
        "tagName": "@augments",
        "tagValue": "videojs.ConvertEngine"
      }
    ],
    "interface": false,
    "extends": [
      "ConvertEngine"
    ]
  },
  {
    "__docId__": 198,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "js/plugins/ffmpegjs-plugin.js~FFmpegjsEngine",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/plugins/ffmpegjs-plugin.js~FFmpegjsEngine#constructor",
    "access": "public",
    "description": "Creates an instance of this class.",
    "lineNumber": 28,
    "params": [
      {
        "nullable": null,
        "types": [
          "Player"
        ],
        "spread": false,
        "optional": false,
        "name": "player",
        "description": "The `Player` that this class should be attached to."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "The key/value store of player options."
      }
    ]
  },
  {
    "__docId__": 199,
    "kind": "member",
    "name": "debug",
    "memberof": "js/plugins/ffmpegjs-plugin.js~FFmpegjsEngine",
    "static": false,
    "longname": "js/plugins/ffmpegjs-plugin.js~FFmpegjsEngine#debug",
    "access": "public",
    "description": "Enables console logging for debugging purposes.",
    "lineNumber": 36,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 200,
    "kind": "member",
    "name": "convertWorkerURL",
    "memberof": "js/plugins/ffmpegjs-plugin.js~FFmpegjsEngine",
    "static": false,
    "longname": "js/plugins/ffmpegjs-plugin.js~FFmpegjsEngine#convertWorkerURL",
    "access": "public",
    "description": "Path to worker script `ffmpeg-worker-mp4.js` (H.264 & AAC & MP3 encoders)\nor `ffmpeg-worker-webm.js` (VP8 & Opus encoders).",
    "lineNumber": 43,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 201,
    "kind": "member",
    "name": "outputType",
    "memberof": "js/plugins/ffmpegjs-plugin.js~FFmpegjsEngine",
    "static": false,
    "longname": "js/plugins/ffmpegjs-plugin.js~FFmpegjsEngine#outputType",
    "access": "public",
    "description": "Mime-type for output.",
    "lineNumber": 49,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 202,
    "kind": "member",
    "name": "pluginLibraryOptions",
    "memberof": "js/plugins/ffmpegjs-plugin.js~FFmpegjsEngine",
    "static": false,
    "longname": "js/plugins/ffmpegjs-plugin.js~FFmpegjsEngine#pluginLibraryOptions",
    "access": "public",
    "description": "Additional configuration options for the ffmpeg.js library.",
    "lineNumber": 55,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 203,
    "kind": "method",
    "name": "setup",
    "memberof": "js/plugins/ffmpegjs-plugin.js~FFmpegjsEngine",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/plugins/ffmpegjs-plugin.js~FFmpegjsEngine#setup",
    "access": "public",
    "description": "Setup recording engine.",
    "lineNumber": 66,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "mediaType",
        "description": "Object describing the media type of this\n    engine."
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "debug",
        "description": "Indicating whether or not debug messages should\n    be printed in the console."
      }
    ],
    "return": null
  },
  {
    "__docId__": 204,
    "kind": "member",
    "name": "mediaType",
    "memberof": "js/plugins/ffmpegjs-plugin.js~FFmpegjsEngine",
    "static": false,
    "longname": "js/plugins/ffmpegjs-plugin.js~FFmpegjsEngine#mediaType",
    "access": "public",
    "description": null,
    "lineNumber": 67,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 206,
    "kind": "member",
    "name": "stdout",
    "memberof": "js/plugins/ffmpegjs-plugin.js~FFmpegjsEngine",
    "static": false,
    "longname": "js/plugins/ffmpegjs-plugin.js~FFmpegjsEngine#stdout",
    "access": "public",
    "description": null,
    "lineNumber": 69,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 208,
    "kind": "member",
    "name": "engine",
    "memberof": "js/plugins/ffmpegjs-plugin.js~FFmpegjsEngine",
    "static": false,
    "longname": "js/plugins/ffmpegjs-plugin.js~FFmpegjsEngine#engine",
    "access": "public",
    "description": null,
    "lineNumber": 78,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 209,
    "kind": "method",
    "name": "convert",
    "memberof": "js/plugins/ffmpegjs-plugin.js~FFmpegjsEngine",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/plugins/ffmpegjs-plugin.js~FFmpegjsEngine#convert",
    "access": "public",
    "description": "Invoked when recording is stopped and resulting stream is available.",
    "lineNumber": 88,
    "params": [
      {
        "nullable": null,
        "types": [
          "blob"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "Reference to the recorded `Blob` that needs to be\n    converted."
      }
    ],
    "return": null
  },
  {
    "__docId__": 210,
    "kind": "member",
    "name": "timestamp",
    "memberof": "js/plugins/ffmpegjs-plugin.js~FFmpegjsEngine",
    "static": false,
    "longname": "js/plugins/ffmpegjs-plugin.js~FFmpegjsEngine#timestamp",
    "access": "public",
    "description": null,
    "lineNumber": 90,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 211,
    "kind": "method",
    "name": "onWorkerMessage",
    "memberof": "js/plugins/ffmpegjs-plugin.js~FFmpegjsEngine",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/plugins/ffmpegjs-plugin.js~FFmpegjsEngine#onWorkerMessage",
    "access": "private",
    "description": "Received a message from the worker.",
    "lineNumber": 119,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": "Event containing converted data."
      }
    ],
    "return": null
  },
  {
    "__docId__": 213,
    "kind": "member",
    "name": "stderr",
    "memberof": "js/plugins/ffmpegjs-plugin.js~FFmpegjsEngine",
    "static": false,
    "longname": "js/plugins/ffmpegjs-plugin.js~FFmpegjsEngine#stderr",
    "access": "public",
    "description": null,
    "lineNumber": 162,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 214,
    "kind": "file",
    "name": "js/plugins/lamejs-plugin.js",
    "content": "/**\r\n * @file lamejs-plugin.js\r\n * @since 1.1.0\r\n */\r\n\r\nimport videojs from 'video.js';\r\n\r\nconst RecordEngine = videojs.getComponent('RecordEngine');\r\n\r\n/**\r\n * Audio-only engine for the lamejs library.\r\n *\r\n * @class\r\n * @augments RecordEngine\r\n */\r\nclass LamejsEngine extends RecordEngine {\r\n    /**\r\n     * Creates an instance of this class.\r\n     *\r\n     * @param  {Player} player\r\n     *         The `Player` that this class should be attached to.\r\n     *\r\n     * @param  {Object} [options]\r\n     *         The key/value store of player options.\r\n     */\r\n    constructor(player, options) {\r\n        super(player, options);\r\n\r\n        /**\r\n         * Enables console logging for debugging purposes.\r\n         *\r\n         * @type {boolean}\r\n         */\r\n        this.debug = false;\r\n        /**\r\n         * Specifies the sample rate to encode at.\r\n         *\r\n         * @type {number}\r\n         */\r\n        this.sampleRate = 44100;\r\n        /**\r\n         * Specifies the bitrate in kbps.\r\n         *\r\n         * @type {number}\r\n         */\r\n        this.bitRate = 128;\r\n        /**\r\n         * Path to `worker-realtime.js` worker script.\r\n         *\r\n         * @type {string}\r\n         */\r\n        this.audioWorkerURL = 'worker-realtime.js';\r\n        /**\r\n         * Mime-type for audio output.\r\n         *\r\n         * @type {string}\r\n         */\r\n        this.audioType = 'audio/mpeg';\r\n    }\r\n\r\n    /**\r\n     * Setup recording engine.\r\n     *\r\n     * @param {LocalMediaStream} stream - Media stream to record.\r\n     * @param {Object} mediaType - Object describing the media type of this\r\n     *     engine.\r\n     * @param {Boolean} debug - Indicating whether or not debug messages should\r\n     *     be printed in the console.\r\n     */\r\n    setup(stream, mediaType, debug) {\r\n        this.inputStream = stream;\r\n        this.mediaType = mediaType;\r\n        this.debug = debug;\r\n\r\n        this.config = {\r\n            debug: this.debug,\r\n            sampleRate: this.sampleRate,\r\n            bitRate: this.bitRate\r\n        };\r\n\r\n        this.engine = new Worker(this.audioWorkerURL);\r\n        this.engine.onmessage = this.onWorkerMessage.bind(this);\r\n        this.engine.postMessage({cmd: 'init', config: this.config});\r\n    }\r\n\r\n    /**\r\n     * Start recording.\r\n     */\r\n    start() {\r\n        let AudioContext = window.AudioContext || window.webkitAudioContext;\r\n        this.audioContext = new AudioContext();\r\n\r\n        this.audioSourceNode = this.audioContext.createMediaStreamSource(\r\n            this.inputStream);\r\n        // a bufferSize of 0 instructs the browser to choose the best bufferSize\r\n        this.processor = this.audioContext.createScriptProcessor(\r\n            0, 1, 1);\r\n        this.processor.onaudioprocess = this.onAudioProcess.bind(this);\r\n        this.audioSourceNode.connect(this.processor);\r\n        this.processor.connect(this.audioContext.destination);\r\n    }\r\n\r\n    /**\r\n     * Stop recording.\r\n     */\r\n    stop() {\r\n        if (this.processor && this.audioSourceNode) {\r\n            this.audioSourceNode.disconnect();\r\n            this.processor.disconnect();\r\n            this.processor.onaudioprocess = null;\r\n        }\r\n        if (this.audioContext) {\r\n            // ignore errors about already being closed\r\n            this.audioContext.close().then(() => {}).catch((reason) => {});\r\n        }\r\n\r\n        // free up memory\r\n        this.engine.postMessage({cmd: 'finish'});\r\n    }\r\n\r\n    /**\r\n     * Received a message from the worker.\r\n     *\r\n     * @private\r\n     * @param {Object} ev - Worker responded with event object.\r\n     */\r\n    onWorkerMessage(ev) {\r\n        switch (ev.data.cmd) {\r\n            case 'end':\r\n                this.onStopRecording(new Blob(ev.data.buf,\r\n                    {type: this.audioType}));\r\n                break;\r\n\r\n            case 'error':\r\n                this.player().trigger('error', ev.data.error);\r\n                break;\r\n\r\n            default:\r\n                // invalid message received\r\n                this.player().trigger('error', ev.data);\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Continuous encoding of audio data.\r\n     *\r\n     * @private\r\n     * @param {Object} ev - onaudioprocess responded with data object.\r\n     */\r\n    onAudioProcess(ev) {\r\n        // send microphone data to LAME for MP3 encoding while recording\r\n        let data = ev.inputBuffer.getChannelData(0);\r\n\r\n        this.engine.postMessage({cmd: 'encode', buf: data});\r\n    }\r\n}\r\n\r\n// expose plugin\r\nvideojs.LamejsEngine = LamejsEngine;\r\n\r\nexport default LamejsEngine;\r\n",
    "static": true,
    "longname": "C:/Users/Thijs/projects/videojs-record/src/js/plugins/lamejs-plugin.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 215,
    "kind": "variable",
    "name": "RecordEngine",
    "memberof": "js/plugins/lamejs-plugin.js",
    "static": true,
    "longname": "js/plugins/lamejs-plugin.js~RecordEngine",
    "access": "public",
    "export": false,
    "importPath": "videojs-record/js/plugins/lamejs-plugin.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 216,
    "kind": "class",
    "name": "LamejsEngine",
    "memberof": "js/plugins/lamejs-plugin.js",
    "static": true,
    "longname": "js/plugins/lamejs-plugin.js~LamejsEngine",
    "access": "public",
    "export": true,
    "importPath": "videojs-record/js/plugins/lamejs-plugin.js",
    "importStyle": "LamejsEngine",
    "description": "Audio-only engine for the lamejs library.",
    "lineNumber": 16,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": ""
      },
      {
        "tagName": "@augments",
        "tagValue": "RecordEngine"
      }
    ],
    "interface": false,
    "extends": [
      "RecordEngine"
    ]
  },
  {
    "__docId__": 217,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "js/plugins/lamejs-plugin.js~LamejsEngine",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/plugins/lamejs-plugin.js~LamejsEngine#constructor",
    "access": "public",
    "description": "Creates an instance of this class.",
    "lineNumber": 26,
    "params": [
      {
        "nullable": null,
        "types": [
          "Player"
        ],
        "spread": false,
        "optional": false,
        "name": "player",
        "description": "The `Player` that this class should be attached to."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "The key/value store of player options."
      }
    ]
  },
  {
    "__docId__": 218,
    "kind": "member",
    "name": "debug",
    "memberof": "js/plugins/lamejs-plugin.js~LamejsEngine",
    "static": false,
    "longname": "js/plugins/lamejs-plugin.js~LamejsEngine#debug",
    "access": "public",
    "description": "Enables console logging for debugging purposes.",
    "lineNumber": 34,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 219,
    "kind": "member",
    "name": "sampleRate",
    "memberof": "js/plugins/lamejs-plugin.js~LamejsEngine",
    "static": false,
    "longname": "js/plugins/lamejs-plugin.js~LamejsEngine#sampleRate",
    "access": "public",
    "description": "Specifies the sample rate to encode at.",
    "lineNumber": 40,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 220,
    "kind": "member",
    "name": "bitRate",
    "memberof": "js/plugins/lamejs-plugin.js~LamejsEngine",
    "static": false,
    "longname": "js/plugins/lamejs-plugin.js~LamejsEngine#bitRate",
    "access": "public",
    "description": "Specifies the bitrate in kbps.",
    "lineNumber": 46,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 221,
    "kind": "member",
    "name": "audioWorkerURL",
    "memberof": "js/plugins/lamejs-plugin.js~LamejsEngine",
    "static": false,
    "longname": "js/plugins/lamejs-plugin.js~LamejsEngine#audioWorkerURL",
    "access": "public",
    "description": "Path to `worker-realtime.js` worker script.",
    "lineNumber": 52,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 222,
    "kind": "member",
    "name": "audioType",
    "memberof": "js/plugins/lamejs-plugin.js~LamejsEngine",
    "static": false,
    "longname": "js/plugins/lamejs-plugin.js~LamejsEngine#audioType",
    "access": "public",
    "description": "Mime-type for audio output.",
    "lineNumber": 58,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 223,
    "kind": "method",
    "name": "setup",
    "memberof": "js/plugins/lamejs-plugin.js~LamejsEngine",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/plugins/lamejs-plugin.js~LamejsEngine#setup",
    "access": "public",
    "description": "Setup recording engine.",
    "lineNumber": 70,
    "params": [
      {
        "nullable": null,
        "types": [
          "LocalMediaStream"
        ],
        "spread": false,
        "optional": false,
        "name": "stream",
        "description": "Media stream to record."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "mediaType",
        "description": "Object describing the media type of this\n    engine."
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "debug",
        "description": "Indicating whether or not debug messages should\n    be printed in the console."
      }
    ],
    "return": null
  },
  {
    "__docId__": 224,
    "kind": "member",
    "name": "inputStream",
    "memberof": "js/plugins/lamejs-plugin.js~LamejsEngine",
    "static": false,
    "longname": "js/plugins/lamejs-plugin.js~LamejsEngine#inputStream",
    "access": "public",
    "description": null,
    "lineNumber": 71,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 225,
    "kind": "member",
    "name": "mediaType",
    "memberof": "js/plugins/lamejs-plugin.js~LamejsEngine",
    "static": false,
    "longname": "js/plugins/lamejs-plugin.js~LamejsEngine#mediaType",
    "access": "public",
    "description": null,
    "lineNumber": 72,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 227,
    "kind": "member",
    "name": "config",
    "memberof": "js/plugins/lamejs-plugin.js~LamejsEngine",
    "static": false,
    "longname": "js/plugins/lamejs-plugin.js~LamejsEngine#config",
    "access": "public",
    "description": null,
    "lineNumber": 75,
    "undocument": true,
    "type": {
      "types": [
        "{\"debug\": *, \"sampleRate\": *, \"bitRate\": *}"
      ]
    }
  },
  {
    "__docId__": 228,
    "kind": "member",
    "name": "engine",
    "memberof": "js/plugins/lamejs-plugin.js~LamejsEngine",
    "static": false,
    "longname": "js/plugins/lamejs-plugin.js~LamejsEngine#engine",
    "access": "public",
    "description": null,
    "lineNumber": 81,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 229,
    "kind": "method",
    "name": "start",
    "memberof": "js/plugins/lamejs-plugin.js~LamejsEngine",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/plugins/lamejs-plugin.js~LamejsEngine#start",
    "access": "public",
    "description": "Start recording.",
    "lineNumber": 89,
    "params": [],
    "return": null
  },
  {
    "__docId__": 230,
    "kind": "member",
    "name": "audioContext",
    "memberof": "js/plugins/lamejs-plugin.js~LamejsEngine",
    "static": false,
    "longname": "js/plugins/lamejs-plugin.js~LamejsEngine#audioContext",
    "access": "public",
    "description": null,
    "lineNumber": 91,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 231,
    "kind": "member",
    "name": "audioSourceNode",
    "memberof": "js/plugins/lamejs-plugin.js~LamejsEngine",
    "static": false,
    "longname": "js/plugins/lamejs-plugin.js~LamejsEngine#audioSourceNode",
    "access": "public",
    "description": null,
    "lineNumber": 93,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 232,
    "kind": "member",
    "name": "processor",
    "memberof": "js/plugins/lamejs-plugin.js~LamejsEngine",
    "static": false,
    "longname": "js/plugins/lamejs-plugin.js~LamejsEngine#processor",
    "access": "public",
    "description": null,
    "lineNumber": 96,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 233,
    "kind": "method",
    "name": "stop",
    "memberof": "js/plugins/lamejs-plugin.js~LamejsEngine",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/plugins/lamejs-plugin.js~LamejsEngine#stop",
    "access": "public",
    "description": "Stop recording.",
    "lineNumber": 106,
    "params": [],
    "return": null
  },
  {
    "__docId__": 234,
    "kind": "method",
    "name": "onWorkerMessage",
    "memberof": "js/plugins/lamejs-plugin.js~LamejsEngine",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/plugins/lamejs-plugin.js~LamejsEngine#onWorkerMessage",
    "access": "private",
    "description": "Received a message from the worker.",
    "lineNumber": 127,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "ev",
        "description": "Worker responded with event object."
      }
    ],
    "return": null
  },
  {
    "__docId__": 235,
    "kind": "method",
    "name": "onAudioProcess",
    "memberof": "js/plugins/lamejs-plugin.js~LamejsEngine",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/plugins/lamejs-plugin.js~LamejsEngine#onAudioProcess",
    "access": "private",
    "description": "Continuous encoding of audio data.",
    "lineNumber": 151,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "ev",
        "description": "onaudioprocess responded with data object."
      }
    ],
    "return": null
  },
  {
    "__docId__": 236,
    "kind": "file",
    "name": "js/plugins/libvorbis-plugin.js",
    "content": "/**\r\n * @file libvorbis-plugin.js\r\n * @since 1.1.0\r\n */\r\n\r\nimport videojs from 'video.js';\r\n\r\nconst RecordEngine = videojs.getComponent('RecordEngine');\r\n\r\n/**\r\n * Audio-only engine for the libvorbis.js library.\r\n *\r\n * @class\r\n * @augments RecordEngine\r\n */\r\nclass LibVorbisEngine extends RecordEngine {\r\n    /**\r\n     * Creates an instance of this class.\r\n     *\r\n     * @param  {Player} player\r\n     *         The `Player` that this class should be attached to.\r\n     *\r\n     * @param  {Object} [options]\r\n     *         The key/value store of player options.\r\n     */\r\n    constructor(player, options) {\r\n        super(player, options);\r\n\r\n        /**\r\n         * Enables console logging for debugging purposes.\r\n         *\r\n         * @type {boolean}\r\n         */\r\n        this.debug = false;\r\n        /**\r\n         * Specifies the sample rate to encode at.\r\n         *\r\n         * @type {number}\r\n         */\r\n        this.sampleRate = 32000;\r\n    }\r\n    /**\r\n     * Setup recording engine.\r\n     *\r\n     * @param {LocalMediaStream} stream - Media stream to record.\r\n     * @param {Object} mediaType - Object describing the media type of this\r\n     *     engine.\r\n     * @param {Boolean} debug - Indicating whether or not debug messages should\r\n     *     be printed in the console.\r\n     */\r\n    setup(stream, mediaType, debug) {\r\n        this.inputStream = stream;\r\n        this.mediaType = mediaType;\r\n        this.debug = debug;\r\n\r\n        // setup libvorbis.js\r\n        this.options = {\r\n            audioBitsPerSecond: this.sampleRate\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Start recording.\r\n     */\r\n    start() {\r\n        this.chunks = [];\r\n        this.engine = new VorbisMediaRecorder(this.inputStream,\r\n            this.options);\r\n        this.engine.ondataavailable = this.onData.bind(this);\r\n        this.engine.onstop = this.onRecordingAvailable.bind(this);\r\n\r\n        this.engine.start();\r\n    }\r\n\r\n    /**\r\n     * Stop recording.\r\n     */\r\n    stop() {\r\n        try {\r\n            this.engine.stop();\r\n        } catch (err) {\r\n            // ignore errors about invalid state\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     * @param {Object} event - ondataavailable responded with data object.\r\n     */\r\n    onData(event) {\r\n        this.chunks.push(event.data);\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    onRecordingAvailable() {\r\n        let blob = new Blob(this.chunks, {type: this.chunks[0].type});\r\n        this.chunks = [];\r\n        this.onStopRecording(blob);\r\n    }\r\n}\r\n\r\n// expose plugin\r\nvideojs.LibVorbisEngine = LibVorbisEngine;\r\n\r\nexport default LibVorbisEngine;\r\n",
    "static": true,
    "longname": "C:/Users/Thijs/projects/videojs-record/src/js/plugins/libvorbis-plugin.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 237,
    "kind": "variable",
    "name": "RecordEngine",
    "memberof": "js/plugins/libvorbis-plugin.js",
    "static": true,
    "longname": "js/plugins/libvorbis-plugin.js~RecordEngine",
    "access": "public",
    "export": false,
    "importPath": "videojs-record/js/plugins/libvorbis-plugin.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 238,
    "kind": "class",
    "name": "LibVorbisEngine",
    "memberof": "js/plugins/libvorbis-plugin.js",
    "static": true,
    "longname": "js/plugins/libvorbis-plugin.js~LibVorbisEngine",
    "access": "public",
    "export": true,
    "importPath": "videojs-record/js/plugins/libvorbis-plugin.js",
    "importStyle": "LibVorbisEngine",
    "description": "Audio-only engine for the libvorbis.js library.",
    "lineNumber": 16,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": ""
      },
      {
        "tagName": "@augments",
        "tagValue": "RecordEngine"
      }
    ],
    "interface": false,
    "extends": [
      "RecordEngine"
    ]
  },
  {
    "__docId__": 239,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "js/plugins/libvorbis-plugin.js~LibVorbisEngine",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/plugins/libvorbis-plugin.js~LibVorbisEngine#constructor",
    "access": "public",
    "description": "Creates an instance of this class.",
    "lineNumber": 26,
    "params": [
      {
        "nullable": null,
        "types": [
          "Player"
        ],
        "spread": false,
        "optional": false,
        "name": "player",
        "description": "The `Player` that this class should be attached to."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "The key/value store of player options."
      }
    ]
  },
  {
    "__docId__": 240,
    "kind": "member",
    "name": "debug",
    "memberof": "js/plugins/libvorbis-plugin.js~LibVorbisEngine",
    "static": false,
    "longname": "js/plugins/libvorbis-plugin.js~LibVorbisEngine#debug",
    "access": "public",
    "description": "Enables console logging for debugging purposes.",
    "lineNumber": 34,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 241,
    "kind": "member",
    "name": "sampleRate",
    "memberof": "js/plugins/libvorbis-plugin.js~LibVorbisEngine",
    "static": false,
    "longname": "js/plugins/libvorbis-plugin.js~LibVorbisEngine#sampleRate",
    "access": "public",
    "description": "Specifies the sample rate to encode at.",
    "lineNumber": 40,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 242,
    "kind": "method",
    "name": "setup",
    "memberof": "js/plugins/libvorbis-plugin.js~LibVorbisEngine",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/plugins/libvorbis-plugin.js~LibVorbisEngine#setup",
    "access": "public",
    "description": "Setup recording engine.",
    "lineNumber": 51,
    "params": [
      {
        "nullable": null,
        "types": [
          "LocalMediaStream"
        ],
        "spread": false,
        "optional": false,
        "name": "stream",
        "description": "Media stream to record."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "mediaType",
        "description": "Object describing the media type of this\n    engine."
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "debug",
        "description": "Indicating whether or not debug messages should\n    be printed in the console."
      }
    ],
    "return": null
  },
  {
    "__docId__": 243,
    "kind": "member",
    "name": "inputStream",
    "memberof": "js/plugins/libvorbis-plugin.js~LibVorbisEngine",
    "static": false,
    "longname": "js/plugins/libvorbis-plugin.js~LibVorbisEngine#inputStream",
    "access": "public",
    "description": null,
    "lineNumber": 52,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 244,
    "kind": "member",
    "name": "mediaType",
    "memberof": "js/plugins/libvorbis-plugin.js~LibVorbisEngine",
    "static": false,
    "longname": "js/plugins/libvorbis-plugin.js~LibVorbisEngine#mediaType",
    "access": "public",
    "description": null,
    "lineNumber": 53,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 246,
    "kind": "member",
    "name": "options",
    "memberof": "js/plugins/libvorbis-plugin.js~LibVorbisEngine",
    "static": false,
    "longname": "js/plugins/libvorbis-plugin.js~LibVorbisEngine#options",
    "access": "public",
    "description": null,
    "lineNumber": 57,
    "undocument": true,
    "type": {
      "types": [
        "{\"audioBitsPerSecond\": *}"
      ]
    }
  },
  {
    "__docId__": 247,
    "kind": "method",
    "name": "start",
    "memberof": "js/plugins/libvorbis-plugin.js~LibVorbisEngine",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/plugins/libvorbis-plugin.js~LibVorbisEngine#start",
    "access": "public",
    "description": "Start recording.",
    "lineNumber": 65,
    "params": [],
    "return": null
  },
  {
    "__docId__": 248,
    "kind": "member",
    "name": "chunks",
    "memberof": "js/plugins/libvorbis-plugin.js~LibVorbisEngine",
    "static": false,
    "longname": "js/plugins/libvorbis-plugin.js~LibVorbisEngine#chunks",
    "access": "public",
    "description": null,
    "lineNumber": 66,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 249,
    "kind": "member",
    "name": "engine",
    "memberof": "js/plugins/libvorbis-plugin.js~LibVorbisEngine",
    "static": false,
    "longname": "js/plugins/libvorbis-plugin.js~LibVorbisEngine#engine",
    "access": "public",
    "description": null,
    "lineNumber": 67,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 250,
    "kind": "method",
    "name": "stop",
    "memberof": "js/plugins/libvorbis-plugin.js~LibVorbisEngine",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/plugins/libvorbis-plugin.js~LibVorbisEngine#stop",
    "access": "public",
    "description": "Stop recording.",
    "lineNumber": 78,
    "params": [],
    "return": null
  },
  {
    "__docId__": 251,
    "kind": "method",
    "name": "onData",
    "memberof": "js/plugins/libvorbis-plugin.js~LibVorbisEngine",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/plugins/libvorbis-plugin.js~LibVorbisEngine#onData",
    "access": "private",
    "description": "",
    "lineNumber": 90,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": "ondataavailable responded with data object."
      }
    ],
    "return": null
  },
  {
    "__docId__": 252,
    "kind": "method",
    "name": "onRecordingAvailable",
    "memberof": "js/plugins/libvorbis-plugin.js~LibVorbisEngine",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/plugins/libvorbis-plugin.js~LibVorbisEngine#onRecordingAvailable",
    "access": "private",
    "description": "",
    "lineNumber": 97,
    "params": [],
    "return": null
  },
  {
    "__docId__": 254,
    "kind": "file",
    "name": "js/plugins/opus-media-recorder-plugin.js",
    "content": "/**\r\n * @file opus-media-recorder-plugin.js\r\n * @since 4.2.0\r\n */\r\n\r\nimport videojs from 'video.js';\r\n\r\nconst RecordEngine = videojs.getComponent('RecordEngine');\r\n\r\n/**\r\n * Audio-only engine for the opus-media-recorder library.\r\n *\r\n * opus-media-recorder uses WebAssembly compiled from popular\r\n * libraries (e.g libopus, libogg, libwebm, and speexdsp) to\r\n * ensure good performance and standards-compliance.\r\n *\r\n * @class\r\n * @augments RecordEngine\r\n */\r\nclass OpusMediaRecorderEngine extends RecordEngine {\r\n    /**\r\n     * Creates an instance of this class.\r\n     *\r\n     * @param  {Player} player\r\n     *         The `Player` that this class should be attached to.\r\n     *\r\n     * @param  {Object} [options]\r\n     *         The key/value store of player options.\r\n     */\r\n    constructor(player, options) {\r\n        super(player, options);\r\n\r\n        /**\r\n         * Mime-type for audio output.\r\n         *\r\n         * Choose desired format like `audio/webm`. Default is `audio/ogg`.\r\n         *\r\n         * @type {string}\r\n         */\r\n        this.audioType = 'audio/ogg';\r\n    }\r\n\r\n    /**\r\n     * Setup recording engine.\r\n     *\r\n     * @param {LocalMediaStream} stream - Media stream to record.\r\n     * @param {Object} mediaType - Object describing the media type of this\r\n     *     engine.\r\n     * @param {Boolean} debug - Indicating whether or not debug messages should\r\n     *     be printed in the console.\r\n     */\r\n    setup(stream, mediaType, debug) {\r\n        this.inputStream = stream;\r\n        this.mediaType = mediaType;\r\n        this.debug = debug;\r\n        this.chunks = [];\r\n\r\n        const workerOptions = this.audioWebAssemblyURL;\r\n        workerOptions.encoderWorkerFactory = () => {\r\n            return new Worker(this.audioWorkerURL);\r\n        };\r\n\r\n        this.recAvailableCallback = this.onData.bind(this);\r\n\r\n        const recOptions = {mimeType: this.audioType};\r\n        this.engine = new MediaRecorder(stream, recOptions, workerOptions);\r\n        this.engine.onstop = this.onRecordingAvailable.bind(this);\r\n    }\r\n\r\n    /**\r\n     * Start recording.\r\n     */\r\n    start() {\r\n        this.chunks = [];\r\n        this.engine.addEventListener('dataavailable', this.recAvailableCallback);\r\n\r\n        const timeSliceMs = 60000;\r\n        this.engine.start(timeSliceMs);\r\n    }\r\n\r\n    /**\r\n     * Stop recording.\r\n     */\r\n    stop() {\r\n        this.engine.stop();\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     * @param {Object} event - ondataavailable responded with data object.\r\n     */\r\n    onData(event) {\r\n        this.chunks.push(event.data);\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     * @param {Object} event - Audio data returned by opus-media-recorder.\r\n     */\r\n    onRecordingAvailable(event) {\r\n        this.engine.removeEventListener('dataavailable', this.recAvailableCallback);\r\n\r\n        let blob = new Blob(this.chunks, {type: this.engine.mimeType});\r\n        this.chunks = [];\r\n\r\n        this.onStopRecording(blob);\r\n    }\r\n}\r\n\r\n// expose plugin\r\nvideojs.OpusMediaRecorderEngine = OpusMediaRecorderEngine;\r\n\r\nexport default OpusMediaRecorderEngine;\r\n",
    "static": true,
    "longname": "C:/Users/Thijs/projects/videojs-record/src/js/plugins/opus-media-recorder-plugin.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 255,
    "kind": "variable",
    "name": "RecordEngine",
    "memberof": "js/plugins/opus-media-recorder-plugin.js",
    "static": true,
    "longname": "js/plugins/opus-media-recorder-plugin.js~RecordEngine",
    "access": "public",
    "export": false,
    "importPath": "videojs-record/js/plugins/opus-media-recorder-plugin.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 256,
    "kind": "class",
    "name": "OpusMediaRecorderEngine",
    "memberof": "js/plugins/opus-media-recorder-plugin.js",
    "static": true,
    "longname": "js/plugins/opus-media-recorder-plugin.js~OpusMediaRecorderEngine",
    "access": "public",
    "export": true,
    "importPath": "videojs-record/js/plugins/opus-media-recorder-plugin.js",
    "importStyle": "OpusMediaRecorderEngine",
    "description": "Audio-only engine for the opus-media-recorder library.\n\nopus-media-recorder uses WebAssembly compiled from popular\nlibraries (e.g libopus, libogg, libwebm, and speexdsp) to\nensure good performance and standards-compliance.",
    "lineNumber": 20,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": ""
      },
      {
        "tagName": "@augments",
        "tagValue": "RecordEngine"
      }
    ],
    "interface": false,
    "extends": [
      "RecordEngine"
    ]
  },
  {
    "__docId__": 257,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "js/plugins/opus-media-recorder-plugin.js~OpusMediaRecorderEngine",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/plugins/opus-media-recorder-plugin.js~OpusMediaRecorderEngine#constructor",
    "access": "public",
    "description": "Creates an instance of this class.",
    "lineNumber": 30,
    "params": [
      {
        "nullable": null,
        "types": [
          "Player"
        ],
        "spread": false,
        "optional": false,
        "name": "player",
        "description": "The `Player` that this class should be attached to."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "The key/value store of player options."
      }
    ]
  },
  {
    "__docId__": 258,
    "kind": "member",
    "name": "audioType",
    "memberof": "js/plugins/opus-media-recorder-plugin.js~OpusMediaRecorderEngine",
    "static": false,
    "longname": "js/plugins/opus-media-recorder-plugin.js~OpusMediaRecorderEngine#audioType",
    "access": "public",
    "description": "Mime-type for audio output.\n\nChoose desired format like `audio/webm`. Default is `audio/ogg`.",
    "lineNumber": 40,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 259,
    "kind": "method",
    "name": "setup",
    "memberof": "js/plugins/opus-media-recorder-plugin.js~OpusMediaRecorderEngine",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/plugins/opus-media-recorder-plugin.js~OpusMediaRecorderEngine#setup",
    "access": "public",
    "description": "Setup recording engine.",
    "lineNumber": 52,
    "params": [
      {
        "nullable": null,
        "types": [
          "LocalMediaStream"
        ],
        "spread": false,
        "optional": false,
        "name": "stream",
        "description": "Media stream to record."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "mediaType",
        "description": "Object describing the media type of this\n    engine."
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "debug",
        "description": "Indicating whether or not debug messages should\n    be printed in the console."
      }
    ],
    "return": null
  },
  {
    "__docId__": 260,
    "kind": "member",
    "name": "inputStream",
    "memberof": "js/plugins/opus-media-recorder-plugin.js~OpusMediaRecorderEngine",
    "static": false,
    "longname": "js/plugins/opus-media-recorder-plugin.js~OpusMediaRecorderEngine#inputStream",
    "access": "public",
    "description": null,
    "lineNumber": 53,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 261,
    "kind": "member",
    "name": "mediaType",
    "memberof": "js/plugins/opus-media-recorder-plugin.js~OpusMediaRecorderEngine",
    "static": false,
    "longname": "js/plugins/opus-media-recorder-plugin.js~OpusMediaRecorderEngine#mediaType",
    "access": "public",
    "description": null,
    "lineNumber": 54,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 262,
    "kind": "member",
    "name": "debug",
    "memberof": "js/plugins/opus-media-recorder-plugin.js~OpusMediaRecorderEngine",
    "static": false,
    "longname": "js/plugins/opus-media-recorder-plugin.js~OpusMediaRecorderEngine#debug",
    "access": "public",
    "description": null,
    "lineNumber": 55,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 263,
    "kind": "member",
    "name": "chunks",
    "memberof": "js/plugins/opus-media-recorder-plugin.js~OpusMediaRecorderEngine",
    "static": false,
    "longname": "js/plugins/opus-media-recorder-plugin.js~OpusMediaRecorderEngine#chunks",
    "access": "public",
    "description": null,
    "lineNumber": 56,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 264,
    "kind": "member",
    "name": "recAvailableCallback",
    "memberof": "js/plugins/opus-media-recorder-plugin.js~OpusMediaRecorderEngine",
    "static": false,
    "longname": "js/plugins/opus-media-recorder-plugin.js~OpusMediaRecorderEngine#recAvailableCallback",
    "access": "public",
    "description": null,
    "lineNumber": 63,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 265,
    "kind": "member",
    "name": "engine",
    "memberof": "js/plugins/opus-media-recorder-plugin.js~OpusMediaRecorderEngine",
    "static": false,
    "longname": "js/plugins/opus-media-recorder-plugin.js~OpusMediaRecorderEngine#engine",
    "access": "public",
    "description": null,
    "lineNumber": 66,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 266,
    "kind": "method",
    "name": "start",
    "memberof": "js/plugins/opus-media-recorder-plugin.js~OpusMediaRecorderEngine",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/plugins/opus-media-recorder-plugin.js~OpusMediaRecorderEngine#start",
    "access": "public",
    "description": "Start recording.",
    "lineNumber": 73,
    "params": [],
    "return": null
  },
  {
    "__docId__": 268,
    "kind": "method",
    "name": "stop",
    "memberof": "js/plugins/opus-media-recorder-plugin.js~OpusMediaRecorderEngine",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/plugins/opus-media-recorder-plugin.js~OpusMediaRecorderEngine#stop",
    "access": "public",
    "description": "Stop recording.",
    "lineNumber": 84,
    "params": [],
    "return": null
  },
  {
    "__docId__": 269,
    "kind": "method",
    "name": "onData",
    "memberof": "js/plugins/opus-media-recorder-plugin.js~OpusMediaRecorderEngine",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/plugins/opus-media-recorder-plugin.js~OpusMediaRecorderEngine#onData",
    "access": "private",
    "description": "",
    "lineNumber": 92,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": "ondataavailable responded with data object."
      }
    ],
    "return": null
  },
  {
    "__docId__": 270,
    "kind": "method",
    "name": "onRecordingAvailable",
    "memberof": "js/plugins/opus-media-recorder-plugin.js~OpusMediaRecorderEngine",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/plugins/opus-media-recorder-plugin.js~OpusMediaRecorderEngine#onRecordingAvailable",
    "access": "private",
    "description": "",
    "lineNumber": 100,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": "Audio data returned by opus-media-recorder."
      }
    ],
    "return": null
  },
  {
    "__docId__": 272,
    "kind": "file",
    "name": "js/plugins/opus-recorder-plugin.js",
    "content": "/**\r\n * @file opus-recorder-plugin.js\r\n * @since 1.1.0\r\n */\r\n\r\nimport videojs from 'video.js';\r\n\r\nconst RecordEngine = videojs.getComponent('RecordEngine');\r\n\r\n/**\r\n * Audio-only engine for the opus-recorder library.\r\n *\r\n * Audio is encoded using libopus.\r\n *\r\n * @class\r\n * @augments RecordEngine\r\n */\r\nclass OpusRecorderEngine extends RecordEngine {\r\n    /**\r\n     * Creates an instance of this class.\r\n     *\r\n     * @param  {Player} player\r\n     *         The `Player` that this class should be attached to.\r\n     *\r\n     * @param  {Object} [options]\r\n     *         The key/value store of player options.\r\n     */\r\n    constructor(player, options) {\r\n        super(player, options);\r\n\r\n        /**\r\n         * Enables console logging for debugging purposes.\r\n         *\r\n         * @type {boolean}\r\n         */\r\n        this.debug = false;\r\n        /**\r\n         * The number of channels to record. 1 = mono, 2 = stereo.\r\n         * Maximum 2 channels are supported.\r\n         *\r\n         * @type {number}\r\n         */\r\n        this.audioChannels = 1;\r\n        /**\r\n         * The length of the buffer that the internal `JavaScriptNode`\r\n         * uses to capture the audio. Can be tweaked if experiencing\r\n         * performance issues.\r\n         *\r\n         * @type {number}\r\n         */\r\n        this.bufferSize = 4096;\r\n        /**\r\n         * Specifies the sample rate to encode at. Supported values are\r\n         * 8000, 12000, 16000, 24000 or 48000.\r\n         *\r\n         * @type {number}\r\n         */\r\n        this.sampleRate = 48000;\r\n        /**\r\n         * Path to `encoderWorker.min.js` or `waveWorker.min.js` worker\r\n         * script.\r\n         *\r\n         * @type {string}\r\n         */\r\n        this.audioWorkerURL = 'encoderWorker.min.js';\r\n        /**\r\n         * Mime-type for audio output. Also supports `audio/wav`; but make sure\r\n         * to use waveEncoder worker in that case.\r\n         *\r\n         * @type {string}\r\n         */\r\n        this.audioType = 'audio/ogg';\r\n        /**\r\n         * Additional configuration options for the opus-recorder library.\r\n         *\r\n         * @type {object}\r\n         */\r\n        this.pluginLibraryOptions = {};\r\n    }\r\n\r\n    /**\r\n     * Setup recording engine.\r\n     *\r\n     * @param {LocalMediaStream} stream - Media stream to record.\r\n     * @param {Object} mediaType - Object describing the media type of this\r\n     *     engine.\r\n     * @param {Boolean} debug - Indicating whether or not debug messages should\r\n     *     be printed in the console.\r\n     */\r\n    setup(stream, mediaType, debug) {\r\n        this.inputStream = stream;\r\n        this.mediaType = mediaType;\r\n        this.debug = debug;\r\n\r\n        // create new AudioContext\r\n        let AudioContext = window.AudioContext || window.webkitAudioContext;\r\n        this.audioContext = new AudioContext();\r\n        this.audioSourceNode = this.audioContext.createMediaStreamSource(\r\n            this.inputStream);\r\n\r\n        // minimal default config\r\n        this.config = {\r\n            numberOfChannels: this.audioChannels,\r\n            bufferLength: this.bufferSize,\r\n            encoderSampleRate: this.sampleRate,\r\n            encoderPath: this.audioWorkerURL,\r\n            sourceNode: this.audioSourceNode\r\n        };\r\n\r\n        // extend config with optional options\r\n        this.config = Object.assign(this.config, this.pluginLibraryOptions);\r\n\r\n        // create Recorder engine\r\n        this.engine = new Recorder(this.config);\r\n        this.engine.ondataavailable = this.onRecordingAvailable.bind(this);\r\n    }\r\n\r\n    /**\r\n     * Start recording.\r\n     */\r\n    start() {\r\n        this.engine.start().then(() => {\r\n            // recording started ok\r\n        }).catch((err) => {\r\n            // can't start playback\r\n            this.player().trigger('error', err);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Stop recording.\r\n     */\r\n    stop() {\r\n        this.engine.stop();\r\n    }\r\n\r\n    /**\r\n     * Pause recording.\r\n     */\r\n    pause() {\r\n        this.engine.pause();\r\n    }\r\n\r\n    /**\r\n     * Resume recording.\r\n     */\r\n    resume() {\r\n        this.engine.resume();\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     * @param {Object} data - Audio data returned by opus-recorder.\r\n     */\r\n    onRecordingAvailable(data) {\r\n        // Opus format stored in an Ogg container\r\n        let blob = new Blob([data], {type: this.audioType});\r\n\r\n        this.onStopRecording(blob);\r\n    }\r\n}\r\n\r\n// expose plugin\r\nvideojs.OpusRecorderEngine = OpusRecorderEngine;\r\n\r\nexport default OpusRecorderEngine;\r\n",
    "static": true,
    "longname": "C:/Users/Thijs/projects/videojs-record/src/js/plugins/opus-recorder-plugin.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 273,
    "kind": "variable",
    "name": "RecordEngine",
    "memberof": "js/plugins/opus-recorder-plugin.js",
    "static": true,
    "longname": "js/plugins/opus-recorder-plugin.js~RecordEngine",
    "access": "public",
    "export": false,
    "importPath": "videojs-record/js/plugins/opus-recorder-plugin.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 274,
    "kind": "class",
    "name": "OpusRecorderEngine",
    "memberof": "js/plugins/opus-recorder-plugin.js",
    "static": true,
    "longname": "js/plugins/opus-recorder-plugin.js~OpusRecorderEngine",
    "access": "public",
    "export": true,
    "importPath": "videojs-record/js/plugins/opus-recorder-plugin.js",
    "importStyle": "OpusRecorderEngine",
    "description": "Audio-only engine for the opus-recorder library.\n\nAudio is encoded using libopus.",
    "lineNumber": 18,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": ""
      },
      {
        "tagName": "@augments",
        "tagValue": "RecordEngine"
      }
    ],
    "interface": false,
    "extends": [
      "RecordEngine"
    ]
  },
  {
    "__docId__": 275,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "js/plugins/opus-recorder-plugin.js~OpusRecorderEngine",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/plugins/opus-recorder-plugin.js~OpusRecorderEngine#constructor",
    "access": "public",
    "description": "Creates an instance of this class.",
    "lineNumber": 28,
    "params": [
      {
        "nullable": null,
        "types": [
          "Player"
        ],
        "spread": false,
        "optional": false,
        "name": "player",
        "description": "The `Player` that this class should be attached to."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "The key/value store of player options."
      }
    ]
  },
  {
    "__docId__": 276,
    "kind": "member",
    "name": "debug",
    "memberof": "js/plugins/opus-recorder-plugin.js~OpusRecorderEngine",
    "static": false,
    "longname": "js/plugins/opus-recorder-plugin.js~OpusRecorderEngine#debug",
    "access": "public",
    "description": "Enables console logging for debugging purposes.",
    "lineNumber": 36,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 277,
    "kind": "member",
    "name": "audioChannels",
    "memberof": "js/plugins/opus-recorder-plugin.js~OpusRecorderEngine",
    "static": false,
    "longname": "js/plugins/opus-recorder-plugin.js~OpusRecorderEngine#audioChannels",
    "access": "public",
    "description": "The number of channels to record. 1 = mono, 2 = stereo.\nMaximum 2 channels are supported.",
    "lineNumber": 43,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 278,
    "kind": "member",
    "name": "bufferSize",
    "memberof": "js/plugins/opus-recorder-plugin.js~OpusRecorderEngine",
    "static": false,
    "longname": "js/plugins/opus-recorder-plugin.js~OpusRecorderEngine#bufferSize",
    "access": "public",
    "description": "The length of the buffer that the internal `JavaScriptNode`\nuses to capture the audio. Can be tweaked if experiencing\nperformance issues.",
    "lineNumber": 51,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 279,
    "kind": "member",
    "name": "sampleRate",
    "memberof": "js/plugins/opus-recorder-plugin.js~OpusRecorderEngine",
    "static": false,
    "longname": "js/plugins/opus-recorder-plugin.js~OpusRecorderEngine#sampleRate",
    "access": "public",
    "description": "Specifies the sample rate to encode at. Supported values are\n8000, 12000, 16000, 24000 or 48000.",
    "lineNumber": 58,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 280,
    "kind": "member",
    "name": "audioWorkerURL",
    "memberof": "js/plugins/opus-recorder-plugin.js~OpusRecorderEngine",
    "static": false,
    "longname": "js/plugins/opus-recorder-plugin.js~OpusRecorderEngine#audioWorkerURL",
    "access": "public",
    "description": "Path to `encoderWorker.min.js` or `waveWorker.min.js` worker\nscript.",
    "lineNumber": 65,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 281,
    "kind": "member",
    "name": "audioType",
    "memberof": "js/plugins/opus-recorder-plugin.js~OpusRecorderEngine",
    "static": false,
    "longname": "js/plugins/opus-recorder-plugin.js~OpusRecorderEngine#audioType",
    "access": "public",
    "description": "Mime-type for audio output. Also supports `audio/wav`; but make sure\nto use waveEncoder worker in that case.",
    "lineNumber": 72,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 282,
    "kind": "member",
    "name": "pluginLibraryOptions",
    "memberof": "js/plugins/opus-recorder-plugin.js~OpusRecorderEngine",
    "static": false,
    "longname": "js/plugins/opus-recorder-plugin.js~OpusRecorderEngine#pluginLibraryOptions",
    "access": "public",
    "description": "Additional configuration options for the opus-recorder library.",
    "lineNumber": 78,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 283,
    "kind": "method",
    "name": "setup",
    "memberof": "js/plugins/opus-recorder-plugin.js~OpusRecorderEngine",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/plugins/opus-recorder-plugin.js~OpusRecorderEngine#setup",
    "access": "public",
    "description": "Setup recording engine.",
    "lineNumber": 90,
    "params": [
      {
        "nullable": null,
        "types": [
          "LocalMediaStream"
        ],
        "spread": false,
        "optional": false,
        "name": "stream",
        "description": "Media stream to record."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "mediaType",
        "description": "Object describing the media type of this\n    engine."
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "debug",
        "description": "Indicating whether or not debug messages should\n    be printed in the console."
      }
    ],
    "return": null
  },
  {
    "__docId__": 284,
    "kind": "member",
    "name": "inputStream",
    "memberof": "js/plugins/opus-recorder-plugin.js~OpusRecorderEngine",
    "static": false,
    "longname": "js/plugins/opus-recorder-plugin.js~OpusRecorderEngine#inputStream",
    "access": "public",
    "description": null,
    "lineNumber": 91,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 285,
    "kind": "member",
    "name": "mediaType",
    "memberof": "js/plugins/opus-recorder-plugin.js~OpusRecorderEngine",
    "static": false,
    "longname": "js/plugins/opus-recorder-plugin.js~OpusRecorderEngine#mediaType",
    "access": "public",
    "description": null,
    "lineNumber": 92,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 287,
    "kind": "member",
    "name": "audioContext",
    "memberof": "js/plugins/opus-recorder-plugin.js~OpusRecorderEngine",
    "static": false,
    "longname": "js/plugins/opus-recorder-plugin.js~OpusRecorderEngine#audioContext",
    "access": "public",
    "description": null,
    "lineNumber": 97,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 288,
    "kind": "member",
    "name": "audioSourceNode",
    "memberof": "js/plugins/opus-recorder-plugin.js~OpusRecorderEngine",
    "static": false,
    "longname": "js/plugins/opus-recorder-plugin.js~OpusRecorderEngine#audioSourceNode",
    "access": "public",
    "description": null,
    "lineNumber": 98,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 289,
    "kind": "member",
    "name": "config",
    "memberof": "js/plugins/opus-recorder-plugin.js~OpusRecorderEngine",
    "static": false,
    "longname": "js/plugins/opus-recorder-plugin.js~OpusRecorderEngine#config",
    "access": "public",
    "description": null,
    "lineNumber": 102,
    "undocument": true,
    "type": {
      "types": [
        "{\"numberOfChannels\": *, \"bufferLength\": *, \"encoderSampleRate\": *, \"encoderPath\": *, \"sourceNode\": *}"
      ]
    }
  },
  {
    "__docId__": 291,
    "kind": "member",
    "name": "engine",
    "memberof": "js/plugins/opus-recorder-plugin.js~OpusRecorderEngine",
    "static": false,
    "longname": "js/plugins/opus-recorder-plugin.js~OpusRecorderEngine#engine",
    "access": "public",
    "description": null,
    "lineNumber": 114,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 292,
    "kind": "method",
    "name": "start",
    "memberof": "js/plugins/opus-recorder-plugin.js~OpusRecorderEngine",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/plugins/opus-recorder-plugin.js~OpusRecorderEngine#start",
    "access": "public",
    "description": "Start recording.",
    "lineNumber": 121,
    "params": [],
    "return": null
  },
  {
    "__docId__": 293,
    "kind": "method",
    "name": "stop",
    "memberof": "js/plugins/opus-recorder-plugin.js~OpusRecorderEngine",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/plugins/opus-recorder-plugin.js~OpusRecorderEngine#stop",
    "access": "public",
    "description": "Stop recording.",
    "lineNumber": 133,
    "params": [],
    "return": null
  },
  {
    "__docId__": 294,
    "kind": "method",
    "name": "pause",
    "memberof": "js/plugins/opus-recorder-plugin.js~OpusRecorderEngine",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/plugins/opus-recorder-plugin.js~OpusRecorderEngine#pause",
    "access": "public",
    "description": "Pause recording.",
    "lineNumber": 140,
    "params": [],
    "return": null
  },
  {
    "__docId__": 295,
    "kind": "method",
    "name": "resume",
    "memberof": "js/plugins/opus-recorder-plugin.js~OpusRecorderEngine",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/plugins/opus-recorder-plugin.js~OpusRecorderEngine#resume",
    "access": "public",
    "description": "Resume recording.",
    "lineNumber": 147,
    "params": [],
    "return": null
  },
  {
    "__docId__": 296,
    "kind": "method",
    "name": "onRecordingAvailable",
    "memberof": "js/plugins/opus-recorder-plugin.js~OpusRecorderEngine",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/plugins/opus-recorder-plugin.js~OpusRecorderEngine#onRecordingAvailable",
    "access": "private",
    "description": "",
    "lineNumber": 155,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "Audio data returned by opus-recorder."
      }
    ],
    "return": null
  },
  {
    "__docId__": 297,
    "kind": "file",
    "name": "js/plugins/recorderjs-plugin.js",
    "content": "/**\r\n * @file recorderjs-plugin.js\r\n * @since 1.1.0\r\n */\r\n\r\nimport videojs from 'video.js';\r\n\r\nconst RecordEngine = videojs.getComponent('RecordEngine');\r\n\r\n/**\r\n * Audio-only engine for the recorder.js library.\r\n *\r\n * @class\r\n * @augments RecordEngine\r\n */\r\nclass RecorderjsEngine extends RecordEngine {\r\n    /**\r\n     * Creates an instance of this class.\r\n     *\r\n     * @param  {Player} player\r\n     *         The `Player` that this class should be attached to.\r\n     *\r\n     * @param  {Object} [options]\r\n     *         The key/value store of player options.\r\n     */\r\n    constructor(player, options) {\r\n        super(player, options);\r\n\r\n        /**\r\n         * Enables console logging for debugging purposes.\r\n         *\r\n         * @type {boolean}\r\n         */\r\n        this.debug = false;\r\n        /**\r\n         * The number of channels to record. 1 = mono, 2 = stereo.\r\n         * Maximum 2 channels are supported.\r\n         *\r\n         * @type {number}\r\n         */\r\n        this.audioChannels = 2;\r\n        /**\r\n         * The length of the buffer that the internal `JavaScriptNode`\r\n         * uses to capture the audio. Can be tweaked if experiencing\r\n         * performance issues.\r\n         *\r\n         * @type {number}\r\n         */\r\n        this.bufferSize = 4096;\r\n        /**\r\n         * Mime-type for audio output.\r\n         *\r\n         * @type {string}\r\n         */\r\n        this.audioType = 'audio/wav';\r\n    }\r\n\r\n    /**\r\n     * Setup recording engine.\r\n     *\r\n     * @param {LocalMediaStream} stream - Media stream to record.\r\n     * @param {Object} mediaType - Object describing the media type of this\r\n     *     engine.\r\n     * @param {Boolean} debug - Indicating whether or not debug messages should\r\n     *     be printed in the console.\r\n     */\r\n    setup(stream, mediaType, debug) {\r\n        this.inputStream = stream;\r\n        this.mediaType = mediaType;\r\n        this.debug = debug;\r\n\r\n        let AudioContext = window.AudioContext || window.webkitAudioContext;\r\n        this.audioContext = new AudioContext();\r\n        this.audioSourceNode = this.audioContext.createMediaStreamSource(\r\n            this.inputStream);\r\n\r\n        // setup recorder.js\r\n        this.engine = new Recorder(this.audioSourceNode, {\r\n            bufferLen: this.bufferSize,\r\n            numChannels: this.audioChannels,\r\n            type: this.audioType\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Start recording.\r\n     */\r\n    start() {\r\n        this.engine.record();\r\n    }\r\n\r\n    /**\r\n     * Stop recording.\r\n     */\r\n    stop() {\r\n        this.engine.stop();\r\n\r\n        if (this.engine.exportWAV !== undefined) {\r\n            this.engine.exportWAV(this.onStopRecording.bind(this));\r\n        }\r\n        if (this.engine.clear !== undefined) {\r\n            this.engine.clear();\r\n        }\r\n    }\r\n}\r\n\r\n// expose plugin\r\nvideojs.RecorderjsEngine = RecorderjsEngine;\r\n\r\nexport default RecorderjsEngine;\r\n",
    "static": true,
    "longname": "C:/Users/Thijs/projects/videojs-record/src/js/plugins/recorderjs-plugin.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 298,
    "kind": "variable",
    "name": "RecordEngine",
    "memberof": "js/plugins/recorderjs-plugin.js",
    "static": true,
    "longname": "js/plugins/recorderjs-plugin.js~RecordEngine",
    "access": "public",
    "export": false,
    "importPath": "videojs-record/js/plugins/recorderjs-plugin.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 299,
    "kind": "class",
    "name": "RecorderjsEngine",
    "memberof": "js/plugins/recorderjs-plugin.js",
    "static": true,
    "longname": "js/plugins/recorderjs-plugin.js~RecorderjsEngine",
    "access": "public",
    "export": true,
    "importPath": "videojs-record/js/plugins/recorderjs-plugin.js",
    "importStyle": "RecorderjsEngine",
    "description": "Audio-only engine for the recorder.js library.",
    "lineNumber": 16,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": ""
      },
      {
        "tagName": "@augments",
        "tagValue": "RecordEngine"
      }
    ],
    "interface": false,
    "extends": [
      "RecordEngine"
    ]
  },
  {
    "__docId__": 300,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "js/plugins/recorderjs-plugin.js~RecorderjsEngine",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/plugins/recorderjs-plugin.js~RecorderjsEngine#constructor",
    "access": "public",
    "description": "Creates an instance of this class.",
    "lineNumber": 26,
    "params": [
      {
        "nullable": null,
        "types": [
          "Player"
        ],
        "spread": false,
        "optional": false,
        "name": "player",
        "description": "The `Player` that this class should be attached to."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "The key/value store of player options."
      }
    ]
  },
  {
    "__docId__": 301,
    "kind": "member",
    "name": "debug",
    "memberof": "js/plugins/recorderjs-plugin.js~RecorderjsEngine",
    "static": false,
    "longname": "js/plugins/recorderjs-plugin.js~RecorderjsEngine#debug",
    "access": "public",
    "description": "Enables console logging for debugging purposes.",
    "lineNumber": 34,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 302,
    "kind": "member",
    "name": "audioChannels",
    "memberof": "js/plugins/recorderjs-plugin.js~RecorderjsEngine",
    "static": false,
    "longname": "js/plugins/recorderjs-plugin.js~RecorderjsEngine#audioChannels",
    "access": "public",
    "description": "The number of channels to record. 1 = mono, 2 = stereo.\nMaximum 2 channels are supported.",
    "lineNumber": 41,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 303,
    "kind": "member",
    "name": "bufferSize",
    "memberof": "js/plugins/recorderjs-plugin.js~RecorderjsEngine",
    "static": false,
    "longname": "js/plugins/recorderjs-plugin.js~RecorderjsEngine#bufferSize",
    "access": "public",
    "description": "The length of the buffer that the internal `JavaScriptNode`\nuses to capture the audio. Can be tweaked if experiencing\nperformance issues.",
    "lineNumber": 49,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 304,
    "kind": "member",
    "name": "audioType",
    "memberof": "js/plugins/recorderjs-plugin.js~RecorderjsEngine",
    "static": false,
    "longname": "js/plugins/recorderjs-plugin.js~RecorderjsEngine#audioType",
    "access": "public",
    "description": "Mime-type for audio output.",
    "lineNumber": 55,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 305,
    "kind": "method",
    "name": "setup",
    "memberof": "js/plugins/recorderjs-plugin.js~RecorderjsEngine",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/plugins/recorderjs-plugin.js~RecorderjsEngine#setup",
    "access": "public",
    "description": "Setup recording engine.",
    "lineNumber": 67,
    "params": [
      {
        "nullable": null,
        "types": [
          "LocalMediaStream"
        ],
        "spread": false,
        "optional": false,
        "name": "stream",
        "description": "Media stream to record."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "mediaType",
        "description": "Object describing the media type of this\n    engine."
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "debug",
        "description": "Indicating whether or not debug messages should\n    be printed in the console."
      }
    ],
    "return": null
  },
  {
    "__docId__": 306,
    "kind": "member",
    "name": "inputStream",
    "memberof": "js/plugins/recorderjs-plugin.js~RecorderjsEngine",
    "static": false,
    "longname": "js/plugins/recorderjs-plugin.js~RecorderjsEngine#inputStream",
    "access": "public",
    "description": null,
    "lineNumber": 68,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 307,
    "kind": "member",
    "name": "mediaType",
    "memberof": "js/plugins/recorderjs-plugin.js~RecorderjsEngine",
    "static": false,
    "longname": "js/plugins/recorderjs-plugin.js~RecorderjsEngine#mediaType",
    "access": "public",
    "description": null,
    "lineNumber": 69,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 309,
    "kind": "member",
    "name": "audioContext",
    "memberof": "js/plugins/recorderjs-plugin.js~RecorderjsEngine",
    "static": false,
    "longname": "js/plugins/recorderjs-plugin.js~RecorderjsEngine#audioContext",
    "access": "public",
    "description": null,
    "lineNumber": 73,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 310,
    "kind": "member",
    "name": "audioSourceNode",
    "memberof": "js/plugins/recorderjs-plugin.js~RecorderjsEngine",
    "static": false,
    "longname": "js/plugins/recorderjs-plugin.js~RecorderjsEngine#audioSourceNode",
    "access": "public",
    "description": null,
    "lineNumber": 74,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 311,
    "kind": "member",
    "name": "engine",
    "memberof": "js/plugins/recorderjs-plugin.js~RecorderjsEngine",
    "static": false,
    "longname": "js/plugins/recorderjs-plugin.js~RecorderjsEngine#engine",
    "access": "public",
    "description": null,
    "lineNumber": 78,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 312,
    "kind": "method",
    "name": "start",
    "memberof": "js/plugins/recorderjs-plugin.js~RecorderjsEngine",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/plugins/recorderjs-plugin.js~RecorderjsEngine#start",
    "access": "public",
    "description": "Start recording.",
    "lineNumber": 88,
    "params": [],
    "return": null
  },
  {
    "__docId__": 313,
    "kind": "method",
    "name": "stop",
    "memberof": "js/plugins/recorderjs-plugin.js~RecorderjsEngine",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/plugins/recorderjs-plugin.js~RecorderjsEngine#stop",
    "access": "public",
    "description": "Stop recording.",
    "lineNumber": 95,
    "params": [],
    "return": null
  },
  {
    "__docId__": 314,
    "kind": "file",
    "name": "js/plugins/ts-ebml-plugin.js",
    "content": "/**\r\n * @file ts-ebml-plugin.js\r\n * @since 3.3.0\r\n */\r\n\r\nimport videojs from 'video.js';\r\n\r\nconst ConvertEngine = videojs.getComponent('ConvertEngine');\r\n\r\n// see https://github.com/legokichi/ts-ebml/issues/25\r\nimport {Buffer} from 'buffer';\r\nwindow.Buffer = Buffer;\r\n\r\nimport * as ebml from 'ts-ebml';\r\n\r\n/**\r\n * Converter engine using the ts-ebml library.\r\n *\r\n * Used to inject metadata, like duration, into webm files.\r\n *\r\n * @class\r\n * @augments videojs.ConvertEngine\r\n */\r\nclass TsEBMLEngine extends ConvertEngine {\r\n    /**\r\n     * Inject metadata.\r\n     *\r\n     * @param {Blob} data - Recorded data that needs to be converted.\r\n     */\r\n    convert(data) {\r\n        const decoder = new ebml.Decoder();\r\n        const reader = new ebml.Reader();\r\n        reader.logging = false;\r\n        reader.drop_default_duration = false;\r\n\r\n        // save timestamp\r\n        const timestamp = new Date();\r\n        timestamp.setTime(data.lastModified);\r\n\r\n        // notify listeners\r\n        this.player().trigger('startConvert');\r\n\r\n        // load and convert blob\r\n        this.loadBlob(data).then((buffer) => {\r\n            // decode\r\n            let elms = decoder.decode(buffer);\r\n\r\n            // see https://github.com/legokichi/ts-ebml/issues/33#issuecomment-888800828\r\n            const validEmlType = ['m', 'u', 'i', 'f', 's', '8', 'b', 'd'];\r\n            elms = elms.filter((elm) => validEmlType.includes(elm.type));\r\n\r\n            elms.forEach((elm) => {\r\n                reader.read(elm);\r\n            });\r\n            reader.stop();\r\n\r\n            // generate metadata\r\n            let refinedMetadataBuf = ebml.tools.makeMetadataSeekable(\r\n                reader.metadatas, reader.duration, reader.cues);\r\n            let body = buffer.slice(reader.metadataSize);\r\n\r\n            // create new blob\r\n            let result = new Blob([refinedMetadataBuf, body],\r\n                {type: data.type});\r\n\r\n            // add existing file info\r\n            this.addFileInfo(result, timestamp);\r\n\r\n            // store result\r\n            this.player().convertedData = result;\r\n\r\n            // notify listeners\r\n            this.player().trigger('finishConvert');\r\n        });\r\n    }\r\n}\r\n\r\n// expose plugin\r\nvideojs.TsEBMLEngine = TsEBMLEngine;\r\n\r\nexport default TsEBMLEngine;\r\n",
    "static": true,
    "longname": "C:/Users/Thijs/projects/videojs-record/src/js/plugins/ts-ebml-plugin.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 315,
    "kind": "variable",
    "name": "ConvertEngine",
    "memberof": "js/plugins/ts-ebml-plugin.js",
    "static": true,
    "longname": "js/plugins/ts-ebml-plugin.js~ConvertEngine",
    "access": "public",
    "export": false,
    "importPath": "videojs-record/js/plugins/ts-ebml-plugin.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 316,
    "kind": "class",
    "name": "TsEBMLEngine",
    "memberof": "js/plugins/ts-ebml-plugin.js",
    "static": true,
    "longname": "js/plugins/ts-ebml-plugin.js~TsEBMLEngine",
    "access": "public",
    "export": true,
    "importPath": "videojs-record/js/plugins/ts-ebml-plugin.js",
    "importStyle": "TsEBMLEngine",
    "description": "Converter engine using the ts-ebml library.\n\nUsed to inject metadata, like duration, into webm files.",
    "lineNumber": 24,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": ""
      },
      {
        "tagName": "@augments",
        "tagValue": "videojs.ConvertEngine"
      }
    ],
    "interface": false,
    "extends": [
      "ConvertEngine"
    ]
  },
  {
    "__docId__": 317,
    "kind": "method",
    "name": "convert",
    "memberof": "js/plugins/ts-ebml-plugin.js~TsEBMLEngine",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/plugins/ts-ebml-plugin.js~TsEBMLEngine#convert",
    "access": "public",
    "description": "Inject metadata.",
    "lineNumber": 30,
    "params": [
      {
        "nullable": null,
        "types": [
          "Blob"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "Recorded data that needs to be converted."
      }
    ],
    "return": null
  },
  {
    "__docId__": 318,
    "kind": "file",
    "name": "js/plugins/vmsg-plugin.js",
    "content": "/**\r\n * @file vmsg-plugin.js\r\n * @since 3.3.0\r\n */\r\n\r\nimport videojs from 'video.js';\r\n\r\nimport {Recorder} from 'vmsg';\r\n\r\nconst RecordEngine = videojs.getComponent('RecordEngine');\r\n\r\n/**\r\n * Audio-only engine for the vmsg library.\r\n *\r\n * @class\r\n * @augments videojs.RecordEngine\r\n */\r\nclass VmsgEngine extends RecordEngine {\r\n    /**\r\n     * Creates an instance of this class.\r\n     *\r\n     * @param  {Player} player\r\n     *         The `Player` that this class should be attached to.\r\n     *\r\n     * @param  {Object} [options]\r\n     *         The key/value store of player options.\r\n     */\r\n    constructor(player, options) {\r\n        super(player, options);\r\n\r\n        /**\r\n         * Enables console logging for debugging purposes.\r\n         *\r\n         * @type {boolean}\r\n         */\r\n        this.debug = false;\r\n        /**\r\n         * Path to `vmsg.wasm` WebAssembly script.\r\n         *\r\n         * @type {string}\r\n         */\r\n        this.audioWebAssemblyURL = 'vmsg.wasm';\r\n        /**\r\n         * Additional configuration options for the vmsg library.\r\n         *\r\n         * @type {object}\r\n         */\r\n        this.pluginLibraryOptions = {};\r\n    }\r\n\r\n    /**\r\n     * Setup recording engine.\r\n     *\r\n     * @param {LocalMediaStream} stream - Media stream to record.\r\n     * @param {Object} mediaType - Object describing the media type of this\r\n     *     engine.\r\n     * @param {Boolean} debug - Indicating whether or not debug messages should\r\n     *     be printed in the console.\r\n     */\r\n    setup(stream, mediaType, debug) {\r\n        this.inputStream = stream;\r\n        this.mediaType = mediaType;\r\n        this.debug = debug;\r\n\r\n        // minimal default config\r\n        this.config = {\r\n            wasmURL: this.audioWebAssemblyURL\r\n        };\r\n\r\n        // extend config with optional options\r\n        this.config = Object.assign(this.config, this.pluginLibraryOptions);\r\n\r\n        this.engine = new Recorder(this.config,\r\n            this.onRecordingAvailable.bind(this));\r\n        this.engine.stream = this.inputStream;\r\n\r\n        let AudioContext = window.AudioContext || window.webkitAudioContext;\r\n        this.audioContext = new AudioContext();\r\n\r\n        this.audioSourceNode = this.audioContext.createMediaStreamSource(\r\n            this.inputStream);\r\n        // a bufferSize of 0 instructs the browser to choose the best bufferSize\r\n        this.processor = this.audioContext.createScriptProcessor(\r\n            0, 1, 1);\r\n        this.audioSourceNode.connect(this.processor);\r\n\r\n        this.engine.initWorker().catch((err) => {\r\n            // invalid message received\r\n            this.player().trigger('error', err);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Start recording.\r\n     */\r\n    start() {\r\n        this.engine.blob = null;\r\n        if (this.engine.blobURL) {\r\n            URL.revokeObjectURL(this.engine.blobURL);\r\n        }\r\n        this.engine.blobURL = null;\r\n\r\n        this.engine.worker.postMessage({\r\n            type: 'start',\r\n            data: this.audioContext.sampleRate\r\n        });\r\n        this.processor.onaudioprocess = this.onAudioProcess.bind(this);\r\n        this.processor.connect(this.audioContext.destination);\r\n    }\r\n\r\n    /**\r\n     * Stop recording.\r\n     */\r\n    stop() {\r\n        if (this.processor) {\r\n            this.processor.disconnect();\r\n            this.processor.onaudioprocess = null;\r\n        }\r\n        if (this.engine && this.engine.worker !== undefined) {\r\n            this.engine.worker.postMessage({type: 'stop', data: null});\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Destroy engine.\r\n     */\r\n    destroy() {\r\n        if (this.engine && typeof this.engine.close === 'function') {\r\n            this.engine.close();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Continuous encoding of audio data.\r\n     * @private\r\n     * @param {object} event - Audio buffer.\r\n     */\r\n    onAudioProcess(event) {\r\n        const samples = event.inputBuffer.getChannelData(0);\r\n        this.engine.worker.postMessage({type: 'data', data: samples});\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    onRecordingAvailable() {\r\n        this.onStopRecording(this.engine.blob);\r\n    }\r\n}\r\n\r\n// expose plugin\r\nvideojs.VmsgEngine = VmsgEngine;\r\n\r\nexport default VmsgEngine;\r\n",
    "static": true,
    "longname": "C:/Users/Thijs/projects/videojs-record/src/js/plugins/vmsg-plugin.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 319,
    "kind": "variable",
    "name": "RecordEngine",
    "memberof": "js/plugins/vmsg-plugin.js",
    "static": true,
    "longname": "js/plugins/vmsg-plugin.js~RecordEngine",
    "access": "public",
    "export": false,
    "importPath": "videojs-record/js/plugins/vmsg-plugin.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 320,
    "kind": "class",
    "name": "VmsgEngine",
    "memberof": "js/plugins/vmsg-plugin.js",
    "static": true,
    "longname": "js/plugins/vmsg-plugin.js~VmsgEngine",
    "access": "public",
    "export": true,
    "importPath": "videojs-record/js/plugins/vmsg-plugin.js",
    "importStyle": "VmsgEngine",
    "description": "Audio-only engine for the vmsg library.",
    "lineNumber": 18,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": ""
      },
      {
        "tagName": "@augments",
        "tagValue": "videojs.RecordEngine"
      }
    ],
    "interface": false,
    "extends": [
      "RecordEngine"
    ]
  },
  {
    "__docId__": 321,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "js/plugins/vmsg-plugin.js~VmsgEngine",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/plugins/vmsg-plugin.js~VmsgEngine#constructor",
    "access": "public",
    "description": "Creates an instance of this class.",
    "lineNumber": 28,
    "params": [
      {
        "nullable": null,
        "types": [
          "Player"
        ],
        "spread": false,
        "optional": false,
        "name": "player",
        "description": "The `Player` that this class should be attached to."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "The key/value store of player options."
      }
    ]
  },
  {
    "__docId__": 322,
    "kind": "member",
    "name": "debug",
    "memberof": "js/plugins/vmsg-plugin.js~VmsgEngine",
    "static": false,
    "longname": "js/plugins/vmsg-plugin.js~VmsgEngine#debug",
    "access": "public",
    "description": "Enables console logging for debugging purposes.",
    "lineNumber": 36,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 323,
    "kind": "member",
    "name": "audioWebAssemblyURL",
    "memberof": "js/plugins/vmsg-plugin.js~VmsgEngine",
    "static": false,
    "longname": "js/plugins/vmsg-plugin.js~VmsgEngine#audioWebAssemblyURL",
    "access": "public",
    "description": "Path to `vmsg.wasm` WebAssembly script.",
    "lineNumber": 42,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 324,
    "kind": "member",
    "name": "pluginLibraryOptions",
    "memberof": "js/plugins/vmsg-plugin.js~VmsgEngine",
    "static": false,
    "longname": "js/plugins/vmsg-plugin.js~VmsgEngine#pluginLibraryOptions",
    "access": "public",
    "description": "Additional configuration options for the vmsg library.",
    "lineNumber": 48,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 325,
    "kind": "method",
    "name": "setup",
    "memberof": "js/plugins/vmsg-plugin.js~VmsgEngine",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/plugins/vmsg-plugin.js~VmsgEngine#setup",
    "access": "public",
    "description": "Setup recording engine.",
    "lineNumber": 60,
    "params": [
      {
        "nullable": null,
        "types": [
          "LocalMediaStream"
        ],
        "spread": false,
        "optional": false,
        "name": "stream",
        "description": "Media stream to record."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "mediaType",
        "description": "Object describing the media type of this\n    engine."
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "debug",
        "description": "Indicating whether or not debug messages should\n    be printed in the console."
      }
    ],
    "return": null
  },
  {
    "__docId__": 326,
    "kind": "member",
    "name": "inputStream",
    "memberof": "js/plugins/vmsg-plugin.js~VmsgEngine",
    "static": false,
    "longname": "js/plugins/vmsg-plugin.js~VmsgEngine#inputStream",
    "access": "public",
    "description": null,
    "lineNumber": 61,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 327,
    "kind": "member",
    "name": "mediaType",
    "memberof": "js/plugins/vmsg-plugin.js~VmsgEngine",
    "static": false,
    "longname": "js/plugins/vmsg-plugin.js~VmsgEngine#mediaType",
    "access": "public",
    "description": null,
    "lineNumber": 62,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 329,
    "kind": "member",
    "name": "config",
    "memberof": "js/plugins/vmsg-plugin.js~VmsgEngine",
    "static": false,
    "longname": "js/plugins/vmsg-plugin.js~VmsgEngine#config",
    "access": "public",
    "description": null,
    "lineNumber": 66,
    "undocument": true,
    "type": {
      "types": [
        "{\"wasmURL\": *}"
      ]
    }
  },
  {
    "__docId__": 331,
    "kind": "member",
    "name": "engine",
    "memberof": "js/plugins/vmsg-plugin.js~VmsgEngine",
    "static": false,
    "longname": "js/plugins/vmsg-plugin.js~VmsgEngine#engine",
    "access": "public",
    "description": null,
    "lineNumber": 73,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 332,
    "kind": "member",
    "name": "audioContext",
    "memberof": "js/plugins/vmsg-plugin.js~VmsgEngine",
    "static": false,
    "longname": "js/plugins/vmsg-plugin.js~VmsgEngine#audioContext",
    "access": "public",
    "description": null,
    "lineNumber": 78,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 333,
    "kind": "member",
    "name": "audioSourceNode",
    "memberof": "js/plugins/vmsg-plugin.js~VmsgEngine",
    "static": false,
    "longname": "js/plugins/vmsg-plugin.js~VmsgEngine#audioSourceNode",
    "access": "public",
    "description": null,
    "lineNumber": 80,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 334,
    "kind": "member",
    "name": "processor",
    "memberof": "js/plugins/vmsg-plugin.js~VmsgEngine",
    "static": false,
    "longname": "js/plugins/vmsg-plugin.js~VmsgEngine#processor",
    "access": "public",
    "description": null,
    "lineNumber": 83,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 335,
    "kind": "method",
    "name": "start",
    "memberof": "js/plugins/vmsg-plugin.js~VmsgEngine",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/plugins/vmsg-plugin.js~VmsgEngine#start",
    "access": "public",
    "description": "Start recording.",
    "lineNumber": 96,
    "params": [],
    "return": null
  },
  {
    "__docId__": 336,
    "kind": "method",
    "name": "stop",
    "memberof": "js/plugins/vmsg-plugin.js~VmsgEngine",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/plugins/vmsg-plugin.js~VmsgEngine#stop",
    "access": "public",
    "description": "Stop recording.",
    "lineNumber": 114,
    "params": [],
    "return": null
  },
  {
    "__docId__": 337,
    "kind": "method",
    "name": "destroy",
    "memberof": "js/plugins/vmsg-plugin.js~VmsgEngine",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/plugins/vmsg-plugin.js~VmsgEngine#destroy",
    "access": "public",
    "description": "Destroy engine.",
    "lineNumber": 127,
    "params": [],
    "return": null
  },
  {
    "__docId__": 338,
    "kind": "method",
    "name": "onAudioProcess",
    "memberof": "js/plugins/vmsg-plugin.js~VmsgEngine",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/plugins/vmsg-plugin.js~VmsgEngine#onAudioProcess",
    "access": "private",
    "description": "Continuous encoding of audio data.",
    "lineNumber": 138,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": "Audio buffer."
      }
    ],
    "return": null
  },
  {
    "__docId__": 339,
    "kind": "method",
    "name": "onRecordingAvailable",
    "memberof": "js/plugins/vmsg-plugin.js~VmsgEngine",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/plugins/vmsg-plugin.js~VmsgEngine#onRecordingAvailable",
    "access": "private",
    "description": "",
    "lineNumber": 146,
    "params": [],
    "return": null
  },
  {
    "__docId__": 340,
    "kind": "file",
    "name": "js/plugins/webm-wasm-plugin.js",
    "content": "/**\r\n * @file webm-wasm-plugin.js\r\n * @since 3.5.0\r\n */\r\n\r\nimport videojs from 'video.js';\r\nimport RecordRTC from 'recordrtc';\r\n\r\nconst RecordRTCEngine = videojs.getComponent('RecordRTCEngine');\r\n\r\n/**\r\n * Video engine plugin for the webm-wasm library.\r\n *\r\n * @class\r\n * @augments videojs.RecordRTCEngine\r\n */\r\nclass WebmWasmEngine extends RecordRTCEngine {\r\n    /**\r\n     * Creates an instance of this class.\r\n     *\r\n     * @param  {Player} player\r\n     *         The `Player` that this class should be attached to.\r\n     *\r\n     * @param  {Object} [options]\r\n     *         The key/value store of player options.\r\n     */\r\n    constructor(player, options) {\r\n        super(player, options);\r\n\r\n        /**\r\n         * Enables console logging for debugging purposes.\r\n         *\r\n         * @type {boolean}\r\n         */\r\n        this.debug = false;\r\n        /**\r\n         * Video bitrate in kbps.\r\n         *\r\n         * @type {number}\r\n         */\r\n        this.videoBitRate = 1200;\r\n        /**\r\n         * Video frame rate in fps.\r\n         *\r\n         * @type {number}\r\n         */\r\n        this.videoFrameRate = 30;\r\n        /**\r\n         * Path to `webm-worker.js` worker script.\r\n         *\r\n         * @type {string}\r\n         */\r\n        this.videoWorkerURL = 'webm-worker.js';\r\n        /**\r\n         * Path to `webm-wasm.wasm` WebAssembly script.\r\n         *\r\n         * @type {string}\r\n         */\r\n        this.videoWebAssemblyURL = 'webm-wasm.wasm';\r\n    }\r\n\r\n    /**\r\n     * Setup recording engine.\r\n     *\r\n     * @param {LocalMediaStream} stream - Media stream to record.\r\n     * @param {Object} mediaType - Object describing the media type of this\r\n     *     engine.\r\n     * @param {Boolean} debug - Indicating whether or not debug messages should\r\n     *     be printed in the console.\r\n     */\r\n    setup(stream, mediaType, debug) {\r\n        // set options\r\n        this.recorderType = RecordRTC.WebAssemblyRecorder;\r\n        this.workerPath = this.videoWorkerURL;\r\n        this.bitRate = this.videoBitRate;\r\n        this.frameRate = this.videoFrameRate;\r\n\r\n        super.setup(stream, mediaType, debug);\r\n    }\r\n}\r\n\r\n// expose plugin\r\nvideojs.WebmWasmEngine = WebmWasmEngine;\r\n\r\nexport default WebmWasmEngine;\r\n",
    "static": true,
    "longname": "C:/Users/Thijs/projects/videojs-record/src/js/plugins/webm-wasm-plugin.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 341,
    "kind": "variable",
    "name": "RecordRTCEngine",
    "memberof": "js/plugins/webm-wasm-plugin.js",
    "static": true,
    "longname": "js/plugins/webm-wasm-plugin.js~RecordRTCEngine",
    "access": "public",
    "export": false,
    "importPath": "videojs-record/js/plugins/webm-wasm-plugin.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 342,
    "kind": "class",
    "name": "WebmWasmEngine",
    "memberof": "js/plugins/webm-wasm-plugin.js",
    "static": true,
    "longname": "js/plugins/webm-wasm-plugin.js~WebmWasmEngine",
    "access": "public",
    "export": true,
    "importPath": "videojs-record/js/plugins/webm-wasm-plugin.js",
    "importStyle": "WebmWasmEngine",
    "description": "Video engine plugin for the webm-wasm library.",
    "lineNumber": 17,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": ""
      },
      {
        "tagName": "@augments",
        "tagValue": "videojs.RecordRTCEngine"
      }
    ],
    "interface": false,
    "extends": [
      "RecordRTCEngine"
    ]
  },
  {
    "__docId__": 343,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "js/plugins/webm-wasm-plugin.js~WebmWasmEngine",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/plugins/webm-wasm-plugin.js~WebmWasmEngine#constructor",
    "access": "public",
    "description": "Creates an instance of this class.",
    "lineNumber": 27,
    "params": [
      {
        "nullable": null,
        "types": [
          "Player"
        ],
        "spread": false,
        "optional": false,
        "name": "player",
        "description": "The `Player` that this class should be attached to."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "The key/value store of player options."
      }
    ]
  },
  {
    "__docId__": 344,
    "kind": "member",
    "name": "debug",
    "memberof": "js/plugins/webm-wasm-plugin.js~WebmWasmEngine",
    "static": false,
    "longname": "js/plugins/webm-wasm-plugin.js~WebmWasmEngine#debug",
    "access": "public",
    "description": "Enables console logging for debugging purposes.",
    "lineNumber": 35,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 345,
    "kind": "member",
    "name": "videoBitRate",
    "memberof": "js/plugins/webm-wasm-plugin.js~WebmWasmEngine",
    "static": false,
    "longname": "js/plugins/webm-wasm-plugin.js~WebmWasmEngine#videoBitRate",
    "access": "public",
    "description": "Video bitrate in kbps.",
    "lineNumber": 41,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 346,
    "kind": "member",
    "name": "videoFrameRate",
    "memberof": "js/plugins/webm-wasm-plugin.js~WebmWasmEngine",
    "static": false,
    "longname": "js/plugins/webm-wasm-plugin.js~WebmWasmEngine#videoFrameRate",
    "access": "public",
    "description": "Video frame rate in fps.",
    "lineNumber": 47,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 347,
    "kind": "member",
    "name": "videoWorkerURL",
    "memberof": "js/plugins/webm-wasm-plugin.js~WebmWasmEngine",
    "static": false,
    "longname": "js/plugins/webm-wasm-plugin.js~WebmWasmEngine#videoWorkerURL",
    "access": "public",
    "description": "Path to `webm-worker.js` worker script.",
    "lineNumber": 53,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 348,
    "kind": "member",
    "name": "videoWebAssemblyURL",
    "memberof": "js/plugins/webm-wasm-plugin.js~WebmWasmEngine",
    "static": false,
    "longname": "js/plugins/webm-wasm-plugin.js~WebmWasmEngine#videoWebAssemblyURL",
    "access": "public",
    "description": "Path to `webm-wasm.wasm` WebAssembly script.",
    "lineNumber": 59,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 349,
    "kind": "method",
    "name": "setup",
    "memberof": "js/plugins/webm-wasm-plugin.js~WebmWasmEngine",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/plugins/webm-wasm-plugin.js~WebmWasmEngine#setup",
    "access": "public",
    "description": "Setup recording engine.",
    "lineNumber": 71,
    "params": [
      {
        "nullable": null,
        "types": [
          "LocalMediaStream"
        ],
        "spread": false,
        "optional": false,
        "name": "stream",
        "description": "Media stream to record."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "mediaType",
        "description": "Object describing the media type of this\n    engine."
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "debug",
        "description": "Indicating whether or not debug messages should\n    be printed in the console."
      }
    ],
    "return": null
  },
  {
    "__docId__": 350,
    "kind": "member",
    "name": "recorderType",
    "memberof": "js/plugins/webm-wasm-plugin.js~WebmWasmEngine",
    "static": false,
    "longname": "js/plugins/webm-wasm-plugin.js~WebmWasmEngine#recorderType",
    "access": "public",
    "description": null,
    "lineNumber": 73,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 351,
    "kind": "member",
    "name": "workerPath",
    "memberof": "js/plugins/webm-wasm-plugin.js~WebmWasmEngine",
    "static": false,
    "longname": "js/plugins/webm-wasm-plugin.js~WebmWasmEngine#workerPath",
    "access": "public",
    "description": null,
    "lineNumber": 74,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 352,
    "kind": "member",
    "name": "bitRate",
    "memberof": "js/plugins/webm-wasm-plugin.js~WebmWasmEngine",
    "static": false,
    "longname": "js/plugins/webm-wasm-plugin.js~WebmWasmEngine#bitRate",
    "access": "public",
    "description": null,
    "lineNumber": 75,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 353,
    "kind": "member",
    "name": "frameRate",
    "memberof": "js/plugins/webm-wasm-plugin.js~WebmWasmEngine",
    "static": false,
    "longname": "js/plugins/webm-wasm-plugin.js~WebmWasmEngine#frameRate",
    "access": "public",
    "description": null,
    "lineNumber": 76,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 354,
    "kind": "file",
    "name": "js/utils/browser-shim.js",
    "content": "/**\r\n * @file browser-shim.js\r\n * @since 2.0.0\r\n */\r\n\r\nconst setSrcObject = function (stream, element) {\r\n    if ('srcObject' in element) {\r\n        element.srcObject = stream;\r\n    } else if ('mozSrcObject' in element) {\r\n        element.mozSrcObject = stream;\r\n    } else {\r\n        element.srcObject = stream;\r\n    }\r\n};\r\n\r\nexport default setSrcObject;\r\n",
    "static": true,
    "longname": "C:/Users/Thijs/projects/videojs-record/src/js/utils/browser-shim.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 355,
    "kind": "function",
    "name": "setSrcObject",
    "memberof": "js/utils/browser-shim.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/utils/browser-shim.js~setSrcObject",
    "access": "public",
    "export": true,
    "importPath": "videojs-record/js/utils/browser-shim.js",
    "importStyle": "setSrcObject",
    "description": "",
    "lineNumber": 6,
    "since": "2.0.0",
    "unknown": [
      {
        "tagName": "@file",
        "tagValue": "browser-shim.js"
      }
    ],
    "params": [
      {
        "name": "stream",
        "types": [
          "*"
        ]
      },
      {
        "name": "element",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 356,
    "kind": "file",
    "name": "js/utils/compare-version.js",
    "content": "/**\r\n * @file compare-version.js\r\n * @since 3.8.0\r\n */\r\n\r\n/**\r\n * Compare 2 version number strings.\r\n *\r\n * @param {string} v1 - First version number to compare.\r\n * @param {string} v2 - Second version number to compare.\r\n * @returns {number} - Returns 0 if versions are equal,\r\n *     1 if `v1` is greater, and -1 if `v2` is smaller.\r\n */\r\nconst compareVersion = function(v1, v2) {\r\n    if (typeof v1 !== 'string') return false;\r\n    if (typeof v2 !== 'string') return false;\r\n    v1 = v1.split('.');\r\n    v2 = v2.split('.');\r\n    const k = Math.min(v1.length, v2.length);\r\n    let i = 0;\r\n    for (i; i < k; ++ i) {\r\n        // buddy ignore:start\r\n        v1[i] = parseInt(v1[i], 10);\r\n        v2[i] = parseInt(v2[i], 10);\r\n        // buddy ignore:end\r\n        if (v1[i] > v2[i]) return 1;\r\n        if (v1[i] < v2[i]) return -1;\r\n    }\r\n    return v1.length === v2.length ? 0 : (v1.length < v2.length ? -1 : 1);\r\n};\r\n\r\nexport default compareVersion;\r\n",
    "static": true,
    "longname": "C:/Users/Thijs/projects/videojs-record/src/js/utils/compare-version.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 357,
    "kind": "function",
    "name": "compareVersion",
    "memberof": "js/utils/compare-version.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/utils/compare-version.js~compareVersion",
    "access": "public",
    "export": true,
    "importPath": "videojs-record/js/utils/compare-version.js",
    "importStyle": "compareVersion",
    "description": "Compare 2 version number strings.",
    "lineNumber": 14,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} - Returns 0 if versions are equal,\n    1 if `v1` is greater, and -1 if `v2` is smaller."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "v1",
        "description": "First version number to compare."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "v2",
        "description": "Second version number to compare."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "Returns 0 if versions are equal,\n    1 if `v1` is greater, and -1 if `v2` is smaller."
    }
  },
  {
    "__docId__": 358,
    "kind": "file",
    "name": "js/utils/detect-browser.js",
    "content": "/**\r\n * @file detect-browser.js\r\n * @since 2.0.0\r\n */\r\n\r\nimport window from 'global/window';\r\n\r\n/**\r\n * Browser detector.\r\n *\r\n * @private\r\n * @return {object} result containing browser, version and minVersion\r\n *     properties.\r\n */\r\nconst detectBrowser = function() {\r\n    // returned result object\r\n    let result = {};\r\n    result.browser = null;\r\n    result.version = null;\r\n    result.minVersion = null;\r\n\r\n    // fail early if it's not a browser\r\n    if (typeof window === 'undefined' || !window.navigator) {\r\n        result.browser = 'Not a supported browser.';\r\n        return result;\r\n    }\r\n\r\n    if (navigator.mozGetUserMedia) { // Firefox.\r\n        result.browser = 'firefox';\r\n        result.version = extractVersion(navigator.userAgent,\r\n            /Firefox\\/(\\d+)\\./, 1);\r\n        result.minVersion = 31;\r\n    } else if (navigator.webkitGetUserMedia) {\r\n        // Chrome, Chromium, Webview, Opera.\r\n        // Version matches Chrome/WebRTC version.\r\n        result.browser = 'chrome';\r\n        result.version = extractVersion(navigator.userAgent,\r\n            /Chrom(e|ium)\\/(\\d+)\\./, 2); // buddy ignore:line\r\n        result.minVersion = 38;\r\n    } else if (navigator.mediaDevices &&\r\n               navigator.userAgent.match(/Edge\\/(\\d+).(\\d+)$/)) { // Edge.\r\n        result.browser = 'edge';\r\n        result.version = extractVersion(navigator.userAgent,\r\n            /Edge\\/(\\d+).(\\d+)$/, 2); // buddy ignore:line\r\n        result.minVersion = 10547;\r\n    } else if (window.RTCPeerConnection &&\r\n        navigator.userAgent.match(/AppleWebKit\\/(\\d+)\\./)) { // Safari.\r\n        result.browser = 'safari';\r\n        result.version = extractVersion(navigator.userAgent,\r\n            /AppleWebKit\\/(\\d+)\\./, 1);\r\n    } else {\r\n        // Default fallthrough: not supported.\r\n        result.browser = 'Not a supported browser.';\r\n        return result;\r\n    }\r\n\r\n    return result;\r\n};\r\n\r\n/**\r\n * Extract browser version out of the provided user agent string.\r\n *\r\n * @private\r\n * @param {!string} uastring - userAgent string.\r\n * @param {!string} expr - Regular expression used as match criteria.\r\n * @param {!number} pos - position in the version string to be\r\n *     returned.\r\n * @return {!number} browser version.\r\n */\r\nconst extractVersion = function(uastring, expr, pos) {\r\n    let match = uastring.match(expr);\r\n    return match && match.length >= pos && parseInt(match[pos], 10); // buddy ignore:line\r\n};\r\n\r\nconst isEdge = function() {\r\n    return detectBrowser().browser === 'edge';\r\n};\r\n\r\nconst isSafari = function() {\r\n    return detectBrowser().browser === 'safari';\r\n};\r\n\r\nconst isOpera = function() {\r\n    return !!window.opera || navigator.userAgent.indexOf('OPR/') !== -1;\r\n};\r\n\r\nconst isChrome = function() {\r\n    return detectBrowser().browser === 'chrome';\r\n};\r\n\r\nconst isFirefox = function() {\r\n    return detectBrowser().browser === 'firefox';\r\n};\r\n\r\nexport {\r\n    detectBrowser, isEdge, isOpera, isChrome, isSafari, isFirefox\r\n};\r\n",
    "static": true,
    "longname": "C:/Users/Thijs/projects/videojs-record/src/js/utils/detect-browser.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 359,
    "kind": "function",
    "name": "extractVersion",
    "memberof": "js/utils/detect-browser.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/utils/detect-browser.js~extractVersion",
    "access": "private",
    "export": false,
    "importPath": "videojs-record/js/utils/detect-browser.js",
    "importStyle": null,
    "description": "Extract browser version out of the provided user agent string.",
    "lineNumber": 70,
    "params": [
      {
        "nullable": false,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "uastring",
        "description": "userAgent string."
      },
      {
        "nullable": false,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "expr",
        "description": "Regular expression used as match criteria."
      },
      {
        "nullable": false,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pos",
        "description": "position in the version string to be\n    returned."
      }
    ],
    "return": {
      "nullable": false,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "browser version."
    },
    "ignore": true
  },
  {
    "__docId__": 360,
    "kind": "function",
    "name": "detectBrowser",
    "memberof": "js/utils/detect-browser.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/utils/detect-browser.js~detectBrowser",
    "access": "private",
    "export": true,
    "importPath": "videojs-record/js/utils/detect-browser.js",
    "importStyle": "{detectBrowser}",
    "description": "Browser detector.",
    "lineNumber": 15,
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "result containing browser, version and minVersion\n    properties."
    },
    "params": []
  },
  {
    "__docId__": 361,
    "kind": "function",
    "name": "isEdge",
    "memberof": "js/utils/detect-browser.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/utils/detect-browser.js~isEdge",
    "access": "public",
    "export": true,
    "importPath": "videojs-record/js/utils/detect-browser.js",
    "importStyle": "{isEdge}",
    "description": null,
    "lineNumber": 75,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 362,
    "kind": "function",
    "name": "isOpera",
    "memberof": "js/utils/detect-browser.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/utils/detect-browser.js~isOpera",
    "access": "public",
    "export": true,
    "importPath": "videojs-record/js/utils/detect-browser.js",
    "importStyle": "{isOpera}",
    "description": null,
    "lineNumber": 83,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 363,
    "kind": "function",
    "name": "isChrome",
    "memberof": "js/utils/detect-browser.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/utils/detect-browser.js~isChrome",
    "access": "public",
    "export": true,
    "importPath": "videojs-record/js/utils/detect-browser.js",
    "importStyle": "{isChrome}",
    "description": null,
    "lineNumber": 87,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 364,
    "kind": "function",
    "name": "isSafari",
    "memberof": "js/utils/detect-browser.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/utils/detect-browser.js~isSafari",
    "access": "public",
    "export": true,
    "importPath": "videojs-record/js/utils/detect-browser.js",
    "importStyle": "{isSafari}",
    "description": null,
    "lineNumber": 79,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 365,
    "kind": "function",
    "name": "isFirefox",
    "memberof": "js/utils/detect-browser.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/utils/detect-browser.js~isFirefox",
    "access": "public",
    "export": true,
    "importPath": "videojs-record/js/utils/detect-browser.js",
    "importStyle": "{isFirefox}",
    "description": null,
    "lineNumber": 91,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 366,
    "kind": "file",
    "name": "js/utils/file-util.js",
    "content": "/**\r\n * @file file-util.js\r\n * @since 3.3.0\r\n */\r\n\r\nimport getExtension from './mime';\r\n\r\n/**\r\n * Download `Blob` object in browser.\r\n *\r\n * @param {string} fileName - Name for the file to download.\r\n * @param {blob} data - File data.\r\n * @returns {void}\r\n * @private\r\n */\r\nconst downloadBlob = function(fileName, data) {\r\n    if (typeof navigator.msSaveOrOpenBlob !== 'undefined') {\r\n        return navigator.msSaveOrOpenBlob(data, fileName);\r\n    } else if (typeof navigator.msSaveBlob !== 'undefined') {\r\n        return navigator.msSaveBlob(data, fileName);\r\n    }\r\n\r\n    let hyperlink = document.createElement('a');\r\n    hyperlink.href = URL.createObjectURL(data);\r\n    hyperlink.download = fileName;\r\n\r\n    hyperlink.style = 'display:none;opacity:0;color:transparent;';\r\n    (document.body || document.documentElement).appendChild(hyperlink);\r\n\r\n    if (typeof hyperlink.click === 'function') {\r\n        hyperlink.click();\r\n    } else {\r\n        hyperlink.target = '_blank';\r\n        hyperlink.dispatchEvent(new MouseEvent('click', {\r\n            view: window,\r\n            bubbles: true,\r\n            cancelable: true\r\n        }));\r\n    }\r\n\r\n    URL.revokeObjectURL(hyperlink.href);\r\n};\r\n\r\n/**\r\n * Read `Blob` as `ArrayBuffer`.\r\n *\r\n * @param {(Blob|File)} fileObj - `Blob` or `File` object to read.\r\n * @returns {void}\r\n * @private\r\n */\r\nconst blobToArrayBuffer = function(fileObj) {\r\n    return new Promise((resolve, reject) => {\r\n        const reader = new FileReader();\r\n        reader.onloadend = () => {\r\n            resolve(reader.result);\r\n        };\r\n        reader.onerror = (ev) => {\r\n            reject(ev.error);\r\n        };\r\n        reader.readAsArrayBuffer(fileObj);\r\n    });\r\n};\r\n\r\n/**\r\n * Add filename and modification date to recorded file object.\r\n *\r\n * @param {(Blob|File)} fileObj - `Blob` or `File` object to modify.\r\n * @param {date} [dateObj] - Optional modification date information.\r\n *     Default is `new Date()`.\r\n * @param {string} [fileExtension] - Optional file extension to use.\r\n *     By default the file extension is automatically determined using\r\n *     the mime-type.\r\n * @private\r\n */\r\nconst addFileInfo = function(fileObj, dateObj, fileExtension) {\r\n    if (fileObj instanceof Blob || fileObj instanceof File) {\r\n        // set modification date\r\n        if (dateObj === undefined) {\r\n            dateObj = new Date();\r\n        }\r\n        try {\r\n            fileObj.lastModified = dateObj.getTime();\r\n            fileObj.lastModifiedDate = dateObj;\r\n        } catch (e) {\r\n            if (e instanceof TypeError) {\r\n                // ignore: setting getter-only property \"lastModifiedDate\"\r\n            } else {\r\n                // re-raise error\r\n                throw e;\r\n            }\r\n        }\r\n\r\n        // file extension\r\n        if (fileExtension === undefined) {\r\n            // determine file extension using mime type, e.g. audio/ogg,\r\n            // but any extension is valid here. Browsers also accept\r\n            // extended mime types like video/webm;codecs=h264,vp9,opus\r\n            fileExtension = '.' + getExtension(fileObj.type);\r\n        }\r\n\r\n        // use timestamp in filename, e.g. 1451180941326.ogg\r\n        try {\r\n            fileObj.name = dateObj.getTime() + fileExtension;\r\n        } catch (e) {\r\n            if (e instanceof TypeError) {\r\n                // ignore: setting getter-only property \"name\"\r\n            } else {\r\n                // re-raise error\r\n                throw e;\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\nexport {\r\n    downloadBlob, blobToArrayBuffer, addFileInfo\r\n};",
    "static": true,
    "longname": "C:/Users/Thijs/projects/videojs-record/src/js/utils/file-util.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 367,
    "kind": "function",
    "name": "downloadBlob",
    "memberof": "js/utils/file-util.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/utils/file-util.js~downloadBlob",
    "access": "private",
    "export": true,
    "importPath": "videojs-record/js/utils/file-util.js",
    "importStyle": "{downloadBlob}",
    "description": "Download `Blob` object in browser.",
    "lineNumber": 16,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "fileName",
        "description": "Name for the file to download."
      },
      {
        "nullable": null,
        "types": [
          "blob"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "File data."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 368,
    "kind": "function",
    "name": "blobToArrayBuffer",
    "memberof": "js/utils/file-util.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/utils/file-util.js~blobToArrayBuffer",
    "access": "private",
    "export": true,
    "importPath": "videojs-record/js/utils/file-util.js",
    "importStyle": "{blobToArrayBuffer}",
    "description": "Read `Blob` as `ArrayBuffer`.",
    "lineNumber": 51,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Blob",
          "File"
        ],
        "spread": false,
        "optional": false,
        "name": "fileObj",
        "description": "`Blob` or `File` object to read."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 369,
    "kind": "function",
    "name": "addFileInfo",
    "memberof": "js/utils/file-util.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/utils/file-util.js~addFileInfo",
    "access": "private",
    "export": true,
    "importPath": "videojs-record/js/utils/file-util.js",
    "importStyle": "{addFileInfo}",
    "description": "Add filename and modification date to recorded file object.",
    "lineNumber": 75,
    "params": [
      {
        "nullable": null,
        "types": [
          "Blob",
          "File"
        ],
        "spread": false,
        "optional": false,
        "name": "fileObj",
        "description": "`Blob` or `File` object to modify."
      },
      {
        "nullable": null,
        "types": [
          "date"
        ],
        "spread": false,
        "optional": true,
        "name": "dateObj",
        "description": "Optional modification date information.\n    Default is `new Date()`."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "fileExtension",
        "description": "Optional file extension to use.\n    By default the file extension is automatically determined using\n    the mime-type."
      }
    ],
    "return": null
  },
  {
    "__docId__": 370,
    "kind": "file",
    "name": "js/utils/format-time.js",
    "content": "/**\r\n * @file format-time.js\r\n * @since 2.0.0\r\n */\r\n\r\nimport parseMilliseconds from 'parse-ms';\r\nimport addZero from 'add-zero';\r\n\r\n/**\r\n * Format seconds as a duration string.\r\n *\r\n * Either formatted as:\r\n *\r\n * - DD:HH:MM:SS (> 24 hours)\r\n * - HH:MM:SS (> 1 hour)\r\n * - MM:SS:MSS (`displayMilliseconds = true`)\r\n * - MM:SS (`displayMilliseconds = false`)\r\n *\r\n * Supplying a guide (in seconds) will force a number of leading zeros\r\n * to cover the length of the guide.\r\n *\r\n * @param {number} seconds - Number of seconds to be turned into a\r\n *     string.\r\n * @param {number} guide - Number (in seconds) to model the string after.\r\n * @param {boolean} displayMilliseconds - Display milliseconds or not.\r\n * @return {string} Formatted duration time, e.g '00:12:653'.\r\n * @private\r\n */\r\nconst formatTime = function(seconds, guide, displayMilliseconds = false) {\r\n    // buddy ignore:start\r\n    seconds = seconds < 0 ? 0 : seconds;\r\n    if (isNaN(seconds) || seconds === Infinity) {\r\n        seconds = 0;\r\n    }\r\n    const inputTime = parseMilliseconds(seconds * 1000);\r\n    let guideTime = inputTime;\r\n    if (guide !== undefined) {\r\n        guideTime = parseMilliseconds(guide * 1000);\r\n    }\r\n    const hr = addZero(inputTime.hours);\r\n    const min = addZero(inputTime.minutes);\r\n    const sec = addZero(inputTime.seconds);\r\n    const ms = addZero(inputTime.milliseconds, 3);\r\n\r\n    if (inputTime.days > 0 || guideTime.days > 0) {\r\n        const day = addZero(inputTime.days);\r\n        return `${day}:${hr}:${min}:${sec}`;\r\n    }\r\n    if (inputTime.hours > 0 || guideTime.hours > 0) {\r\n        return `${hr}:${min}:${sec}`;\r\n    }\r\n    if (displayMilliseconds) {\r\n        return `${min}:${sec}:${ms}`;\r\n    }\r\n\r\n    return `${min}:${sec}`;\r\n    // buddy ignore:end\r\n};\r\n\r\nexport default formatTime;\r\n",
    "static": true,
    "longname": "C:/Users/Thijs/projects/videojs-record/src/js/utils/format-time.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 371,
    "kind": "function",
    "name": "formatTime",
    "memberof": "js/utils/format-time.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/utils/format-time.js~formatTime",
    "access": "private",
    "export": true,
    "importPath": "videojs-record/js/utils/format-time.js",
    "importStyle": "formatTime",
    "description": "Format seconds as a duration string.\n\nEither formatted as:\n\n- DD:HH:MM:SS (> 24 hours)\n- HH:MM:SS (> 1 hour)\n- MM:SS:MSS (`displayMilliseconds = true`)\n- MM:SS (`displayMilliseconds = false`)\n\nSupplying a guide (in seconds) will force a number of leading zeros\nto cover the length of the guide.",
    "lineNumber": 29,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "seconds",
        "description": "Number of seconds to be turned into a\n    string."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "guide",
        "description": "Number (in seconds) to model the string after."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "displayMilliseconds",
        "description": "Display milliseconds or not."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "Formatted duration time, e.g '00:12:653'."
    }
  },
  {
    "__docId__": 372,
    "kind": "file",
    "name": "js/utils/mime.js",
    "content": "/**\r\n * @file mime.js\r\n * @since 4.0.0\r\n */\r\n\r\nconst EXTRACT_TYPE_REGEXP = /^\\s*([^;\\s]*)(?:;|\\s|$)/;\r\n\r\n/**\r\n * Mimetypes\r\n * @enum\r\n */\r\nconst Mimetypes = {\r\n    'video/ogg': 'ogv',\r\n    'video/mp4': 'mp4',\r\n    'video/x-matroska': 'mkv',\r\n    'video/webm': 'webm',\r\n    'audio/mp4': 'm4a',\r\n    'audio/mpeg': 'mp3',\r\n    'audio/aac': 'aac',\r\n    'audio/flac': 'flac',\r\n    'audio/ogg': 'oga',\r\n    'audio/wav': 'wav',\r\n    'audio/webm': 'webm',\r\n    'application/x-mpegURL': 'm3u8',\r\n    'image/jpeg': 'jpg',\r\n    'image/gif': 'gif',\r\n    'image/png': 'png',\r\n    'image/svg+xml': 'svg',\r\n    'image/webp': 'webp'\r\n};\r\n\r\n/**\r\n * Get file extension for mime-type.\r\n *\r\n * @param {string} mimeType - Mime-type to match against.\r\n * @returns {string} File extension.\r\n * @private\r\n */\r\nconst getExtension = function(mimeType) {\r\n    const match = EXTRACT_TYPE_REGEXP.exec(mimeType);\r\n    const result = match && match[1].toLowerCase();\r\n    return Mimetypes[result];\r\n};\r\n\r\nexport default getExtension;\r\n",
    "static": true,
    "longname": "C:/Users/Thijs/projects/videojs-record/src/js/utils/mime.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 373,
    "kind": "variable",
    "name": "EXTRACT_TYPE_REGEXP",
    "memberof": "js/utils/mime.js",
    "static": true,
    "longname": "js/utils/mime.js~EXTRACT_TYPE_REGEXP",
    "access": "public",
    "export": false,
    "importPath": "videojs-record/js/utils/mime.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 6,
    "since": "4.0.0",
    "unknown": [
      {
        "tagName": "@file",
        "tagValue": "mime.js"
      }
    ],
    "type": {
      "types": [
        "undefined"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 374,
    "kind": "variable",
    "name": "Mimetypes",
    "memberof": "js/utils/mime.js",
    "static": true,
    "longname": "js/utils/mime.js~Mimetypes",
    "access": "public",
    "export": false,
    "importPath": "videojs-record/js/utils/mime.js",
    "importStyle": null,
    "description": "Mimetypes",
    "lineNumber": 12,
    "unknown": [
      {
        "tagName": "@enum",
        "tagValue": ""
      }
    ],
    "type": {
      "types": [
        "{\"video/ogg\": string, \"video/mp4\": string, \"video/x-matroska\": string, \"video/webm\": string, \"audio/mp4\": string, \"audio/mpeg\": string, \"audio/aac\": string, \"audio/flac\": string, \"audio/ogg\": string, \"audio/wav\": string, \"audio/webm\": string, \"application/x-mpegURL\": string, \"image/jpeg\": string, \"image/gif\": string, \"image/png\": string, \"image/svg+xml\": string, \"image/webp\": string}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 375,
    "kind": "function",
    "name": "getExtension",
    "memberof": "js/utils/mime.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/utils/mime.js~getExtension",
    "access": "private",
    "export": true,
    "importPath": "videojs-record/js/utils/mime.js",
    "importStyle": "getExtension",
    "description": "Get file extension for mime-type.",
    "lineNumber": 39,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} File extension."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "mimeType",
        "description": "Mime-type to match against."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "File extension."
    }
  },
  {
    "__docId__": 376,
    "kind": "file",
    "name": "js/videojs.record.js",
    "content": "/**\r\n * @file videojs.record.js\r\n *\r\n * The main file for the videojs-record project.\r\n * MIT license: https://github.com/collab-project/videojs-record/blob/master/LICENSE\r\n */\r\n\r\nimport videojs from 'video.js';\r\n\r\nimport AnimationDisplay from './controls/animation-display';\r\nimport RecordCanvas from './controls/record-canvas';\r\nimport DeviceButton from './controls/device-button';\r\nimport CameraButton from './controls/camera-button';\r\nimport RecordToggle from './controls/record-toggle';\r\nimport RecordIndicator from './controls/record-indicator';\r\nimport PictureInPictureToggle from './controls/picture-in-picture-toggle';\r\n\r\nimport Event from './event';\r\nimport defaultKeyHandler from './hot-keys';\r\nimport pluginDefaultOptions from './defaults';\r\nimport formatTime from './utils/format-time';\r\nimport setSrcObject from './utils/browser-shim';\r\nimport compareVersion from './utils/compare-version';\r\nimport {detectBrowser} from './utils/detect-browser';\r\n\r\nimport {getAudioEngine, isAudioPluginActive, getVideoEngine, getConvertEngine} from './engine/engine-loader';\r\nimport {IMAGE_ONLY, AUDIO_ONLY, VIDEO_ONLY, AUDIO_VIDEO, AUDIO_SCREEN, ANIMATION, SCREEN_ONLY, getRecorderMode} from './engine/record-mode';\r\n\r\nconst Plugin = videojs.getPlugin('plugin');\r\nconst Player = videojs.getComponent('Player');\r\n\r\nconst AUTO = 'auto';\r\n\r\n/**\r\n * Record audio/video/images using the Video.js player.\r\n *\r\n * @class\r\n * @augments videojs.Plugin\r\n */\r\nclass Record extends Plugin {\r\n    /**\r\n     * The constructor function for the class.\r\n     *\r\n     * @param {(videojs.Player|Object)} player - video.js Player object.\r\n     * @param {Object} options - Player options.\r\n     */\r\n    constructor(player, options) {\r\n        super(player, options);\r\n\r\n        // monkey-patch play (#152)\r\n        Player.prototype.play = function play() {\r\n            let retval = this.techGet_('play');\r\n            // silence errors (unhandled promise from play)\r\n            if (retval !== undefined && typeof retval.then === 'function') {\r\n                retval.then(null, (e) => {});\r\n            }\r\n            return retval;\r\n        };\r\n\r\n        // add plugin style\r\n        player.addClass('vjs-record');\r\n\r\n        // setup plugin options\r\n        this.loadOptions();\r\n\r\n        // (re)set recorder state\r\n        this.resetState();\r\n\r\n        // use custom time format for video.js player\r\n        if (options.formatTime && typeof options.formatTime === 'function') {\r\n            // user-supplied formatTime\r\n            this.setFormatTime(options.formatTime);\r\n        } else {\r\n            // plugin's default formatTime\r\n            this.setFormatTime((seconds, guide) => {\r\n                return formatTime(seconds, guide, this.displayMilliseconds);\r\n            });\r\n        }\r\n\r\n        // add device button with icon based on type\r\n        let deviceIcon = 'av-perm';\r\n        switch (this.getRecordType()) {\r\n            case IMAGE_ONLY:\r\n            case VIDEO_ONLY:\r\n            case ANIMATION:\r\n                deviceIcon = 'video-perm';\r\n                break;\r\n            case AUDIO_ONLY:\r\n                deviceIcon = 'audio-perm';\r\n                break;\r\n            case SCREEN_ONLY:\r\n                deviceIcon = 'screen-perm';\r\n                break;\r\n            case AUDIO_SCREEN:\r\n                deviceIcon = 'sv-perm';\r\n                break;\r\n        }\r\n\r\n        // add custom interface elements\r\n        DeviceButton.prototype.buildCSSClass = () => {\r\n            // use dynamic icon class\r\n            return 'vjs-record vjs-device-button vjs-control vjs-icon-' + deviceIcon;\r\n        };\r\n        player.deviceButton = new DeviceButton(player, options);\r\n        player.addChild(player.deviceButton);\r\n\r\n        // add blinking record indicator\r\n        player.recordIndicator = new RecordIndicator(player, options);\r\n        player.recordIndicator.hide();\r\n        player.addChild(player.recordIndicator);\r\n\r\n        // add canvas for recording and displaying image\r\n        player.recordCanvas = new RecordCanvas(player, options);\r\n        player.recordCanvas.hide();\r\n        player.addChild(player.recordCanvas);\r\n\r\n        // add image for animation display\r\n        player.animationDisplay = new AnimationDisplay(player, options);\r\n        player.animationDisplay.hide();\r\n        player.addChild(player.animationDisplay);\r\n\r\n        // add camera button\r\n        player.cameraButton = new CameraButton(player, options);\r\n        player.cameraButton.hide();\r\n\r\n        // add record toggle button\r\n        player.recordToggle = new RecordToggle(player, options);\r\n        player.recordToggle.hide();\r\n\r\n        // picture-in-picture\r\n        let oldVideoJS = videojs.VERSION === undefined || compareVersion(videojs.VERSION, '7.6.0') === -1;\r\n        if (!('pictureInPictureEnabled' in document)) {\r\n            // no support for picture-in-picture, disable pip\r\n            this.pictureInPicture = false;\r\n        }\r\n        if (this.pictureInPicture === true) {\r\n            if (oldVideoJS) {\r\n                // add picture-in-picture toggle button for older video.js versions\r\n                // in browsers that support PIP\r\n                player.pipToggle = new PictureInPictureToggle(player, options);\r\n                player.pipToggle.hide();\r\n            }\r\n            // define Picture-in-Picture event handlers once\r\n            this.onEnterPiPHandler = this.onEnterPiP.bind(this);\r\n            this.onLeavePiPHandler = this.onLeavePiP.bind(this);\r\n        }\r\n\r\n        // exclude custom UI elements\r\n        if (this.player.options_.controlBar) {\r\n            let customUIElements = ['deviceButton', 'recordIndicator',\r\n                'cameraButton', 'recordToggle'];\r\n            if (player.pipToggle) {\r\n                customUIElements.push('pipToggle');\r\n            }\r\n\r\n            customUIElements.forEach((element) => {\r\n                if (this.player.options_.controlBar[element] !== undefined) {\r\n                    this.player[element].layoutExclude = true;\r\n                    this.player[element].hide();\r\n                }\r\n            });\r\n        }\r\n\r\n        // wait until player ui is ready\r\n        this.player.one(Event.READY, this.setupUI.bind(this));\r\n    }\r\n\r\n    /**\r\n     * Setup plugin options.\r\n     *\r\n     * @param {Object} newOptions - Optional new player options.\r\n     */\r\n    loadOptions(newOptions = {}) {\r\n        let merge;\r\n        if (videojs.obj !== undefined) {\r\n            // video.js v8 and newer\r\n            merge = videojs.obj.merge;\r\n        } else {\r\n            merge = videojs.mergeOptions;\r\n        }\r\n        let recordOptions = merge(pluginDefaultOptions,\r\n            this.player.options_.plugins.record, newOptions);\r\n\r\n        // record settings\r\n        this.recordImage = recordOptions.image;\r\n        this.recordAudio = recordOptions.audio;\r\n        this.recordVideo = recordOptions.video;\r\n        this.recordAnimation = recordOptions.animation;\r\n        this.recordScreen = recordOptions.screen;\r\n        this.maxLength = recordOptions.maxLength;\r\n        this.maxFileSize = recordOptions.maxFileSize;\r\n        this.displayMilliseconds = recordOptions.displayMilliseconds;\r\n        this.debug = recordOptions.debug;\r\n        this.pictureInPicture = recordOptions.pip;\r\n        this.recordTimeSlice = recordOptions.timeSlice;\r\n        this.autoMuteDevice = recordOptions.autoMuteDevice;\r\n        this.pluginLibraryOptions = recordOptions.pluginLibraryOptions;\r\n\r\n        // video/canvas settings\r\n        this.videoFrameWidth = recordOptions.frameWidth;\r\n        this.videoFrameHeight = recordOptions.frameHeight;\r\n        this.videoFrameRate = recordOptions.videoFrameRate;\r\n        this.videoBitRate = recordOptions.videoBitRate;\r\n        this.videoEngine = recordOptions.videoEngine;\r\n        this.videoRecorderType = recordOptions.videoRecorderType;\r\n        this.videoMimeType = recordOptions.videoMimeType;\r\n        this.videoWorkerURL = recordOptions.videoWorkerURL;\r\n        this.videoWebAssemblyURL = recordOptions.videoWebAssemblyURL;\r\n\r\n        // convert settings\r\n        this.convertEngine = recordOptions.convertEngine;\r\n        this.convertAuto = recordOptions.convertAuto;\r\n        this.convertWorkerURL = recordOptions.convertWorkerURL;\r\n        this.convertOptions = recordOptions.convertOptions;\r\n\r\n        // audio settings\r\n        this.audioEngine = recordOptions.audioEngine;\r\n        this.audioRecorderType = recordOptions.audioRecorderType;\r\n        this.audioWorkerURL = recordOptions.audioWorkerURL;\r\n        this.audioWebAssemblyURL = recordOptions.audioWebAssemblyURL;\r\n        this.audioBufferSize = recordOptions.audioBufferSize;\r\n        this.audioSampleRate = recordOptions.audioSampleRate;\r\n        this.audioBitRate = recordOptions.audioBitRate;\r\n        this.audioChannels = recordOptions.audioChannels;\r\n        this.audioMimeType = recordOptions.audioMimeType;\r\n        this.audioBufferUpdate = recordOptions.audioBufferUpdate;\r\n\r\n        // image settings\r\n        this.imageOutputType = recordOptions.imageOutputType;\r\n        this.imageOutputFormat = recordOptions.imageOutputFormat;\r\n        this.imageOutputQuality = recordOptions.imageOutputQuality;\r\n\r\n        // animation settings\r\n        this.animationFrameRate = recordOptions.animationFrameRate;\r\n        this.animationQuality = recordOptions.animationQuality;\r\n    }\r\n\r\n    /**\r\n     * Player UI is ready.\r\n     * @private\r\n     */\r\n    setupUI() {\r\n        // insert custom controls on left-side of controlbar\r\n        this.player.controlBar.addChild(this.player.cameraButton);\r\n        this.player.controlBar.el().insertBefore(\r\n            this.player.cameraButton.el(),\r\n            this.player.controlBar.el().firstChild);\r\n        this.player.controlBar.el().insertBefore(\r\n            this.player.recordToggle.el(),\r\n            this.player.controlBar.el().firstChild);\r\n\r\n        // picture-in-picture\r\n        if (this.pictureInPicture === true) {\r\n            if (this.player.controlBar.pictureInPictureToggle === undefined &&\r\n                this.player.pipToggle !== undefined) {\r\n                // add custom PiP toggle\r\n                this.player.controlBar.addChild(this.player.pipToggle);\r\n            } else if (this.player.controlBar.pictureInPictureToggle !== undefined) {\r\n                // use video.js PiP toggle\r\n                this.player.pipToggle = this.player.controlBar.pictureInPictureToggle;\r\n                this.player.pipToggle.hide();\r\n            }\r\n        } else if (\r\n            this.pictureInPicture === false &&\r\n            this.player.controlBar.pictureInPictureToggle !== undefined) {\r\n            this.player.controlBar.pictureInPictureToggle.hide();\r\n        }\r\n\r\n        // get rid of unused controls\r\n        if (this.player.controlBar.remainingTimeDisplay !== undefined) {\r\n            this.player.controlBar.remainingTimeDisplay.el().style.display = 'none';\r\n        }\r\n        if (this.player.controlBar.liveDisplay !== undefined) {\r\n            this.player.controlBar.liveDisplay.el().style.display = 'none';\r\n        }\r\n\r\n        // loop feature is never used in this plugin\r\n        this.player.loop(false);\r\n\r\n        // tweak player UI based on type\r\n        switch (this.getRecordType()) {\r\n            case AUDIO_ONLY:\r\n                // reference to videojs-wavesurfer plugin\r\n                this.surfer = this.player.wavesurfer();\r\n\r\n                // use same time format as this plugin\r\n                this.surfer.setFormatTime(this._formatTime);\r\n                break;\r\n\r\n            case IMAGE_ONLY:\r\n            case VIDEO_ONLY:\r\n            case AUDIO_VIDEO:\r\n            case ANIMATION:\r\n            case SCREEN_ONLY:\r\n            case AUDIO_SCREEN:\r\n                // customize controls\r\n                if (this.player.bigPlayButton !== undefined) {\r\n                    this.player.bigPlayButton.hide();\r\n                }\r\n\r\n                // 'loadedmetadata' and 'loadstart' events reset the\r\n                // durationDisplay for the first time: prevent this\r\n                this.player.one(Event.LOADEDMETADATA, () => {\r\n                    // display max record time\r\n                    this.setDuration(this.maxLength);\r\n                });\r\n                this.player.one(Event.LOADSTART, () => {\r\n                    // display max record time\r\n                    this.setDuration(this.maxLength);\r\n                });\r\n\r\n                // the native controls don't work for this UI so disable\r\n                // them no matter what\r\n                if (this.player.usingNativeControls_ === true) {\r\n                    if (this.player.tech_.el_ !== undefined) {\r\n                        this.player.tech_.el_.controls = false;\r\n                    }\r\n                }\r\n\r\n                // clicking or tapping the player video element should not try\r\n                // to start playback\r\n                this.player.removeTechControlsListeners_();\r\n\r\n                if (this.player.options_.controls) {\r\n                    // progress control isn't used by this plugin, hide if present\r\n                    if (this.player.controlBar.progressControl !== undefined) {\r\n                        this.player.controlBar.progressControl.hide();\r\n                    }\r\n\r\n                    // prevent controlbar fadeout\r\n                    this.player.on(Event.USERINACTIVE, (event) => {\r\n                        this.player.userActive(true);\r\n                    });\r\n\r\n                    // videojs automatically hides the controls when no valid 'source'\r\n                    // element is included in the video or audio tag. Don't. Ever again.\r\n                    this.player.controlBar.show();\r\n                    this.player.controlBar.el().style.display = 'flex';\r\n                }\r\n                break;\r\n        }\r\n\r\n        // disable time display events that constantly try to reset the current time\r\n        // and duration values\r\n        this.player.off(Event.TIMEUPDATE);\r\n        this.player.off(Event.DURATIONCHANGE);\r\n        this.player.off(Event.LOADEDMETADATA);\r\n        this.player.off(Event.LOADSTART);\r\n        this.player.off(Event.ENDED);\r\n\r\n        // display max record time\r\n        this.setDuration(this.maxLength);\r\n\r\n        // hot keys\r\n        if (this.player.options_.plugins.record &&\r\n            this.player.options_.plugins.record.hotKeys &&\r\n            (this.player.options_.plugins.record.hotKeys !== false)) {\r\n\r\n            let handler = this.player.options_.plugins.record.hotKeys;\r\n            if (handler === true) {\r\n                handler = defaultKeyHandler;\r\n            }\r\n            // enable video.js user action\r\n            this.player.options_.userActions = {\r\n                hotkeys: handler\r\n            };\r\n        }\r\n\r\n        // hide play control (if present)\r\n        if (this.player.controlBar.playToggle !== undefined) {\r\n            this.player.controlBar.playToggle.hide();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Indicates whether the plugin is currently recording or not.\r\n     *\r\n     * @return {boolean} Plugin currently recording or not.\r\n     */\r\n    isRecording() {\r\n        return this._recording;\r\n    }\r\n\r\n    /**\r\n     * Indicates whether the plugin is currently processing recorded data\r\n     * or not.\r\n     *\r\n     * @return {boolean} Plugin processing or not.\r\n     */\r\n    isProcessing() {\r\n        return this._processing;\r\n    }\r\n\r\n    /**\r\n     * Indicates whether the plugin is destroyed or not.\r\n     *\r\n     * @return {boolean} Plugin destroyed or not.\r\n     */\r\n    isDestroyed() {\r\n        let destroyed = (this.player === null);\r\n        if (destroyed === false) {\r\n            destroyed = (this.player.children() === null);\r\n        }\r\n        return destroyed;\r\n    }\r\n\r\n    /**\r\n     * Open the browser's recording device selection dialog and start the\r\n     * device.\r\n     */\r\n    getDevice() {\r\n        // define device callbacks once\r\n        if (this.deviceReadyCallback === undefined) {\r\n            this.deviceReadyCallback = this.onDeviceReady.bind(this);\r\n        }\r\n        if (this.deviceErrorCallback === undefined) {\r\n            this.deviceErrorCallback = this.onDeviceError.bind(this);\r\n        }\r\n        if (this.engineStopCallback === undefined) {\r\n            this.engineStopCallback = this.onRecordComplete.bind(this);\r\n        }\r\n        if (this.streamVisibleCallback === undefined) {\r\n            this.streamVisibleCallback = this.onStreamVisible.bind(this);\r\n        }\r\n\r\n        // check for support because some browsers still do not support\r\n        // getDisplayMedia or getUserMedia (like Chrome iOS, see:\r\n        // https://bugs.chromium.org/p/chromium/issues/detail?id=752458)\r\n        if (this.getRecordType() === SCREEN_ONLY || this.getRecordType() === AUDIO_SCREEN) {\r\n            if (navigator.mediaDevices === undefined ||\r\n                navigator.mediaDevices.getDisplayMedia === undefined) {\r\n                this.player.trigger(Event.ERROR,\r\n                    'This browser does not support navigator.mediaDevices.getDisplayMedia');\r\n                return;\r\n            }\r\n        } else {\r\n            if (navigator.mediaDevices === undefined ||\r\n                navigator.mediaDevices.getUserMedia === undefined) {\r\n                this.player.trigger(Event.ERROR,\r\n                    'This browser does not support navigator.mediaDevices.getUserMedia');\r\n                return;\r\n            }\r\n        }\r\n\r\n        // ask the browser to give the user access to the media device\r\n        // and get a stream reference in the callback function\r\n        switch (this.getRecordType()) {\r\n            case AUDIO_ONLY:\r\n                // setup microphone\r\n                this.mediaType = {\r\n                    audio: (this.audioRecorderType === AUTO) ? true : this.audioRecorderType,\r\n                    video: false\r\n                };\r\n                // remove existing microphone listeners\r\n                this.surfer.surfer.microphone.un(Event.DEVICE_READY,\r\n                    this.deviceReadyCallback);\r\n                this.surfer.surfer.microphone.un(Event.DEVICE_ERROR,\r\n                    this.deviceErrorCallback);\r\n\r\n                // setup new microphone listeners\r\n                this.surfer.surfer.microphone.on(Event.DEVICE_READY,\r\n                    this.deviceReadyCallback);\r\n                this.surfer.surfer.microphone.on(Event.DEVICE_ERROR,\r\n                    this.deviceErrorCallback);\r\n\r\n                // disable existing playback events\r\n                this.surfer.setupPlaybackEvents(false);\r\n\r\n                // (re)set surfer liveMode\r\n                this.surfer.liveMode = true;\r\n                this.surfer.surfer.microphone.paused = false;\r\n\r\n                // resume AudioContext when it's suspended by the browser, due to\r\n                // autoplay rules. Chrome warns with the following message:\r\n                // \"The AudioContext was not allowed to start. It must be resumed\r\n                // (or created) after a user gesture on the page.\"\r\n                if (this.surfer.surfer.backend.ac.state === 'suspended') {\r\n                    this.surfer.surfer.backend.ac.resume();\r\n                }\r\n\r\n                // assign custom reloadBufferFunction for microphone plugin to\r\n                // obtain AudioBuffer chunks\r\n                if (this.audioBufferUpdate === true) {\r\n                    this.surfer.surfer.microphone.reloadBufferFunction = (event) => {\r\n                        if (!this.surfer.surfer.microphone.paused) {\r\n                            // redraw\r\n                            this.surfer.surfer.empty();\r\n                            this.surfer.surfer.loadDecodedBuffer(event.inputBuffer);\r\n\r\n                            // store data and notify others\r\n                            this.player.recordedData = event.inputBuffer;\r\n                            this.player.trigger(Event.AUDIO_BUFFER_UPDATE);\r\n                        }\r\n                    };\r\n                }\r\n                // open browser device selection/permissions dialog\r\n                this.surfer.surfer.microphone.start();\r\n                break;\r\n\r\n            case IMAGE_ONLY:\r\n            case VIDEO_ONLY:\r\n                if (this.getRecordType() === IMAGE_ONLY) {\r\n                    // using player.el() here because this.mediaElement is not available yet\r\n                    this.player.el().firstChild.addEventListener(Event.PLAYING,\r\n                        this.streamVisibleCallback);\r\n                }\r\n\r\n                // setup camera\r\n                this.mediaType = {\r\n                    audio: false,\r\n                    video: (this.videoRecorderType === AUTO) ? true : this.videoRecorderType\r\n                };\r\n                navigator.mediaDevices.getUserMedia({\r\n                    audio: false,\r\n                    video: (this.getRecordType() === IMAGE_ONLY) ? this.recordImage : this.recordVideo\r\n                }).then(\r\n                    this.onDeviceReady.bind(this)\r\n                ).catch(\r\n                    this.onDeviceError.bind(this)\r\n                );\r\n                break;\r\n\r\n            case AUDIO_SCREEN:\r\n                // setup camera and microphone\r\n                this.mediaType = {\r\n                    audio: (this.audioRecorderType === AUTO) ? true : this.audioRecorderType,\r\n                    video: (this.videoRecorderType === AUTO) ? true : this.videoRecorderType\r\n                };\r\n                let audioScreenConstraints = {};\r\n                if (this.recordScreen === true) {\r\n                    audioScreenConstraints = {\r\n                        video: true // needs to be true for it to work in Firefox\r\n                    };\r\n                } else if (typeof this.recordScreen === 'object' &&\r\n                    this.recordScreen.constructor === Object) {\r\n                    audioScreenConstraints = this.recordScreen;\r\n                }\r\n                navigator.mediaDevices.getDisplayMedia(audioScreenConstraints).then(screenStream => {\r\n                    navigator.mediaDevices.getUserMedia({\r\n                        audio: this.recordAudio\r\n                    }).then((mic) => {\r\n                        // join microphone track with screencast stream (order matters)\r\n                        screenStream.addTrack(mic.getTracks()[0]);\r\n                        this.onDeviceReady.bind(this)(screenStream);\r\n                    }).catch((code) => {\r\n                        // here the screen sharing is in progress as successful result of navigator.mediaDevices.getDisplayMedia and\r\n                        // needs to be stopped because microphone permissions are not acquired by navigator.mediaDevices.getUserMedia\r\n                        if (screenStream.active) {\r\n                            screenStream.stop();\r\n                        }\r\n                        this.onDeviceError(code);\r\n                    });\r\n                }).catch(\r\n                    this.onDeviceError.bind(this)\r\n                );\r\n                break;\r\n\r\n            case AUDIO_VIDEO:\r\n                // setup camera and microphone\r\n                this.mediaType = {\r\n                    audio: (this.audioRecorderType === AUTO) ? true : this.audioRecorderType,\r\n                    video: (this.videoRecorderType === AUTO) ? true : this.videoRecorderType\r\n                };\r\n                navigator.mediaDevices.getUserMedia({\r\n                    audio: this.recordAudio,\r\n                    video: this.recordVideo\r\n                }).then(\r\n                    this.onDeviceReady.bind(this)\r\n                ).catch(\r\n                    this.onDeviceError.bind(this)\r\n                );\r\n                break;\r\n\r\n            case ANIMATION:\r\n                // setup camera\r\n                this.mediaType = {\r\n                    // animated GIF\r\n                    audio: false,\r\n                    video: false,\r\n                    gif: true\r\n                };\r\n                navigator.mediaDevices.getUserMedia({\r\n                    audio: false,\r\n                    video: this.recordAnimation\r\n                }).then(\r\n                    this.onDeviceReady.bind(this)\r\n                ).catch(\r\n                    this.onDeviceError.bind(this)\r\n                );\r\n                break;\r\n\r\n            case SCREEN_ONLY:\r\n                // setup screen\r\n                this.mediaType = {\r\n                    // screen capture\r\n                    audio: false,\r\n                    video: false,\r\n                    screen: true,\r\n                    gif: false\r\n                };\r\n                let screenOnlyConstraints = {};\r\n                if (this.recordScreen === true) {\r\n                    screenOnlyConstraints = {\r\n                        video: true\r\n                    };\r\n                } else if (typeof this.recordScreen === 'object' &&\r\n                    this.recordScreen.constructor === Object) {\r\n                    screenOnlyConstraints = this.recordScreen;\r\n                }\r\n                navigator.mediaDevices.getDisplayMedia(screenOnlyConstraints).then(\r\n                    this.onDeviceReady.bind(this)\r\n                ).catch(\r\n                    this.onDeviceError.bind(this)\r\n                );\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Invoked when the device is ready.\r\n     *\r\n     * @private\r\n     * @param {LocalMediaStream} stream - Local media stream from device.\r\n     */\r\n    onDeviceReady(stream) {\r\n        this._deviceActive = true;\r\n\r\n        // stop previous stream if it is active\r\n        if (this.stream !== undefined && this.stream.active) {\r\n            this.stream.stop();\r\n        }\r\n\r\n        // store reference to stream for stopping etc.\r\n        this.stream = stream;\r\n\r\n        // hide device selection button\r\n        this.player.deviceButton.hide();\r\n\r\n        // reset time (e.g. when stopDevice was used)\r\n        this.setDuration(this.maxLength);\r\n        this.setCurrentTime(0);\r\n\r\n        // hide play/pause control (e.g. when stopDevice was used)\r\n        if (this.player.controlBar.playToggle !== undefined) {\r\n            this.player.controlBar.playToggle.hide();\r\n        }\r\n\r\n        // reset playback listeners\r\n        this.off(this.player, Event.TIMEUPDATE, this.playbackTimeUpdate);\r\n        this.off(this.player, Event.ENDED, this.playbackTimeUpdate);\r\n\r\n        // setup recording engine\r\n        if (this.getRecordType() !== IMAGE_ONLY) {\r\n            // currently record plugins are only supported in audio-only mode\r\n            if (this.getRecordType() !== AUDIO_ONLY && isAudioPluginActive(this.audioEngine)) {\r\n                throw new Error('Currently ' + this.audioEngine +\r\n                    ' is only supported in audio-only mode.');\r\n            }\r\n\r\n            // load plugins, if any\r\n            let EngineClass, engineType;\r\n            switch (this.getRecordType()) {\r\n                case AUDIO_ONLY:\r\n                    // get audio plugin engine class (or default recordrtc engine)\r\n                    EngineClass = getAudioEngine(this.audioEngine);\r\n                    engineType = this.audioEngine;\r\n                    break;\r\n\r\n                default:\r\n                    // get video plugin engine class (or default recordrtc engine)\r\n                    EngineClass = getVideoEngine(this.videoEngine);\r\n                    engineType = this.videoEngine;\r\n            }\r\n\r\n            // create recording engine\r\n            try {\r\n                // connect stream to recording engine\r\n                this.engine = new EngineClass(this.player, this.player.options_);\r\n            } catch (err) {\r\n                throw new Error('Could not load ' + engineType + ' plugin');\r\n            }\r\n\r\n            // listen for events\r\n            this.engine.on(Event.RECORD_COMPLETE, this.engineStopCallback);\r\n\r\n            // audio settings\r\n            this.engine.bufferSize = this.audioBufferSize;\r\n            this.engine.sampleRate = this.audioSampleRate;\r\n            this.engine.bitRate = this.audioBitRate;\r\n            this.engine.audioChannels = this.audioChannels;\r\n            this.engine.audioWorkerURL = this.audioWorkerURL;\r\n            this.engine.audioWebAssemblyURL = this.audioWebAssemblyURL;\r\n\r\n            // mime type\r\n            this.engine.mimeType = {\r\n                video: this.videoMimeType,\r\n                gif: 'image/gif'\r\n            };\r\n            if (this.audioMimeType !== null &&\r\n                this.audioMimeType !== AUTO) {\r\n                this.engine.mimeType.audio = this.audioMimeType;\r\n            }\r\n\r\n            // video/canvas settings\r\n            this.engine.videoWorkerURL = this.videoWorkerURL;\r\n            this.engine.videoWebAssemblyURL = this.videoWebAssemblyURL;\r\n            this.engine.videoBitRate = this.videoBitRate;\r\n            this.engine.videoFrameRate = this.videoFrameRate;\r\n            this.engine.video = {\r\n                width: this.videoFrameWidth,\r\n                height: this.videoFrameHeight\r\n            };\r\n            this.engine.canvas = {\r\n                width: this.videoFrameWidth,\r\n                height: this.videoFrameHeight\r\n            };\r\n\r\n            // animated GIF settings\r\n            this.engine.quality = this.animationQuality;\r\n            this.engine.frameRate = this.animationFrameRate;\r\n\r\n            // timeSlice\r\n            if (this.recordTimeSlice && this.recordTimeSlice > 0) {\r\n                this.engine.timeSlice = this.recordTimeSlice;\r\n                this.engine.maxFileSize = this.maxFileSize;\r\n            }\r\n\r\n            // additional 3rd-party library options\r\n            this.engine.pluginLibraryOptions = this.pluginLibraryOptions;\r\n\r\n            // initialize recorder\r\n            this.engine.setup(this.stream, this.mediaType, this.debug);\r\n\r\n            // create converter engine\r\n            if (this.convertEngine !== '') {\r\n                let ConvertEngineClass = getConvertEngine(this.convertEngine);\r\n                try {\r\n                    this.converter = new ConvertEngineClass(this.player,\r\n                        this.player.options_);\r\n                }\r\n                catch (err) {\r\n                    throw new Error('Could not load ' + this.convertEngine +\r\n                        ' plugin');\r\n                }\r\n\r\n                // convert settings\r\n                this.converter.convertAuto = this.convertAuto;\r\n                this.converter.convertWorkerURL = this.convertWorkerURL;\r\n                this.converter.convertOptions = this.convertOptions;\r\n                this.converter.pluginLibraryOptions = this.pluginLibraryOptions;\r\n\r\n                // initialize converter\r\n                this.converter.setup(this.mediaType, this.debug);\r\n            }\r\n\r\n            // show elements that should never be hidden in animation,\r\n            // audio and/or video modus\r\n            let uiElements = ['currentTimeDisplay', 'timeDivider', 'durationDisplay'];\r\n            uiElements.forEach((element) => {\r\n                element = this.player.controlBar[element];\r\n                if (element !== undefined) {\r\n                    element.el().style.display = 'block';\r\n                    element.show();\r\n                }\r\n            });\r\n\r\n            // show record button\r\n            this.player.recordToggle.show();\r\n        } else {\r\n            // disable record indicator\r\n            this.player.recordIndicator.disable();\r\n\r\n            // setup UI for retrying snapshot (e.g. when stopDevice was\r\n            // used)\r\n            this.retrySnapshot();\r\n\r\n            // camera button will be displayed as soon as this.onStreamVisible fires\r\n        }\r\n\r\n        // setup preview\r\n        if (this.getRecordType() !== AUDIO_ONLY) {\r\n            // show live preview\r\n            this.mediaElement = this.player.el().firstChild;\r\n            this.mediaElement.controls = false;\r\n\r\n            // mute incoming audio for feedback loops\r\n            this.mediaElement.muted = true;\r\n\r\n            // hide the volume bar while it's muted\r\n            this.displayVolumeControl(false);\r\n\r\n            // picture-in-picture\r\n            if (this.pictureInPicture === true) {\r\n                // show button\r\n                this.player.pipToggle.show();\r\n\r\n                // listen to and forward Picture-in-Picture events\r\n                this.mediaElement.removeEventListener(Event.ENTERPICTUREINPICTURE,\r\n                    this.onEnterPiPHandler);\r\n                this.mediaElement.removeEventListener(Event.LEAVEPICTUREINPICTURE,\r\n                    this.onLeavePiPHandler);\r\n                this.mediaElement.addEventListener(Event.ENTERPICTUREINPICTURE,\r\n                    this.onEnterPiPHandler);\r\n                this.mediaElement.addEventListener(Event.LEAVEPICTUREINPICTURE,\r\n                    this.onLeavePiPHandler);\r\n            }\r\n            // load stream\r\n            this.load(this.stream);\r\n\r\n            // stream loading is async, so we wait until it's ready to play\r\n            // the stream\r\n            this.player.one(Event.LOADEDMETADATA, () => {\r\n                // start stream\r\n                this.mediaElement.play();\r\n\r\n                // forward to listeners\r\n                this.player.trigger(Event.DEVICE_READY);\r\n            });\r\n        } else {\r\n            // forward to listeners\r\n            this.player.trigger(Event.DEVICE_READY);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Invoked when an device error occurred.\r\n     *\r\n     * @private\r\n     * @param {(string|number)} code - Error code/description.\r\n     */\r\n    onDeviceError(code) {\r\n        this._deviceActive = false;\r\n\r\n        if (!this.isDestroyed()) {\r\n            // store code\r\n            this.player.deviceErrorCode = code;\r\n\r\n            // forward error to player\r\n            this.player.trigger(Event.DEVICE_ERROR);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Start recording.\r\n     */\r\n    start() {\r\n        if (!this.isProcessing()) {\r\n            // check if user didn't revoke permissions after a previous recording\r\n            if (this.stream && this.stream.active === false) {\r\n                // ask for permissions again\r\n                this.getDevice();\r\n                return;\r\n            }\r\n            this._recording = true;\r\n\r\n            // hide play/pause control\r\n            if (this.player.controlBar.playToggle !== undefined) {\r\n                this.player.controlBar.playToggle.hide();\r\n            }\r\n\r\n            // reset playback listeners\r\n            this.off(this.player, Event.TIMEUPDATE, this.playbackTimeUpdate);\r\n            this.off(this.player, Event.ENDED, this.playbackTimeUpdate);\r\n\r\n            // start preview\r\n            switch (this.getRecordType()) {\r\n                case AUDIO_ONLY:\r\n                    // disable playback events\r\n                    this.surfer.setupPlaybackEvents(false);\r\n\r\n                    // start/resume live audio visualization\r\n                    this.surfer.surfer.microphone.paused = false;\r\n                    this.surfer.liveMode = true;\r\n                    this.surfer.surfer.microphone.play();\r\n                    break;\r\n\r\n                case VIDEO_ONLY:\r\n                case AUDIO_VIDEO:\r\n                case AUDIO_SCREEN:\r\n                case SCREEN_ONLY:\r\n                    // preview video stream in video element\r\n                    this.startVideoPreview();\r\n                    break;\r\n\r\n                case ANIMATION:\r\n                    // hide the first frame\r\n                    this.player.recordCanvas.hide();\r\n\r\n                    // hide the animation\r\n                    this.player.animationDisplay.hide();\r\n\r\n                    // show preview video\r\n                    this.mediaElement.style.display = 'block';\r\n\r\n                    // for animations, capture the first frame\r\n                    // that can be displayed as soon as recording\r\n                    // is complete\r\n                    this.captureFrame().then((result) => {\r\n                        // start video preview **after** capturing first frame\r\n                        this.startVideoPreview();\r\n                    });\r\n                    break;\r\n            }\r\n\r\n            if (this.autoMuteDevice) {\r\n                // unmute device\r\n                this.muteTracks(false);\r\n            }\r\n\r\n            // start recording\r\n            switch (this.getRecordType()) {\r\n                case IMAGE_ONLY:\r\n                    // create snapshot\r\n                    this.createSnapshot();\r\n\r\n                    // notify UI\r\n                    this.player.trigger(Event.START_RECORD);\r\n                    break;\r\n\r\n                case VIDEO_ONLY:\r\n                case AUDIO_VIDEO:\r\n                case AUDIO_SCREEN:\r\n                case ANIMATION:\r\n                case SCREEN_ONLY:\r\n                    // wait for media stream on video element to actually load\r\n                    this.player.one(Event.LOADEDMETADATA, () => {\r\n                        // start actually recording process\r\n                        this.startRecording();\r\n                    });\r\n                    break;\r\n\r\n                default:\r\n                    // all resources have already loaded, so we can start\r\n                    // recording right away\r\n                    this.startRecording();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Start recording.\r\n     * @private\r\n     */\r\n    startRecording() {\r\n        // register starting point\r\n        this.paused = false;\r\n        this.pauseTime = this.pausedTime = 0;\r\n        this.startTime = performance.now();\r\n\r\n        // start countdown\r\n        const COUNTDOWN_SPEED = 100; // ms\r\n        this.countDown = this.player.setInterval(\r\n            this.onCountDown.bind(this), COUNTDOWN_SPEED);\r\n\r\n        // cleanup previous recording\r\n        if (this.engine !== undefined) {\r\n            this.engine.dispose();\r\n        }\r\n\r\n        // start recording stream\r\n        this.engine.start();\r\n\r\n        // notify UI\r\n        this.player.trigger(Event.START_RECORD);\r\n    }\r\n\r\n    /**\r\n     * Stop recording.\r\n     */\r\n    stop() {\r\n        if (!this.isProcessing()) {\r\n            this._recording = false;\r\n            this._processing = true;\r\n\r\n            if (this.getRecordType() !== IMAGE_ONLY) {\r\n                // notify UI\r\n                this.player.trigger(Event.STOP_RECORD);\r\n\r\n                // stop countdown\r\n                this.player.clearInterval(this.countDown);\r\n\r\n                // stop recording stream (result will be available async)\r\n                if (this.engine) {\r\n                    this.engine.stop();\r\n                }\r\n\r\n                if (this.autoMuteDevice) {\r\n                    // mute device\r\n                    this.muteTracks(true);\r\n                }\r\n            } else {\r\n                if (this.player.recordedData) {\r\n                    // notify listeners that image data is (already) available\r\n                    this.player.trigger(Event.FINISH_RECORD);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Stop device(s) and recording if active.\r\n     */\r\n    stopDevice() {\r\n        if (this.isRecording()) {\r\n            // stop stream once recorded data is available,\r\n            // otherwise it'll break recording\r\n            this.player.one(Event.FINISH_RECORD, this.stopStream.bind(this));\r\n\r\n            // stop recording\r\n            this.stop();\r\n        } else {\r\n            // stop stream now, since there's no recorded data available\r\n            this.stopStream();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Stop stream and device.\r\n     */\r\n    stopStream() {\r\n        // stop stream and device\r\n        if (this.stream) {\r\n            this._deviceActive = false;\r\n\r\n            if (this.getRecordType() === AUDIO_ONLY) {\r\n                // make the microphone plugin stop it's device\r\n                this.surfer.surfer.microphone.stopDevice();\r\n                return;\r\n            }\r\n            this.stream.getTracks().forEach((stream) => {\r\n                stream.stop();\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Pause recording.\r\n     */\r\n    pause() {\r\n        if (!this.paused) {\r\n            this.pauseTime = performance.now();\r\n            this.paused = true;\r\n\r\n            this.engine.pause();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Resume recording.\r\n     */\r\n    resume() {\r\n        if (this.paused) {\r\n            this.pausedTime += performance.now() - this.pauseTime;\r\n\r\n            this.engine.resume();\r\n            this.paused = false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Invoked when recording completed and the resulting stream is\r\n     * available.\r\n     * @private\r\n     */\r\n    onRecordComplete() {\r\n        // store reference to recorded stream data\r\n        this.player.recordedData = this.engine.recordedData;\r\n\r\n        // change the replay button back to a play button\r\n        if (this.player.controlBar.playToggle !== undefined) {\r\n            this.player.controlBar.playToggle.removeClass('vjs-ended');\r\n            this.player.controlBar.playToggle.show();\r\n        }\r\n\r\n        // start converter\r\n        if (this.convertAuto === true) {\r\n            this.convert();\r\n        }\r\n\r\n        // notify listeners that data is available\r\n        this.player.trigger(Event.FINISH_RECORD);\r\n\r\n        // skip loading when player is destroyed after finishRecord event\r\n        if (this.isDestroyed()) {\r\n            return;\r\n        }\r\n\r\n        // load and display recorded data\r\n        switch (this.getRecordType()) {\r\n            case AUDIO_ONLY:\r\n                // pause player so user can start playback\r\n                this.surfer.pause();\r\n\r\n                // setup events for playback\r\n                this.surfer.setupPlaybackEvents(true);\r\n\r\n                // display loader\r\n                this.player.loadingSpinner.show();\r\n\r\n                // restore interaction with controls after waveform\r\n                // rendering is complete\r\n                this.surfer.surfer.once(Event.READY, () => {\r\n                    this._processing = false;\r\n                });\r\n\r\n                // visualize recorded stream\r\n                this.load(this.player.recordedData);\r\n                break;\r\n\r\n            case VIDEO_ONLY:\r\n            case AUDIO_VIDEO:\r\n            case AUDIO_SCREEN:\r\n            case SCREEN_ONLY:\r\n                // pausing the player so we can visualize the recorded data\r\n                // will trigger an async video.js 'pause' event that we\r\n                // have to wait for.\r\n                this.player.one(Event.PAUSE, () => {\r\n                    // video data is ready\r\n                    this._processing = false;\r\n\r\n                    // hide loader\r\n                    this.player.loadingSpinner.hide();\r\n\r\n                    // show stream total duration\r\n                    this.setDuration(this.streamDuration);\r\n\r\n                    // update time during playback and at end\r\n                    this.on(this.player, Event.TIMEUPDATE,\r\n                        this.playbackTimeUpdate);\r\n                    this.on(this.player, Event.ENDED,\r\n                        this.playbackTimeUpdate);\r\n\r\n                    // unmute local audio during playback\r\n                    if (this.getRecordType() === AUDIO_VIDEO || this.getRecordType() === AUDIO_SCREEN) {\r\n                        this.mediaElement.muted = false;\r\n\r\n                        // show the volume bar when it's unmuted\r\n                        this.displayVolumeControl(true);\r\n                    }\r\n\r\n                    // load recorded media\r\n                    this.load(this.player.recordedData);\r\n                });\r\n\r\n                // pause player so user can start playback\r\n                this.player.pause();\r\n                break;\r\n\r\n            case ANIMATION:\r\n                // animation data is ready\r\n                this._processing = false;\r\n\r\n                // hide loader\r\n                this.player.loadingSpinner.hide();\r\n\r\n                // show animation total duration\r\n                this.setDuration(this.streamDuration);\r\n\r\n                // hide preview video\r\n                this.mediaElement.style.display = 'none';\r\n\r\n                // show the first frame\r\n                this.player.recordCanvas.show();\r\n\r\n                // pause player so user can start playback\r\n                this.player.pause();\r\n\r\n                // show animation on play\r\n                this.on(this.player, Event.PLAY, this.showAnimation);\r\n\r\n                // hide animation on pause\r\n                this.on(this.player, Event.PAUSE, this.hideAnimation);\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Invoked during recording and displays the remaining time.\r\n     * @private\r\n     */\r\n    onCountDown() {\r\n        if (!this.paused) {\r\n            let now = performance.now();\r\n            let duration = this.maxLength;\r\n            let currentTime = (now - (this.startTime +\r\n                this.pausedTime)) / 1000; // buddy ignore:line\r\n\r\n            this.streamDuration = currentTime;\r\n\r\n            if (currentTime >= duration) {\r\n                // at the end\r\n                currentTime = duration;\r\n\r\n                // stop recording\r\n                this.stop();\r\n            }\r\n\r\n            // update duration\r\n            this.setDuration(duration);\r\n\r\n            // update current time\r\n            this.setCurrentTime(currentTime, duration);\r\n\r\n            // notify listeners\r\n            this.player.trigger(Event.PROGRESS_RECORD);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get the current time of the recorded stream during playback.\r\n     *\r\n     * Returns 0 if no recording is available (yet).\r\n     *\r\n     * @returns {float} Current time of the recorded stream.\r\n     */\r\n    getCurrentTime() {\r\n        let currentTime = isNaN(this.streamCurrentTime) ? 0 : this.streamCurrentTime;\r\n\r\n        if (this.getRecordType() === AUDIO_ONLY) {\r\n            currentTime = this.surfer.getCurrentTime();\r\n        }\r\n\r\n        return currentTime;\r\n    }\r\n\r\n    /**\r\n     * Updates the player's element displaying the current time.\r\n     *\r\n     * @private\r\n     * @param {number} [currentTime=0] - Current position of the\r\n     *    playhead (in seconds).\r\n     * @param {number} [duration=0] - Duration in seconds.\r\n     */\r\n    setCurrentTime(currentTime, duration) {\r\n        currentTime = isNaN(currentTime) ? 0 : currentTime;\r\n        duration = isNaN(duration) ? 0 : duration;\r\n\r\n        switch (this.getRecordType()) {\r\n            case AUDIO_ONLY:\r\n                this.surfer.setCurrentTime(currentTime, duration);\r\n                break;\r\n\r\n            case VIDEO_ONLY:\r\n            case AUDIO_VIDEO:\r\n            case AUDIO_SCREEN:\r\n            case ANIMATION:\r\n            case SCREEN_ONLY:\r\n                if (this.player.controlBar.currentTimeDisplay &&\r\n                    this.player.controlBar.currentTimeDisplay.contentEl() &&\r\n                    this.player.controlBar.currentTimeDisplay.contentEl().lastChild) {\r\n                    this.streamCurrentTime = Math.min(currentTime, duration);\r\n\r\n                    // update current time display component\r\n                    this.player.controlBar.currentTimeDisplay.formattedTime_ =\r\n                        this.player.controlBar.currentTimeDisplay.contentEl().lastChild.textContent =\r\n                            this._formatTime(this.streamCurrentTime, duration, this.displayMilliseconds);\r\n                }\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get the length of the recorded stream in seconds.\r\n     *\r\n     * Returns 0 if no recording is available (yet).\r\n     *\r\n     * @returns {float} Duration of the recorded stream.\r\n     */\r\n    getDuration() {\r\n        let duration = isNaN(this.streamDuration) ? 0 : this.streamDuration;\r\n\r\n        return duration;\r\n    }\r\n\r\n    /**\r\n     * Updates the player's element displaying the duration time.\r\n     *\r\n     * @param {number} [duration=0] - Duration in seconds.\r\n     * @private\r\n     */\r\n    setDuration(duration) {\r\n        duration = isNaN(duration) ? 0 : duration;\r\n\r\n        switch (this.getRecordType()) {\r\n            case AUDIO_ONLY:\r\n                this.surfer.setDuration(duration);\r\n                break;\r\n\r\n            case VIDEO_ONLY:\r\n            case AUDIO_VIDEO:\r\n            case AUDIO_SCREEN:\r\n            case ANIMATION:\r\n            case SCREEN_ONLY:\r\n                // update duration display component\r\n                if (this.player.controlBar.durationDisplay &&\r\n                    this.player.controlBar.durationDisplay.contentEl() &&\r\n                    this.player.controlBar.durationDisplay.contentEl().lastChild) {\r\n                    this.player.controlBar.durationDisplay.formattedTime_ =\r\n                    this.player.controlBar.durationDisplay.contentEl().lastChild.textContent =\r\n                        this._formatTime(duration, duration, this.displayMilliseconds);\r\n                }\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Start loading data.\r\n     *\r\n     * @param {(string|blob|file)} url - Either the URL of the media file,\r\n     *     a Blob, a File object or MediaStream.\r\n     */\r\n    load(url) {\r\n        switch (this.getRecordType()) {\r\n            case AUDIO_ONLY:\r\n                // visualize recorded Blob stream\r\n                this.surfer.load(url);\r\n                break;\r\n\r\n            case IMAGE_ONLY:\r\n            case VIDEO_ONLY:\r\n            case AUDIO_VIDEO:\r\n            case AUDIO_SCREEN:\r\n            case ANIMATION:\r\n            case SCREEN_ONLY:\r\n                if (url instanceof Blob || url instanceof File) {\r\n                    // make sure to reset it (#312)\r\n                    this.mediaElement.srcObject = null;\r\n                    // assign blob using createObjectURL\r\n                    this.mediaElement.src = URL.createObjectURL(url);\r\n                } else {\r\n                    // assign stream with srcObject\r\n                    setSrcObject(url, this.mediaElement);\r\n                }\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Show save as dialog in browser so the user can store the recorded or\r\n     * converted media locally.\r\n     *\r\n     * @param {Object} name - Object with names for the particular blob(s)\r\n     *     you want to save. File extensions are added automatically. For\r\n     *     example: {'video': 'name-of-video-file'}. Supported keys are\r\n     *     'audio', 'video' and 'gif'.\r\n     * @param {String} type - Type of media to save. Legal values are 'record'\r\n     *     (default) and 'convert'.\r\n     * @example\r\n     * // save recorded video file as 'foo.webm'\r\n     * player.record().saveAs({'video': 'foo'});\r\n     *\r\n     * // save converted video file as 'bar.mp4'\r\n     * player.record().saveAs({'video': 'bar'}, 'convert');\r\n     * @returns {void}\r\n     */\r\n    saveAs(name, type = 'record') {\r\n        if (type === 'record') {\r\n            if (this.engine && name !== undefined) {\r\n                this.engine.saveAs(name);\r\n            }\r\n        } else if (type === 'convert') {\r\n            if (this.converter && name !== undefined) {\r\n                this.converter.saveAs(name);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Destroy plugin only.\r\n     *\r\n     * Use [destroy]{@link Record#destroy} to remove the plugin and the player\r\n     * as well.\r\n     */\r\n    dispose() {\r\n        // disable common event listeners\r\n        this.player.off(Event.READY);\r\n        this.player.off(Event.USERINACTIVE);\r\n        this.player.off(Event.LOADEDMETADATA);\r\n\r\n        // prevent callbacks if recording is in progress\r\n        if (this.engine) {\r\n            this.engine.dispose();\r\n            this.engine.destroy();\r\n            this.engine.off(Event.RECORD_COMPLETE, this.engineStopCallback);\r\n        }\r\n\r\n        // stop recording and device\r\n        this.stop();\r\n        this.stopDevice();\r\n\r\n        // garbage collect recording\r\n        this.removeRecording();\r\n\r\n        // stop countdown\r\n        this.player.clearInterval(this.countDown);\r\n\r\n        // dispose wavesurfer.js\r\n        if (this.getRecordType() === AUDIO_ONLY) {\r\n            if (this.surfer) {\r\n                // also disposes player\r\n                this.surfer.destroy();\r\n            }\r\n        } else if (this.getRecordType() === IMAGE_ONLY) {\r\n            if (this.mediaElement && this.streamVisibleCallback) {\r\n                // cleanup listeners\r\n                this.mediaElement.removeEventListener(Event.PLAYING,\r\n                    this.streamVisibleCallback);\r\n            }\r\n        }\r\n\r\n        this.resetState();\r\n\r\n        super.dispose();\r\n    }\r\n\r\n    /**\r\n     * Destroy plugin and players and cleanup resources.\r\n     */\r\n    destroy() {\r\n        this.player.dispose();\r\n    }\r\n\r\n    /**\r\n     * Reset the plugin.\r\n     */\r\n    reset() {\r\n        // prevent callbacks if recording is in progress\r\n        if (this.engine) {\r\n            this.engine.dispose();\r\n            this.engine.off(Event.RECORD_COMPLETE, this.engineStopCallback);\r\n        }\r\n\r\n        // stop recording and device\r\n        this.stop();\r\n        this.stopDevice();\r\n\r\n        // stop countdown\r\n        this.player.clearInterval(this.countDown);\r\n\r\n        // garbage collect recording\r\n        this.removeRecording();\r\n\r\n        // reset options\r\n        this.loadOptions();\r\n\r\n        // reset recorder state\r\n        this.resetState();\r\n\r\n        // reset record time\r\n        this.setDuration(this.maxLength);\r\n        this.setCurrentTime(0);\r\n\r\n        // reset player\r\n        this.player.reset();\r\n        switch (this.getRecordType()) {\r\n            case AUDIO_ONLY:\r\n                if (this.surfer && this.surfer.surfer) {\r\n                    // empty last frame\r\n                    this.surfer.surfer.empty();\r\n                }\r\n                break;\r\n\r\n            case IMAGE_ONLY:\r\n            case ANIMATION:\r\n                // reset UI\r\n                this.player.recordCanvas.hide();\r\n                this.player.cameraButton.hide();\r\n                break;\r\n        }\r\n\r\n        // hide play control\r\n        if (this.player.controlBar.playToggle !== undefined) {\r\n            this.player.controlBar.playToggle.hide();\r\n        }\r\n\r\n        // show device selection button\r\n        this.player.deviceButton.show();\r\n\r\n        // hide record button\r\n        this.player.recordToggle.hide();\r\n\r\n        // loadedmetadata resets the durationDisplay for the\r\n        // first time\r\n        this.player.one(Event.LOADEDMETADATA, () => {\r\n            // display max record time\r\n            this.setDuration(this.maxLength);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Reset the plugin recorder state.\r\n     * @private\r\n     */\r\n    resetState() {\r\n        this._recording = false;\r\n        this._processing = false;\r\n        this._deviceActive = false;\r\n        this.devices = [];\r\n    }\r\n\r\n    /**\r\n     * Removes recorded `Blob` from cache.\r\n     * @private\r\n     */\r\n    removeRecording() {\r\n        if (this.mediaElement &&\r\n            this.mediaElement.src &&\r\n            this.mediaElement.src.startsWith('blob:') === true\r\n        ) {\r\n            URL.revokeObjectURL(this.mediaElement.src);\r\n            this.mediaElement.src = '';\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Export image data of waveform (audio-only) or current video frame.\r\n     *\r\n     * The default format is `'image/png'`. Other supported types are\r\n     * `'image/jpeg'` and `'image/webp'`.\r\n     *\r\n     * @param {string} format='image/png' A string indicating the image format.\r\n     * The default format type is `'image/png'`.\r\n     * @param {number} quality=1 A number between 0 and 1 indicating the image\r\n     * quality to use for image formats that use lossy compression such as\r\n     * `'image/jpeg'`` and `'image/webp'`.\r\n     * @return {Promise} Returns a `Promise` resolving with an\r\n     * array of `Blob` instances.\r\n     */\r\n    exportImage(format = 'image/png', quality = 1) {\r\n        if (this.getRecordType() === AUDIO_ONLY) {\r\n            return this.surfer.surfer.exportImage(format, quality, 'blob');\r\n        } else {\r\n            // get a frame and copy it onto the canvas\r\n            let recordCanvas = this.player.recordCanvas.el().firstChild;\r\n            this.drawCanvas(recordCanvas, this.mediaElement);\r\n\r\n            return new Promise(resolve => {\r\n                recordCanvas.toBlob(resolve, format, quality);\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Mute LocalMediaStream audio and video tracks.\r\n     *\r\n     * @param {boolean} mute - Whether or not the mute the track(s).\r\n     */\r\n    muteTracks(mute) {\r\n        if ((this.getRecordType() === AUDIO_ONLY ||\r\n            this.getRecordType() === AUDIO_SCREEN ||\r\n            this.getRecordType() === AUDIO_VIDEO) &&\r\n            this.stream.getAudioTracks().length > 0) {\r\n            this.stream.getAudioTracks()[0].enabled = !mute;\r\n        }\r\n\r\n        if (this.getRecordType() !== AUDIO_ONLY &&\r\n            this.stream.getVideoTracks().length > 0) {\r\n            this.stream.getVideoTracks()[0].enabled = !mute;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get recorder type.\r\n     *\r\n     * @returns {string} Recorder type constant.\r\n     * @example\r\n     * console.log(player.record().getRecordType()); // 'audio_video'\r\n     */\r\n    getRecordType() {\r\n        return getRecorderMode(this.recordImage, this.recordAudio,\r\n            this.recordVideo, this.recordAnimation, this.recordScreen);\r\n    }\r\n\r\n    /**\r\n     * Start converter.\r\n     */\r\n    convert() {\r\n        if (this.converter !== undefined) {\r\n            this.converter.convert(this.player.recordedData);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Create and display snapshot image.\r\n     * @private\r\n     */\r\n    createSnapshot() {\r\n        this.captureFrame().then((result) => {\r\n            if (this.imageOutputType === 'blob') {\r\n                // turn the canvas data into a Blob\r\n                result.toBlob((blob) => {\r\n                    this.player.recordedData = blob;\r\n\r\n                    // display the snapshot\r\n                    this.displaySnapshot();\r\n                });\r\n            } else if (this.imageOutputType === 'dataURL') {\r\n                // turn the canvas data into base64 data\r\n                this.player.recordedData = result.toDataURL(\r\n                    this.imageOutputFormat, this.imageOutputQuality);\r\n\r\n                // display the snapshot\r\n                this.displaySnapshot();\r\n            }\r\n        }, this.imageOutputFormat, this.imageOutputQuality);\r\n    }\r\n\r\n    /**\r\n     * Display snapshot image.\r\n     * @private\r\n     */\r\n    displaySnapshot() {\r\n        // hide preview video\r\n        this.mediaElement.style.display = 'none';\r\n\r\n        // show the snapshot\r\n        this.player.recordCanvas.show();\r\n\r\n        // stop recording\r\n        this.stop();\r\n    }\r\n\r\n    /**\r\n     * Reset UI for retrying a snapshot image.\r\n     * @private\r\n     */\r\n    retrySnapshot() {\r\n        this._processing = false;\r\n\r\n        // retry: hide the snapshot\r\n        this.player.recordCanvas.hide();\r\n\r\n        // show preview video\r\n        this.player.el().firstChild.style.display = 'block';\r\n    }\r\n\r\n    /**\r\n     * Capture frame from camera and copy data to canvas.\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n    captureFrame() {\r\n        let detected = detectBrowser();\r\n        let recordCanvas = this.player.recordCanvas.el().firstChild;\r\n        let track = this.stream.getVideoTracks()[0];\r\n        let settings = track.getSettings();\r\n\r\n        // set the canvas size to the dimensions of the camera,\r\n        // which also wipes the content of the canvas\r\n        recordCanvas.width = settings.width;\r\n        recordCanvas.height = settings.height;\r\n\r\n        return new Promise((resolve, reject) => {\r\n            const cameraAspectRatio = settings.width / settings.height;\r\n            const playerAspectRatio = this.player.width() / this.player.height();\r\n            let imagePreviewHeight = 0;\r\n            let imagePreviewWidth = 0;\r\n            let imageXPosition = 0;\r\n            let imageYPosition = 0;\r\n\r\n            // determine orientation\r\n            // buddy ignore:start\r\n            if (cameraAspectRatio >= playerAspectRatio) {\r\n                // camera feed wider than player\r\n                imagePreviewHeight = settings.height * (this.player.width() / settings.width);\r\n                imagePreviewWidth = this.player.width();\r\n                imageYPosition = (this.player.height() / 2) - (imagePreviewHeight / 2);\r\n            } else {\r\n                // player wider than camera feed\r\n                imagePreviewHeight = this.player.height();\r\n                imagePreviewWidth = settings.width * (this.player.height() / settings.height);\r\n                imageXPosition = (this.player.width() / 2) - (imagePreviewWidth / 2);\r\n            }\r\n            // buddy ignore:end\r\n\r\n            // MediaCapture is only supported on:\r\n            // - Chrome 60 and newer (see\r\n            // https://github.com/w3c/mediacapture-image/blob/gh-pages/implementation-status.md)\r\n            // - Firefox behind flag (https://bugzilla.mozilla.org/show_bug.cgi?id=888177)\r\n            //\r\n            // importing ImageCapture can fail when enabling chrome flag is still required.\r\n            // if so; ignore and continue\r\n            if ((detected.browser === 'chrome' && detected.version >= 60) &&\r\n               (typeof ImageCapture === typeof Function)) {\r\n                try {\r\n                    let imageCapture = new ImageCapture(track);\r\n                    // take picture\r\n                    imageCapture.grabFrame().then((imageBitmap) => {\r\n                        // get a frame and copy it onto the canvas\r\n                        this.drawCanvas(recordCanvas, imageBitmap, imagePreviewWidth,\r\n                            imagePreviewHeight, imageXPosition, imageYPosition);\r\n\r\n                        // notify others\r\n                        resolve(recordCanvas);\r\n                    }).catch((error) => {\r\n                        // ignore, try oldskool\r\n                    });\r\n                } catch (err) {}\r\n            }\r\n            // no ImageCapture available: do it the oldskool way\r\n\r\n            // get a frame and copy it onto the canvas\r\n            this.drawCanvas(recordCanvas, this.mediaElement, imagePreviewWidth,\r\n                imagePreviewHeight, imageXPosition, imageYPosition);\r\n\r\n            // notify others\r\n            resolve(recordCanvas);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Draw image frame on canvas element.\r\n     * @private\r\n     * @param {HTMLCanvasElement} canvas - Canvas to draw on.\r\n     * @param {HTMLElement} element - Element to draw onto the canvas.\r\n     * @param {Number} width - Width of drawing on canvas.\r\n     * @param {Number} height - Height of drawing on canvas.\r\n     * @param {Number} x - X position on canvas where drawing starts.\r\n     * @param {Number} y - Y position on canvas where drawing starts.\r\n     */\r\n    drawCanvas(canvas, element, width, height, x = 0, y = 0) {\r\n        if (width === undefined) {\r\n            width = canvas.width;\r\n        }\r\n        if (height === undefined) {\r\n            height = canvas.height;\r\n        }\r\n        canvas.getContext('2d').drawImage(element, x, y, width, height);\r\n    }\r\n\r\n    /**\r\n     * Start preview of video stream.\r\n     * @private\r\n     */\r\n    startVideoPreview() {\r\n        // disable playback events\r\n        this.off(Event.TIMEUPDATE);\r\n        this.off(Event.DURATIONCHANGE);\r\n        this.off(Event.LOADEDMETADATA);\r\n        this.off(Event.PLAY);\r\n\r\n        // mute local audio\r\n        this.mediaElement.muted = true;\r\n\r\n        // hide volume control to prevent feedback\r\n        this.displayVolumeControl(false);\r\n\r\n        // garbage collect previous recording\r\n        this.removeRecording();\r\n\r\n        // start or resume live preview\r\n        this.load(this.stream);\r\n        this.mediaElement.play();\r\n    }\r\n\r\n    /**\r\n     * Show animated GIF.\r\n     * @private\r\n     */\r\n    showAnimation() {\r\n        let animationDisplay = this.player.animationDisplay.el().firstChild;\r\n\r\n        // set the image size to the dimensions of the recorded animation\r\n        animationDisplay.width = this.player.width();\r\n        animationDisplay.height = this.player.height();\r\n\r\n        // hide the first frame\r\n        this.player.recordCanvas.hide();\r\n\r\n        // show the animation\r\n        setSrcObject(this.player.recordedData, animationDisplay);\r\n        this.player.animationDisplay.show();\r\n    }\r\n\r\n    /**\r\n     * Hide animated GIF.\r\n     * @private\r\n     */\r\n    hideAnimation() {\r\n        // show the first frame\r\n        this.player.recordCanvas.show();\r\n\r\n        // hide the animation\r\n        this.player.animationDisplay.hide();\r\n    }\r\n\r\n    /**\r\n     * Update time during playback.\r\n     * @private\r\n     */\r\n    playbackTimeUpdate() {\r\n        this.setCurrentTime(this.player.currentTime(),\r\n            this.streamDuration);\r\n    }\r\n\r\n    /**\r\n     * Collects information about the media input and output devices\r\n     * available on the system.\r\n     */\r\n    enumerateDevices() {\r\n        if (!navigator.mediaDevices || !navigator.mediaDevices.enumerateDevices) {\r\n            this.player.enumerateErrorCode = 'enumerateDevices() not supported.';\r\n            this.player.trigger(Event.ENUMERATE_ERROR);\r\n            return;\r\n        }\r\n\r\n        // list video and audio devices\r\n        navigator.mediaDevices.enumerateDevices(this).then((devices) => {\r\n            this.devices = [];\r\n            devices.forEach((device) => {\r\n                this.devices.push(device);\r\n            });\r\n\r\n            // notify listeners\r\n            this.player.trigger(Event.ENUMERATE_READY);\r\n        }).catch((err) => {\r\n            this.player.enumerateErrorCode = err;\r\n            this.player.trigger(Event.ENUMERATE_ERROR);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Change the video input device.\r\n     *\r\n     * @param {string} deviceId - Id of the video input device.\r\n     */\r\n    setVideoInput(deviceId) {\r\n        if (this.recordVideo === Object(this.recordVideo)) {\r\n            // already using video constraints\r\n            this.recordVideo.deviceId = {exact: deviceId};\r\n\r\n        } else if (this.recordVideo === true) {\r\n            // not using video constraints already, so force it\r\n            this.recordVideo = {\r\n                deviceId: {exact: deviceId}\r\n            };\r\n        }\r\n\r\n        // release existing device\r\n        this.stopDevice();\r\n\r\n        // ask for video input device permissions and start device\r\n        this.getDevice();\r\n    }\r\n\r\n    /**\r\n     * Change the audio input device.\r\n     *\r\n     * @param {string} deviceId - Id of the audio input device.\r\n     */\r\n    setAudioInput(deviceId) {\r\n        if (this.recordAudio === Object(this.recordAudio)) {\r\n            // already using audio constraints\r\n            this.recordAudio.deviceId = {exact: deviceId};\r\n\r\n        } else if (this.recordAudio === true) {\r\n            // not using audio constraints already, so force it\r\n            this.recordAudio = {\r\n                deviceId: {exact: deviceId}\r\n            };\r\n        }\r\n\r\n        // update wavesurfer microphone plugin constraints\r\n        switch (this.getRecordType()) {\r\n            case AUDIO_ONLY:\r\n                this.surfer.surfer.microphone.constraints = {\r\n                    video: false,\r\n                    audio: this.recordAudio\r\n                };\r\n                break;\r\n        }\r\n\r\n        // release existing device\r\n        this.stopDevice();\r\n\r\n        // ask for audio input device permissions and start device\r\n        this.getDevice();\r\n    }\r\n\r\n    /**\r\n     * Change the audio output device.\r\n     *\r\n     * @param {string} deviceId - Id of audio output device.\r\n     */\r\n    setAudioOutput(deviceId) {\r\n        let errorMessage;\r\n        switch (this.getRecordType()) {\r\n            case AUDIO_ONLY:\r\n                // use wavesurfer\r\n                this.surfer.surfer.setSinkId(deviceId).then((result) => {\r\n                    // notify listeners\r\n                    this.player.trigger(Event.AUDIO_OUTPUT_READY);\r\n                    return;\r\n                }).catch((err) => {\r\n                    errorMessage = err;\r\n                });\r\n                break;\r\n\r\n            default:\r\n                let element = player.tech_.el_;\r\n                if (deviceId) {\r\n                    if (typeof element.sinkId !== 'undefined') {\r\n                        element.setSinkId(deviceId).then((result) => {\r\n                            // notify listeners\r\n                            this.player.trigger(Event.AUDIO_OUTPUT_READY);\r\n                            return;\r\n                        }).catch((err) => {\r\n                            errorMessage = err;\r\n                        });\r\n                    } else {\r\n                        errorMessage = 'Browser does not support audio output device selection.';\r\n                    }\r\n                } else {\r\n                    errorMessage = `Invalid deviceId: ${deviceId}`;\r\n                }\r\n                break;\r\n        }\r\n\r\n        // error if we get here: notify listeners\r\n        this.player.trigger(Event.ERROR, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * Replaces the default `formatTime` implementation with a custom implementation.\r\n     *\r\n     * @param {function} customImplementation - A function which will be used in place\r\n     *     of the default `formatTime` implementation. Will receive the current time\r\n     *     in seconds and the guide (in seconds) as arguments.\r\n     */\r\n    setFormatTime(customImplementation) {\r\n        this._formatTime = customImplementation;\r\n\r\n        if (videojs.time !== undefined) {\r\n            // video.js v8 and newer\r\n            videojs.time.setFormatTime(this._formatTime);\r\n        } else {\r\n            videojs.setFormatTime(this._formatTime);\r\n        }\r\n\r\n        // audio-only\r\n        if (this.surfer) {\r\n            // use same time format as this plugin\r\n            this.surfer.setFormatTime(this._formatTime);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Show or hide the volume menu.\r\n     *\r\n     * @private\r\n     * @param {boolean} display - Hide/show volume control.\r\n     */\r\n    displayVolumeControl(display) {\r\n        if (this.player.controlBar.volumePanel !== undefined) {\r\n            if (display === true) {\r\n                display = 'flex';\r\n            } else {\r\n                display = 'none';\r\n            }\r\n            this.player.controlBar.volumePanel.el().style.display = display;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Invoked when the video device is ready and stream is visible.\r\n     *\r\n     * @private\r\n     * @param {Event} event - `playing` event\r\n     */\r\n    onStreamVisible(event) {\r\n        // only listen for this once; remove listener\r\n        this.mediaElement.removeEventListener(Event.PLAYING, this.streamVisibleCallback);\r\n\r\n        // reset and show camera button\r\n        this.player.cameraButton.onStop();\r\n        this.player.cameraButton.show();\r\n    }\r\n\r\n    /**\r\n     * Invoked when entering picture-in-picture mode.\r\n     *\r\n     * @private\r\n     * @param {object} event - Event data.\r\n     */\r\n    onEnterPiP(event) {\r\n        this.player.trigger(Event.ENTER_PIP, event);\r\n    }\r\n\r\n    /**\r\n     * Invoked when leaving picture-in-picture mode.\r\n     *\r\n     * @private\r\n     * @param {object} event - Event data.\r\n     */\r\n    onLeavePiP(event) {\r\n        this.player.trigger(Event.LEAVE_PIP);\r\n    }\r\n}\r\n\r\n// version nr is injected during build\r\nRecord.VERSION = __VERSION__;\r\n\r\n// register plugin\r\nvideojs.Record = Record;\r\nif (videojs.getPlugin('record') === undefined) {\r\n    videojs.registerPlugin('record', Record);\r\n}\r\n\r\n// export plugin\r\nexport {Record};\r\n",
    "static": true,
    "longname": "C:/Users/Thijs/projects/videojs-record/src/js/videojs.record.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 377,
    "kind": "variable",
    "name": "Plugin",
    "memberof": "js/videojs.record.js",
    "static": true,
    "longname": "js/videojs.record.js~Plugin",
    "access": "public",
    "export": false,
    "importPath": "videojs-record/js/videojs.record.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 378,
    "kind": "variable",
    "name": "Player",
    "memberof": "js/videojs.record.js",
    "static": true,
    "longname": "js/videojs.record.js~Player",
    "access": "public",
    "export": false,
    "importPath": "videojs-record/js/videojs.record.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 379,
    "kind": "variable",
    "name": "AUTO",
    "memberof": "js/videojs.record.js",
    "static": true,
    "longname": "js/videojs.record.js~AUTO",
    "access": "public",
    "export": false,
    "importPath": "videojs-record/js/videojs.record.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 380,
    "kind": "class",
    "name": "Record",
    "memberof": "js/videojs.record.js",
    "static": true,
    "longname": "js/videojs.record.js~Record",
    "access": "public",
    "export": true,
    "importPath": "videojs-record/js/videojs.record.js",
    "importStyle": "{Record}",
    "description": "Record audio/video/images using the Video.js player.",
    "lineNumber": 40,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": ""
      },
      {
        "tagName": "@augments",
        "tagValue": "videojs.Plugin"
      }
    ],
    "interface": false,
    "extends": [
      "Plugin"
    ]
  },
  {
    "__docId__": 381,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "js/videojs.record.js~Record",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/videojs.record.js~Record#constructor",
    "access": "public",
    "description": "The constructor function for the class.",
    "lineNumber": 47,
    "params": [
      {
        "nullable": null,
        "types": [
          "videojs.Player",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "player",
        "description": "video.js Player object."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "Player options."
      }
    ]
  },
  {
    "__docId__": 382,
    "kind": "member",
    "name": "pictureInPicture",
    "memberof": "js/videojs.record.js~Record",
    "static": false,
    "longname": "js/videojs.record.js~Record#pictureInPicture",
    "access": "public",
    "description": null,
    "lineNumber": 134,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 383,
    "kind": "member",
    "name": "onEnterPiPHandler",
    "memberof": "js/videojs.record.js~Record",
    "static": false,
    "longname": "js/videojs.record.js~Record#onEnterPiPHandler",
    "access": "public",
    "description": null,
    "lineNumber": 144,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 384,
    "kind": "member",
    "name": "onLeavePiPHandler",
    "memberof": "js/videojs.record.js~Record",
    "static": false,
    "longname": "js/videojs.record.js~Record#onLeavePiPHandler",
    "access": "public",
    "description": null,
    "lineNumber": 145,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 385,
    "kind": "method",
    "name": "loadOptions",
    "memberof": "js/videojs.record.js~Record",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/videojs.record.js~Record#loadOptions",
    "access": "public",
    "description": "Setup plugin options.",
    "lineNumber": 173,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "newOptions",
        "description": "Optional new player options."
      }
    ],
    "return": null
  },
  {
    "__docId__": 386,
    "kind": "member",
    "name": "recordImage",
    "memberof": "js/videojs.record.js~Record",
    "static": false,
    "longname": "js/videojs.record.js~Record#recordImage",
    "access": "public",
    "description": null,
    "lineNumber": 185,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 387,
    "kind": "member",
    "name": "recordAudio",
    "memberof": "js/videojs.record.js~Record",
    "static": false,
    "longname": "js/videojs.record.js~Record#recordAudio",
    "access": "public",
    "description": null,
    "lineNumber": 186,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 388,
    "kind": "member",
    "name": "recordVideo",
    "memberof": "js/videojs.record.js~Record",
    "static": false,
    "longname": "js/videojs.record.js~Record#recordVideo",
    "access": "public",
    "description": null,
    "lineNumber": 187,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 389,
    "kind": "member",
    "name": "recordAnimation",
    "memberof": "js/videojs.record.js~Record",
    "static": false,
    "longname": "js/videojs.record.js~Record#recordAnimation",
    "access": "public",
    "description": null,
    "lineNumber": 188,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 390,
    "kind": "member",
    "name": "recordScreen",
    "memberof": "js/videojs.record.js~Record",
    "static": false,
    "longname": "js/videojs.record.js~Record#recordScreen",
    "access": "public",
    "description": null,
    "lineNumber": 189,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 391,
    "kind": "member",
    "name": "maxLength",
    "memberof": "js/videojs.record.js~Record",
    "static": false,
    "longname": "js/videojs.record.js~Record#maxLength",
    "access": "public",
    "description": null,
    "lineNumber": 190,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 392,
    "kind": "member",
    "name": "maxFileSize",
    "memberof": "js/videojs.record.js~Record",
    "static": false,
    "longname": "js/videojs.record.js~Record#maxFileSize",
    "access": "public",
    "description": null,
    "lineNumber": 191,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 393,
    "kind": "member",
    "name": "displayMilliseconds",
    "memberof": "js/videojs.record.js~Record",
    "static": false,
    "longname": "js/videojs.record.js~Record#displayMilliseconds",
    "access": "public",
    "description": null,
    "lineNumber": 192,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 394,
    "kind": "member",
    "name": "debug",
    "memberof": "js/videojs.record.js~Record",
    "static": false,
    "longname": "js/videojs.record.js~Record#debug",
    "access": "public",
    "description": null,
    "lineNumber": 193,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 396,
    "kind": "member",
    "name": "recordTimeSlice",
    "memberof": "js/videojs.record.js~Record",
    "static": false,
    "longname": "js/videojs.record.js~Record#recordTimeSlice",
    "access": "public",
    "description": null,
    "lineNumber": 195,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 397,
    "kind": "member",
    "name": "autoMuteDevice",
    "memberof": "js/videojs.record.js~Record",
    "static": false,
    "longname": "js/videojs.record.js~Record#autoMuteDevice",
    "access": "public",
    "description": null,
    "lineNumber": 196,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 398,
    "kind": "member",
    "name": "pluginLibraryOptions",
    "memberof": "js/videojs.record.js~Record",
    "static": false,
    "longname": "js/videojs.record.js~Record#pluginLibraryOptions",
    "access": "public",
    "description": null,
    "lineNumber": 197,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 399,
    "kind": "member",
    "name": "videoFrameWidth",
    "memberof": "js/videojs.record.js~Record",
    "static": false,
    "longname": "js/videojs.record.js~Record#videoFrameWidth",
    "access": "public",
    "description": null,
    "lineNumber": 200,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 400,
    "kind": "member",
    "name": "videoFrameHeight",
    "memberof": "js/videojs.record.js~Record",
    "static": false,
    "longname": "js/videojs.record.js~Record#videoFrameHeight",
    "access": "public",
    "description": null,
    "lineNumber": 201,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 401,
    "kind": "member",
    "name": "videoFrameRate",
    "memberof": "js/videojs.record.js~Record",
    "static": false,
    "longname": "js/videojs.record.js~Record#videoFrameRate",
    "access": "public",
    "description": null,
    "lineNumber": 202,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 402,
    "kind": "member",
    "name": "videoBitRate",
    "memberof": "js/videojs.record.js~Record",
    "static": false,
    "longname": "js/videojs.record.js~Record#videoBitRate",
    "access": "public",
    "description": null,
    "lineNumber": 203,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 403,
    "kind": "member",
    "name": "videoEngine",
    "memberof": "js/videojs.record.js~Record",
    "static": false,
    "longname": "js/videojs.record.js~Record#videoEngine",
    "access": "public",
    "description": null,
    "lineNumber": 204,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 404,
    "kind": "member",
    "name": "videoRecorderType",
    "memberof": "js/videojs.record.js~Record",
    "static": false,
    "longname": "js/videojs.record.js~Record#videoRecorderType",
    "access": "public",
    "description": null,
    "lineNumber": 205,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 405,
    "kind": "member",
    "name": "videoMimeType",
    "memberof": "js/videojs.record.js~Record",
    "static": false,
    "longname": "js/videojs.record.js~Record#videoMimeType",
    "access": "public",
    "description": null,
    "lineNumber": 206,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 406,
    "kind": "member",
    "name": "videoWorkerURL",
    "memberof": "js/videojs.record.js~Record",
    "static": false,
    "longname": "js/videojs.record.js~Record#videoWorkerURL",
    "access": "public",
    "description": null,
    "lineNumber": 207,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 407,
    "kind": "member",
    "name": "videoWebAssemblyURL",
    "memberof": "js/videojs.record.js~Record",
    "static": false,
    "longname": "js/videojs.record.js~Record#videoWebAssemblyURL",
    "access": "public",
    "description": null,
    "lineNumber": 208,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 408,
    "kind": "member",
    "name": "convertEngine",
    "memberof": "js/videojs.record.js~Record",
    "static": false,
    "longname": "js/videojs.record.js~Record#convertEngine",
    "access": "public",
    "description": null,
    "lineNumber": 211,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 409,
    "kind": "member",
    "name": "convertAuto",
    "memberof": "js/videojs.record.js~Record",
    "static": false,
    "longname": "js/videojs.record.js~Record#convertAuto",
    "access": "public",
    "description": null,
    "lineNumber": 212,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 410,
    "kind": "member",
    "name": "convertWorkerURL",
    "memberof": "js/videojs.record.js~Record",
    "static": false,
    "longname": "js/videojs.record.js~Record#convertWorkerURL",
    "access": "public",
    "description": null,
    "lineNumber": 213,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 411,
    "kind": "member",
    "name": "convertOptions",
    "memberof": "js/videojs.record.js~Record",
    "static": false,
    "longname": "js/videojs.record.js~Record#convertOptions",
    "access": "public",
    "description": null,
    "lineNumber": 214,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 412,
    "kind": "member",
    "name": "audioEngine",
    "memberof": "js/videojs.record.js~Record",
    "static": false,
    "longname": "js/videojs.record.js~Record#audioEngine",
    "access": "public",
    "description": null,
    "lineNumber": 217,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 413,
    "kind": "member",
    "name": "audioRecorderType",
    "memberof": "js/videojs.record.js~Record",
    "static": false,
    "longname": "js/videojs.record.js~Record#audioRecorderType",
    "access": "public",
    "description": null,
    "lineNumber": 218,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 414,
    "kind": "member",
    "name": "audioWorkerURL",
    "memberof": "js/videojs.record.js~Record",
    "static": false,
    "longname": "js/videojs.record.js~Record#audioWorkerURL",
    "access": "public",
    "description": null,
    "lineNumber": 219,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 415,
    "kind": "member",
    "name": "audioWebAssemblyURL",
    "memberof": "js/videojs.record.js~Record",
    "static": false,
    "longname": "js/videojs.record.js~Record#audioWebAssemblyURL",
    "access": "public",
    "description": null,
    "lineNumber": 220,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 416,
    "kind": "member",
    "name": "audioBufferSize",
    "memberof": "js/videojs.record.js~Record",
    "static": false,
    "longname": "js/videojs.record.js~Record#audioBufferSize",
    "access": "public",
    "description": null,
    "lineNumber": 221,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 417,
    "kind": "member",
    "name": "audioSampleRate",
    "memberof": "js/videojs.record.js~Record",
    "static": false,
    "longname": "js/videojs.record.js~Record#audioSampleRate",
    "access": "public",
    "description": null,
    "lineNumber": 222,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 418,
    "kind": "member",
    "name": "audioBitRate",
    "memberof": "js/videojs.record.js~Record",
    "static": false,
    "longname": "js/videojs.record.js~Record#audioBitRate",
    "access": "public",
    "description": null,
    "lineNumber": 223,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 419,
    "kind": "member",
    "name": "audioChannels",
    "memberof": "js/videojs.record.js~Record",
    "static": false,
    "longname": "js/videojs.record.js~Record#audioChannels",
    "access": "public",
    "description": null,
    "lineNumber": 224,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 420,
    "kind": "member",
    "name": "audioMimeType",
    "memberof": "js/videojs.record.js~Record",
    "static": false,
    "longname": "js/videojs.record.js~Record#audioMimeType",
    "access": "public",
    "description": null,
    "lineNumber": 225,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 421,
    "kind": "member",
    "name": "audioBufferUpdate",
    "memberof": "js/videojs.record.js~Record",
    "static": false,
    "longname": "js/videojs.record.js~Record#audioBufferUpdate",
    "access": "public",
    "description": null,
    "lineNumber": 226,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 422,
    "kind": "member",
    "name": "imageOutputType",
    "memberof": "js/videojs.record.js~Record",
    "static": false,
    "longname": "js/videojs.record.js~Record#imageOutputType",
    "access": "public",
    "description": null,
    "lineNumber": 229,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 423,
    "kind": "member",
    "name": "imageOutputFormat",
    "memberof": "js/videojs.record.js~Record",
    "static": false,
    "longname": "js/videojs.record.js~Record#imageOutputFormat",
    "access": "public",
    "description": null,
    "lineNumber": 230,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 424,
    "kind": "member",
    "name": "imageOutputQuality",
    "memberof": "js/videojs.record.js~Record",
    "static": false,
    "longname": "js/videojs.record.js~Record#imageOutputQuality",
    "access": "public",
    "description": null,
    "lineNumber": 231,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 425,
    "kind": "member",
    "name": "animationFrameRate",
    "memberof": "js/videojs.record.js~Record",
    "static": false,
    "longname": "js/videojs.record.js~Record#animationFrameRate",
    "access": "public",
    "description": null,
    "lineNumber": 234,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 426,
    "kind": "member",
    "name": "animationQuality",
    "memberof": "js/videojs.record.js~Record",
    "static": false,
    "longname": "js/videojs.record.js~Record#animationQuality",
    "access": "public",
    "description": null,
    "lineNumber": 235,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 427,
    "kind": "method",
    "name": "setupUI",
    "memberof": "js/videojs.record.js~Record",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/videojs.record.js~Record#setupUI",
    "access": "private",
    "description": "Player UI is ready.",
    "lineNumber": 242,
    "params": [],
    "return": null
  },
  {
    "__docId__": 428,
    "kind": "member",
    "name": "surfer",
    "memberof": "js/videojs.record.js~Record",
    "static": false,
    "longname": "js/videojs.record.js~Record#surfer",
    "access": "public",
    "description": null,
    "lineNumber": 284,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 429,
    "kind": "method",
    "name": "isRecording",
    "memberof": "js/videojs.record.js~Record",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/videojs.record.js~Record#isRecording",
    "access": "public",
    "description": "Indicates whether the plugin is currently recording or not.",
    "lineNumber": 380,
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "Plugin currently recording or not."
    },
    "params": []
  },
  {
    "__docId__": 430,
    "kind": "method",
    "name": "isProcessing",
    "memberof": "js/videojs.record.js~Record",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/videojs.record.js~Record#isProcessing",
    "access": "public",
    "description": "Indicates whether the plugin is currently processing recorded data\nor not.",
    "lineNumber": 390,
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "Plugin processing or not."
    },
    "params": []
  },
  {
    "__docId__": 431,
    "kind": "method",
    "name": "isDestroyed",
    "memberof": "js/videojs.record.js~Record",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/videojs.record.js~Record#isDestroyed",
    "access": "public",
    "description": "Indicates whether the plugin is destroyed or not.",
    "lineNumber": 399,
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "Plugin destroyed or not."
    },
    "params": []
  },
  {
    "__docId__": 432,
    "kind": "method",
    "name": "getDevice",
    "memberof": "js/videojs.record.js~Record",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/videojs.record.js~Record#getDevice",
    "access": "public",
    "description": "Open the browser's recording device selection dialog and start the\ndevice.",
    "lineNumber": 411,
    "params": [],
    "return": null
  },
  {
    "__docId__": 433,
    "kind": "member",
    "name": "deviceReadyCallback",
    "memberof": "js/videojs.record.js~Record",
    "static": false,
    "longname": "js/videojs.record.js~Record#deviceReadyCallback",
    "access": "public",
    "description": null,
    "lineNumber": 414,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 434,
    "kind": "member",
    "name": "deviceErrorCallback",
    "memberof": "js/videojs.record.js~Record",
    "static": false,
    "longname": "js/videojs.record.js~Record#deviceErrorCallback",
    "access": "public",
    "description": null,
    "lineNumber": 417,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 435,
    "kind": "member",
    "name": "engineStopCallback",
    "memberof": "js/videojs.record.js~Record",
    "static": false,
    "longname": "js/videojs.record.js~Record#engineStopCallback",
    "access": "public",
    "description": null,
    "lineNumber": 420,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 436,
    "kind": "member",
    "name": "streamVisibleCallback",
    "memberof": "js/videojs.record.js~Record",
    "static": false,
    "longname": "js/videojs.record.js~Record#streamVisibleCallback",
    "access": "public",
    "description": null,
    "lineNumber": 423,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 437,
    "kind": "member",
    "name": "mediaType",
    "memberof": "js/videojs.record.js~Record",
    "static": false,
    "longname": "js/videojs.record.js~Record#mediaType",
    "access": "public",
    "description": null,
    "lineNumber": 450,
    "undocument": true,
    "type": {
      "types": [
        "{\"audio\": *, \"video\": *}"
      ]
    }
  },
  {
    "__docId__": 443,
    "kind": "method",
    "name": "onDeviceReady",
    "memberof": "js/videojs.record.js~Record",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/videojs.record.js~Record#onDeviceReady",
    "access": "private",
    "description": "Invoked when the device is ready.",
    "lineNumber": 625,
    "params": [
      {
        "nullable": null,
        "types": [
          "LocalMediaStream"
        ],
        "spread": false,
        "optional": false,
        "name": "stream",
        "description": "Local media stream from device."
      }
    ],
    "return": null
  },
  {
    "__docId__": 444,
    "kind": "member",
    "name": "_deviceActive",
    "memberof": "js/videojs.record.js~Record",
    "static": false,
    "longname": "js/videojs.record.js~Record#_deviceActive",
    "access": "private",
    "description": null,
    "lineNumber": 626,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 445,
    "kind": "member",
    "name": "stream",
    "memberof": "js/videojs.record.js~Record",
    "static": false,
    "longname": "js/videojs.record.js~Record#stream",
    "access": "public",
    "description": null,
    "lineNumber": 634,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 446,
    "kind": "member",
    "name": "engine",
    "memberof": "js/videojs.record.js~Record",
    "static": false,
    "longname": "js/videojs.record.js~Record#engine",
    "access": "public",
    "description": null,
    "lineNumber": 678,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 447,
    "kind": "member",
    "name": "converter",
    "memberof": "js/videojs.record.js~Record",
    "static": false,
    "longname": "js/videojs.record.js~Record#converter",
    "access": "public",
    "description": null,
    "lineNumber": 738,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 448,
    "kind": "member",
    "name": "mediaElement",
    "memberof": "js/videojs.record.js~Record",
    "static": false,
    "longname": "js/videojs.record.js~Record#mediaElement",
    "access": "public",
    "description": null,
    "lineNumber": 783,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 449,
    "kind": "method",
    "name": "onDeviceError",
    "memberof": "js/videojs.record.js~Record",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/videojs.record.js~Record#onDeviceError",
    "access": "private",
    "description": "Invoked when an device error occurred.",
    "lineNumber": 831,
    "params": [
      {
        "nullable": null,
        "types": [
          "string",
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "code",
        "description": "Error code/description."
      }
    ],
    "return": null
  },
  {
    "__docId__": 451,
    "kind": "method",
    "name": "start",
    "memberof": "js/videojs.record.js~Record",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/videojs.record.js~Record#start",
    "access": "public",
    "description": "Start recording.",
    "lineNumber": 846,
    "params": [],
    "return": null
  },
  {
    "__docId__": 452,
    "kind": "member",
    "name": "_recording",
    "memberof": "js/videojs.record.js~Record",
    "static": false,
    "longname": "js/videojs.record.js~Record#_recording",
    "access": "private",
    "description": null,
    "lineNumber": 854,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 453,
    "kind": "method",
    "name": "startRecording",
    "memberof": "js/videojs.record.js~Record",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/videojs.record.js~Record#startRecording",
    "access": "private",
    "description": "Start recording.",
    "lineNumber": 944,
    "params": [],
    "return": null
  },
  {
    "__docId__": 454,
    "kind": "member",
    "name": "paused",
    "memberof": "js/videojs.record.js~Record",
    "static": false,
    "longname": "js/videojs.record.js~Record#paused",
    "access": "public",
    "description": null,
    "lineNumber": 946,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 455,
    "kind": "member",
    "name": "pauseTime",
    "memberof": "js/videojs.record.js~Record",
    "static": false,
    "longname": "js/videojs.record.js~Record#pauseTime",
    "access": "public",
    "description": null,
    "lineNumber": 947,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 456,
    "kind": "member",
    "name": "startTime",
    "memberof": "js/videojs.record.js~Record",
    "static": false,
    "longname": "js/videojs.record.js~Record#startTime",
    "access": "public",
    "description": null,
    "lineNumber": 948,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 457,
    "kind": "member",
    "name": "countDown",
    "memberof": "js/videojs.record.js~Record",
    "static": false,
    "longname": "js/videojs.record.js~Record#countDown",
    "access": "public",
    "description": null,
    "lineNumber": 952,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 458,
    "kind": "method",
    "name": "stop",
    "memberof": "js/videojs.record.js~Record",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/videojs.record.js~Record#stop",
    "access": "public",
    "description": "Stop recording.",
    "lineNumber": 970,
    "params": [],
    "return": null
  },
  {
    "__docId__": 460,
    "kind": "member",
    "name": "_processing",
    "memberof": "js/videojs.record.js~Record",
    "static": false,
    "longname": "js/videojs.record.js~Record#_processing",
    "access": "private",
    "description": null,
    "lineNumber": 973,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 461,
    "kind": "method",
    "name": "stopDevice",
    "memberof": "js/videojs.record.js~Record",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/videojs.record.js~Record#stopDevice",
    "access": "public",
    "description": "Stop device(s) and recording if active.",
    "lineNumber": 1003,
    "params": [],
    "return": null
  },
  {
    "__docId__": 462,
    "kind": "method",
    "name": "stopStream",
    "memberof": "js/videojs.record.js~Record",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/videojs.record.js~Record#stopStream",
    "access": "public",
    "description": "Stop stream and device.",
    "lineNumber": 1020,
    "params": [],
    "return": null
  },
  {
    "__docId__": 464,
    "kind": "method",
    "name": "pause",
    "memberof": "js/videojs.record.js~Record",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/videojs.record.js~Record#pause",
    "access": "public",
    "description": "Pause recording.",
    "lineNumber": 1039,
    "params": [],
    "return": null
  },
  {
    "__docId__": 467,
    "kind": "method",
    "name": "resume",
    "memberof": "js/videojs.record.js~Record",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/videojs.record.js~Record#resume",
    "access": "public",
    "description": "Resume recording.",
    "lineNumber": 1051,
    "params": [],
    "return": null
  },
  {
    "__docId__": 468,
    "kind": "member",
    "name": "pausedTime",
    "memberof": "js/videojs.record.js~Record",
    "static": false,
    "longname": "js/videojs.record.js~Record#pausedTime",
    "access": "public",
    "description": null,
    "lineNumber": 1053,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 470,
    "kind": "method",
    "name": "onRecordComplete",
    "memberof": "js/videojs.record.js~Record",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/videojs.record.js~Record#onRecordComplete",
    "access": "private",
    "description": "Invoked when recording completed and the resulting stream is\navailable.",
    "lineNumber": 1065,
    "params": [],
    "return": null
  },
  {
    "__docId__": 474,
    "kind": "method",
    "name": "onCountDown",
    "memberof": "js/videojs.record.js~Record",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/videojs.record.js~Record#onCountDown",
    "access": "private",
    "description": "Invoked during recording and displays the remaining time.",
    "lineNumber": 1181,
    "params": [],
    "return": null
  },
  {
    "__docId__": 475,
    "kind": "member",
    "name": "streamDuration",
    "memberof": "js/videojs.record.js~Record",
    "static": false,
    "longname": "js/videojs.record.js~Record#streamDuration",
    "access": "public",
    "description": null,
    "lineNumber": 1188,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 476,
    "kind": "method",
    "name": "getCurrentTime",
    "memberof": "js/videojs.record.js~Record",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/videojs.record.js~Record#getCurrentTime",
    "access": "public",
    "description": "Get the current time of the recorded stream during playback.\n\nReturns 0 if no recording is available (yet).",
    "lineNumber": 1216,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{float} Current time of the recorded stream."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "float"
      ],
      "spread": false,
      "description": "Current time of the recorded stream."
    },
    "params": []
  },
  {
    "__docId__": 477,
    "kind": "method",
    "name": "setCurrentTime",
    "memberof": "js/videojs.record.js~Record",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/videojs.record.js~Record#setCurrentTime",
    "access": "private",
    "description": "Updates the player's element displaying the current time.",
    "lineNumber": 1234,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0",
        "defaultRaw": 0,
        "name": "currentTime",
        "description": "Current position of the\n   playhead (in seconds)."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0",
        "defaultRaw": 0,
        "name": "duration",
        "description": "Duration in seconds."
      }
    ],
    "return": null
  },
  {
    "__docId__": 478,
    "kind": "member",
    "name": "streamCurrentTime",
    "memberof": "js/videojs.record.js~Record",
    "static": false,
    "longname": "js/videojs.record.js~Record#streamCurrentTime",
    "access": "public",
    "description": null,
    "lineNumber": 1251,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 479,
    "kind": "method",
    "name": "getDuration",
    "memberof": "js/videojs.record.js~Record",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/videojs.record.js~Record#getDuration",
    "access": "public",
    "description": "Get the length of the recorded stream in seconds.\n\nReturns 0 if no recording is available (yet).",
    "lineNumber": 1269,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{float} Duration of the recorded stream."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "float"
      ],
      "spread": false,
      "description": "Duration of the recorded stream."
    },
    "params": []
  },
  {
    "__docId__": 480,
    "kind": "method",
    "name": "setDuration",
    "memberof": "js/videojs.record.js~Record",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/videojs.record.js~Record#setDuration",
    "access": "private",
    "description": "Updates the player's element displaying the duration time.",
    "lineNumber": 1281,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0",
        "defaultRaw": 0,
        "name": "duration",
        "description": "Duration in seconds."
      }
    ],
    "return": null
  },
  {
    "__docId__": 481,
    "kind": "method",
    "name": "load",
    "memberof": "js/videojs.record.js~Record",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/videojs.record.js~Record#load",
    "access": "public",
    "description": "Start loading data.",
    "lineNumber": 1312,
    "params": [
      {
        "nullable": null,
        "types": [
          "string",
          "blob",
          "file"
        ],
        "spread": false,
        "optional": false,
        "name": "url",
        "description": "Either the URL of the media file,\n    a Blob, a File object or MediaStream."
      }
    ],
    "return": null
  },
  {
    "__docId__": 482,
    "kind": "method",
    "name": "saveAs",
    "memberof": "js/videojs.record.js~Record",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/videojs.record.js~Record#saveAs",
    "access": "public",
    "description": "Show save as dialog in browser so the user can store the recorded or\nconverted media locally.",
    "examples": [
      "// save recorded video file as 'foo.webm'\nplayer.record().saveAs({'video': 'foo'});\n\n// save converted video file as 'bar.mp4'\nplayer.record().saveAs({'video': 'bar'}, 'convert');"
    ],
    "lineNumber": 1356,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "Object with names for the particular blob(s)\n    you want to save. File extensions are added automatically. For\n    example: {'video': 'name-of-video-file'}. Supported keys are\n    'audio', 'video' and 'gif'."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "Type of media to save. Legal values are 'record'\n    (default) and 'convert'."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 483,
    "kind": "method",
    "name": "dispose",
    "memberof": "js/videojs.record.js~Record",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/videojs.record.js~Record#dispose",
    "access": "public",
    "description": "Destroy plugin only.\n\nUse [destroy]{@link Record#destroy} to remove the plugin and the player\nas well.",
    "lineNumber": 1374,
    "params": [],
    "return": null
  },
  {
    "__docId__": 484,
    "kind": "method",
    "name": "destroy",
    "memberof": "js/videojs.record.js~Record",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/videojs.record.js~Record#destroy",
    "access": "public",
    "description": "Destroy plugin and players and cleanup resources.",
    "lineNumber": 1419,
    "params": [],
    "return": null
  },
  {
    "__docId__": 485,
    "kind": "method",
    "name": "reset",
    "memberof": "js/videojs.record.js~Record",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/videojs.record.js~Record#reset",
    "access": "public",
    "description": "Reset the plugin.",
    "lineNumber": 1426,
    "params": [],
    "return": null
  },
  {
    "__docId__": 486,
    "kind": "method",
    "name": "resetState",
    "memberof": "js/videojs.record.js~Record",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/videojs.record.js~Record#resetState",
    "access": "private",
    "description": "Reset the plugin recorder state.",
    "lineNumber": 1494,
    "params": [],
    "return": null
  },
  {
    "__docId__": 490,
    "kind": "member",
    "name": "devices",
    "memberof": "js/videojs.record.js~Record",
    "static": false,
    "longname": "js/videojs.record.js~Record#devices",
    "access": "public",
    "description": null,
    "lineNumber": 1498,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 491,
    "kind": "method",
    "name": "removeRecording",
    "memberof": "js/videojs.record.js~Record",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/videojs.record.js~Record#removeRecording",
    "access": "private",
    "description": "Removes recorded `Blob` from cache.",
    "lineNumber": 1505,
    "params": [],
    "return": null
  },
  {
    "__docId__": 492,
    "kind": "method",
    "name": "exportImage",
    "memberof": "js/videojs.record.js~Record",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/videojs.record.js~Record#exportImage",
    "access": "public",
    "description": "Export image data of waveform (audio-only) or current video frame.\n\nThe default format is `'image/png'`. Other supported types are\n`'image/jpeg'` and `'image/webp'`.",
    "lineNumber": 1529,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "'image/png'",
        "defaultRaw": "'image/png'",
        "name": "format",
        "description": "A string indicating the image format.\nThe default format type is `'image/png'`."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "1",
        "defaultRaw": 1,
        "name": "quality",
        "description": "A number between 0 and 1 indicating the image\nquality to use for image formats that use lossy compression such as\n`'image/jpeg'`` and `'image/webp'`."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Returns a `Promise` resolving with an\narray of `Blob` instances."
    }
  },
  {
    "__docId__": 493,
    "kind": "method",
    "name": "muteTracks",
    "memberof": "js/videojs.record.js~Record",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/videojs.record.js~Record#muteTracks",
    "access": "public",
    "description": "Mute LocalMediaStream audio and video tracks.",
    "lineNumber": 1548,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "mute",
        "description": "Whether or not the mute the track(s)."
      }
    ],
    "return": null
  },
  {
    "__docId__": 494,
    "kind": "method",
    "name": "getRecordType",
    "memberof": "js/videojs.record.js~Record",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/videojs.record.js~Record#getRecordType",
    "access": "public",
    "description": "Get recorder type.",
    "examples": [
      "console.log(player.record().getRecordType()); // 'audio_video'"
    ],
    "lineNumber": 1569,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} Recorder type constant."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "Recorder type constant."
    },
    "params": []
  },
  {
    "__docId__": 495,
    "kind": "method",
    "name": "convert",
    "memberof": "js/videojs.record.js~Record",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/videojs.record.js~Record#convert",
    "access": "public",
    "description": "Start converter.",
    "lineNumber": 1577,
    "params": [],
    "return": null
  },
  {
    "__docId__": 496,
    "kind": "method",
    "name": "createSnapshot",
    "memberof": "js/videojs.record.js~Record",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/videojs.record.js~Record#createSnapshot",
    "access": "private",
    "description": "Create and display snapshot image.",
    "lineNumber": 1587,
    "params": [],
    "return": null
  },
  {
    "__docId__": 497,
    "kind": "method",
    "name": "displaySnapshot",
    "memberof": "js/videojs.record.js~Record",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/videojs.record.js~Record#displaySnapshot",
    "access": "private",
    "description": "Display snapshot image.",
    "lineNumber": 1612,
    "params": [],
    "return": null
  },
  {
    "__docId__": 498,
    "kind": "method",
    "name": "retrySnapshot",
    "memberof": "js/videojs.record.js~Record",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/videojs.record.js~Record#retrySnapshot",
    "access": "private",
    "description": "Reset UI for retrying a snapshot image.",
    "lineNumber": 1627,
    "params": [],
    "return": null
  },
  {
    "__docId__": 500,
    "kind": "method",
    "name": "captureFrame",
    "memberof": "js/videojs.record.js~Record",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/videojs.record.js~Record#captureFrame",
    "access": "private",
    "description": "Capture frame from camera and copy data to canvas.",
    "lineNumber": 1642,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 501,
    "kind": "method",
    "name": "drawCanvas",
    "memberof": "js/videojs.record.js~Record",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/videojs.record.js~Record#drawCanvas",
    "access": "private",
    "description": "Draw image frame on canvas element.",
    "lineNumber": 1721,
    "params": [
      {
        "nullable": null,
        "types": [
          "HTMLCanvasElement"
        ],
        "spread": false,
        "optional": false,
        "name": "canvas",
        "description": "Canvas to draw on."
      },
      {
        "nullable": null,
        "types": [
          "HTMLElement"
        ],
        "spread": false,
        "optional": false,
        "name": "element",
        "description": "Element to draw onto the canvas."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "width",
        "description": "Width of drawing on canvas."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "height",
        "description": "Height of drawing on canvas."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "X position on canvas where drawing starts."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": "Y position on canvas where drawing starts."
      }
    ],
    "return": null
  },
  {
    "__docId__": 502,
    "kind": "method",
    "name": "startVideoPreview",
    "memberof": "js/videojs.record.js~Record",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/videojs.record.js~Record#startVideoPreview",
    "access": "private",
    "description": "Start preview of video stream.",
    "lineNumber": 1735,
    "params": [],
    "return": null
  },
  {
    "__docId__": 503,
    "kind": "method",
    "name": "showAnimation",
    "memberof": "js/videojs.record.js~Record",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/videojs.record.js~Record#showAnimation",
    "access": "private",
    "description": "Show animated GIF.",
    "lineNumber": 1760,
    "params": [],
    "return": null
  },
  {
    "__docId__": 504,
    "kind": "method",
    "name": "hideAnimation",
    "memberof": "js/videojs.record.js~Record",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/videojs.record.js~Record#hideAnimation",
    "access": "private",
    "description": "Hide animated GIF.",
    "lineNumber": 1779,
    "params": [],
    "return": null
  },
  {
    "__docId__": 505,
    "kind": "method",
    "name": "playbackTimeUpdate",
    "memberof": "js/videojs.record.js~Record",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/videojs.record.js~Record#playbackTimeUpdate",
    "access": "private",
    "description": "Update time during playback.",
    "lineNumber": 1791,
    "params": [],
    "return": null
  },
  {
    "__docId__": 506,
    "kind": "method",
    "name": "enumerateDevices",
    "memberof": "js/videojs.record.js~Record",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/videojs.record.js~Record#enumerateDevices",
    "access": "public",
    "description": "Collects information about the media input and output devices\navailable on the system.",
    "lineNumber": 1800,
    "params": [],
    "return": null
  },
  {
    "__docId__": 508,
    "kind": "method",
    "name": "setVideoInput",
    "memberof": "js/videojs.record.js~Record",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/videojs.record.js~Record#setVideoInput",
    "access": "public",
    "description": "Change the video input device.",
    "lineNumber": 1827,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "deviceId",
        "description": "Id of the video input device."
      }
    ],
    "return": null
  },
  {
    "__docId__": 510,
    "kind": "method",
    "name": "setAudioInput",
    "memberof": "js/videojs.record.js~Record",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/videojs.record.js~Record#setAudioInput",
    "access": "public",
    "description": "Change the audio input device.",
    "lineNumber": 1851,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "deviceId",
        "description": "Id of the audio input device."
      }
    ],
    "return": null
  },
  {
    "__docId__": 512,
    "kind": "method",
    "name": "setAudioOutput",
    "memberof": "js/videojs.record.js~Record",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/videojs.record.js~Record#setAudioOutput",
    "access": "public",
    "description": "Change the audio output device.",
    "lineNumber": 1885,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "deviceId",
        "description": "Id of audio output device."
      }
    ],
    "return": null
  },
  {
    "__docId__": 513,
    "kind": "method",
    "name": "setFormatTime",
    "memberof": "js/videojs.record.js~Record",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/videojs.record.js~Record#setFormatTime",
    "access": "public",
    "description": "Replaces the default `formatTime` implementation with a custom implementation.",
    "lineNumber": 1930,
    "params": [
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "customImplementation",
        "description": "A function which will be used in place\n    of the default `formatTime` implementation. Will receive the current time\n    in seconds and the guide (in seconds) as arguments."
      }
    ],
    "return": null
  },
  {
    "__docId__": 514,
    "kind": "member",
    "name": "_formatTime",
    "memberof": "js/videojs.record.js~Record",
    "static": false,
    "longname": "js/videojs.record.js~Record#_formatTime",
    "access": "private",
    "description": null,
    "lineNumber": 1931,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 515,
    "kind": "method",
    "name": "displayVolumeControl",
    "memberof": "js/videojs.record.js~Record",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/videojs.record.js~Record#displayVolumeControl",
    "access": "private",
    "description": "Show or hide the volume menu.",
    "lineNumber": 1953,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "display",
        "description": "Hide/show volume control."
      }
    ],
    "return": null
  },
  {
    "__docId__": 516,
    "kind": "method",
    "name": "onStreamVisible",
    "memberof": "js/videojs.record.js~Record",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/videojs.record.js~Record#onStreamVisible",
    "access": "private",
    "description": "Invoked when the video device is ready and stream is visible.",
    "lineNumber": 1970,
    "params": [
      {
        "nullable": null,
        "types": [
          "Event"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": "`playing` event"
      }
    ],
    "return": null
  },
  {
    "__docId__": 517,
    "kind": "method",
    "name": "onEnterPiP",
    "memberof": "js/videojs.record.js~Record",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/videojs.record.js~Record#onEnterPiP",
    "access": "private",
    "description": "Invoked when entering picture-in-picture mode.",
    "lineNumber": 1985,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": "Event data."
      }
    ],
    "return": null
  },
  {
    "__docId__": 518,
    "kind": "method",
    "name": "onLeavePiP",
    "memberof": "js/videojs.record.js~Record",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/videojs.record.js~Record#onLeavePiP",
    "access": "private",
    "description": "Invoked when leaving picture-in-picture mode.",
    "lineNumber": 1995,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": "Event data."
      }
    ],
    "return": null
  },
  {
    "kind": "index",
    "content": "# videojs-record\r\n\r\nA [video.js](https://www.videojs.com/) plugin for recording audio/video/image files.\r\n\r\n![Screenshot](https://raw.githubusercontent.com/collab-project/videojs-record/master/docs/img/screenshot.png?raw=true \"Screenshot\")\r\n\r\n## Documentation\r\n\r\nThe documentation and examples can be found on: https://collab-project.github.io/videojs-record\r\n\r\n[![npm version](https://img.shields.io/npm/v/videojs-record.svg?style=flat)](https://www.npmjs.com/package/videojs-record)\r\n[![npm](https://img.shields.io/npm/dm/videojs-record.svg)](https://github.com/collab-project/videojs-record/releases)\r\n[![License](https://img.shields.io/npm/l/videojs-record.svg)](LICENSE)\r\n[![Build Status](https://github.com/collab-project/videojs-record/workflows/videojs-record/badge.svg?branch=master)](https://github.com/collab-project/videojs-record/actions?workflow=videojs-record)\r\n[![Coverage Status](https://coveralls.io/repos/github/collab-project/videojs-record/badge.svg?branch=master)](https://coveralls.io/github/collab-project/videojs-record?branch=master)\r\n![Size](https://img.shields.io/bundlephobia/minzip/videojs-record.svg?style=flat)\r\n[![Financial Contributors on Open Collective](https://opencollective.com/collab/all/badge.svg?label=financial+contributors)](https://opencollective.com/collab)\r\n![Stars](https://img.shields.io/github/stars/collab-project/videojs-record.svg?style=social)\r\n\r\nDonate\r\n------\r\n\r\n### Financial Contributors\r\n\r\nBecome a financial contributor and help us sustain our community. [[Contribute](https://opencollective.com/collab/contribute)]\r\n\r\n#### Individuals\r\n\r\n<a href=\"https://opencollective.com/collab\"><img src=\"https://opencollective.com/collab/individuals.svg?width=890\"></a>\r\n\r\n#### Organizations\r\n\r\nSupport this project with your organization. Your logo will show up here with a link to your website. [[Contribute](https://opencollective.com/collab/contribute)]\r\n\r\n<a href=\"https://opencollective.com/collab/organization/0/website\"><img src=\"https://opencollective.com/collab/organization/0/avatar.svg\"></a>\r\n<a href=\"https://opencollective.com/collab/organization/1/website\"><img src=\"https://opencollective.com/collab/organization/1/avatar.svg\"></a>\r\n<a href=\"https://opencollective.com/collab/organization/2/website\"><img src=\"https://opencollective.com/collab/organization/2/avatar.svg\"></a>\r\n<a href=\"https://opencollective.com/collab/organization/3/website\"><img src=\"https://opencollective.com/collab/organization/3/avatar.svg\"></a>\r\n<a href=\"https://opencollective.com/collab/organization/4/website\"><img src=\"https://opencollective.com/collab/organization/4/avatar.svg\"></a>\r\n<a href=\"https://opencollective.com/collab/organization/5/website\"><img src=\"https://opencollective.com/collab/organization/5/avatar.svg\"></a>\r\n<a href=\"https://opencollective.com/collab/organization/6/website\"><img src=\"https://opencollective.com/collab/organization/6/avatar.svg\"></a>\r\n<a href=\"https://opencollective.com/collab/organization/7/website\"><img src=\"https://opencollective.com/collab/organization/7/avatar.svg\"></a>\r\n<a href=\"https://opencollective.com/collab/organization/8/website\"><img src=\"https://opencollective.com/collab/organization/8/avatar.svg\"></a>\r\n<a href=\"https://opencollective.com/collab/organization/9/website\"><img src=\"https://opencollective.com/collab/organization/9/avatar.svg\"></a>\r\n",
    "longname": "C:\\Users\\Thijs\\projects\\videojs-record\\README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\r\n  \"name\": \"videojs-record\",\r\n  \"version\": \"4.8.0\",\r\n  \"description\": \"A video.js plugin for recording audio/video/image files.\",\r\n  \"author\": \"Collab\",\r\n  \"license\": \"MIT\",\r\n  \"readmeFilename\": \"README.md\",\r\n  \"bugs\": {\r\n    \"url\": \"https://github.com/collab-project/videojs-record/issues\"\r\n  },\r\n  \"homepage\": \"https://github.com/collab-project/videojs-record\",\r\n  \"main\": \"dist/videojs.record.js\",\r\n  \"style\": \"dist/css/videojs.record.css\",\r\n  \"sass\": \"src/css/videojs.record.scss\",\r\n  \"directories\": {\r\n    \"doc\": \"./docs\",\r\n    \"lib\": \"./src\",\r\n    \"example\": \"./examples\",\r\n    \"test\": \"./test\"\r\n  },\r\n  \"repository\": {\r\n    \"type\": \"git\",\r\n    \"url\": \"https://github.com/collab-project/videojs-record.git\"\r\n  },\r\n  \"scripts\": {\r\n    \"clean\": \"rimraf dist\",\r\n    \"build\": \"npm run clean && npm run build:dev && npm run build:min && npm run build:language\",\r\n    \"build:main\": \"webpack --config ./build-config/webpack.dev.main.js\",\r\n    \"build:main:min\": \"webpack --config ./build-config/webpack.prod.main.js\",\r\n    \"build:plugins\": \"webpack --config ./build-config/webpack.dev.plugins.js\",\r\n    \"build:plugins:min\": \"webpack --config ./build-config/webpack.prod.plugins.js\",\r\n    \"build:dev\": \"npm run build:main && npm run build:plugins\",\r\n    \"build:min\": \"npm run build:main:min && npm run build:plugins:min\",\r\n    \"build:language\": \"vjslang -d dist/lang src/lang/*.json\",\r\n    \"docs\": \"npm-run-all docs:*\",\r\n    \"docs:api\": \"rimraf docs/api && esdoc\",\r\n    \"lint\": \"npm-run-all lint:*\",\r\n    \"lint:js\": \"eslint src/js test build-config\",\r\n    \"lint:json\": \"jsonlint-cli src/lang/*.json src/fonts/*.json\",\r\n    \"lint:html\": \"htmlhint examples\",\r\n    \"start\": \"npm run build && webpack serve --config ./build-config/webpack.dev.main.js\",\r\n    \"test\": \"karma start karma.conf.js\",\r\n    \"prepublishOnly\": \"not-in-install && npm run build || in-install\"\r\n  },\r\n  \"files\": [\r\n    \"dist/\",\r\n    \"src/\"\r\n  ],\r\n  \"keywords\": [\r\n    \"waveform\",\r\n    \"audio\",\r\n    \"video\",\r\n    \"wavesurfer\",\r\n    \"videojs\",\r\n    \"videojs-plugin\",\r\n    \"player\",\r\n    \"record\",\r\n    \"stream\",\r\n    \"microphone\",\r\n    \"screen\",\r\n    \"screenshare\",\r\n    \"recorder\",\r\n    \"RecordRTC\",\r\n    \"MediaRecorder\",\r\n    \"libvorbis.js\",\r\n    \"vorbis\",\r\n    \"ogg\",\r\n    \"mp3\",\r\n    \"wav\",\r\n    \"webm\",\r\n    \"opus\"\r\n  ],\r\n  \"dependencies\": {\r\n    \"recordrtc\": \">=5.6.2\",\r\n    \"video.js\": \">=7.0.5\",\r\n    \"videojs-wavesurfer\": \">=3.10.0\",\r\n    \"webrtc-adapter\": \">=8.2.3\"\r\n  },\r\n  \"devDependencies\": {\r\n    \"@babel/core\": \"^7.24.3\",\r\n    \"@babel/plugin-transform-runtime\": \"^7.24.3\",\r\n    \"@babel/preset-env\": \"^7.24.3\",\r\n    \"@babel/register\": \"^7.23.7\",\r\n    \"@chiragrupani/karma-chromium-edge-launcher\": \"^2.3.1\",\r\n    \"@ffmpeg/core\": \"^0.12.6\",\r\n    \"@ffmpeg/core-mt\": \"^0.12.6\",\r\n    \"@ffmpeg/ffmpeg\": \"^0.12.10\",\r\n    \"@ffmpeg/util\": \"^0.12.1\",\r\n    \"@mattiasbuelens/web-streams-polyfill\": \"^0.3.2\",\r\n    \"add-zero\": \"^1.0.0\",\r\n    \"babel-loader\": \"^9.1.3\",\r\n    \"babel-plugin-add-module-exports\": \"^1.0.4\",\r\n    \"babel-plugin-istanbul\": \"^6.1.1\",\r\n    \"browserslist\": \"^4.23.0\",\r\n    \"buffer\": \"^6.0.3\",\r\n    \"colors\": \"^1.4.0\",\r\n    \"copy-webpack-plugin\": \"^12.0.2\",\r\n    \"css-loader\": \"^6.10.0\",\r\n    \"css-minimizer-webpack-plugin\": \"^6.0.0\",\r\n    \"date-fns\": \"^3.6.0\",\r\n    \"esdoc\": \"^1.1.0\",\r\n    \"esdoc-standard-plugin\": \"^1.0.0\",\r\n    \"eslint\": \"^8.57.0\",\r\n    \"ffmpeg.js\": \"^4.2.9003\",\r\n    \"file-loader\": \"^6.2.0\",\r\n    \"fine-uploader\": \">=5.16\",\r\n    \"formidable\": \"^2.1.1\",\r\n    \"fs-extra\": \"^11.2.0\",\r\n    \"host-environment\": \"^2.1.2\",\r\n    \"htmlhint\": \"^1.1.4\",\r\n    \"in-publish\": \"^2.0.1\",\r\n    \"jasmine-core\": \"^5.1.2\",\r\n    \"jsonlint-cli\": \"^1.0.1\",\r\n    \"karma\": \"^6.4.3\",\r\n    \"karma-chrome-launcher\": \"^3.2.0\",\r\n    \"karma-coverage\": \"^2.2.1\",\r\n    \"karma-detect-browsers\": \"^2.3.3\",\r\n    \"karma-firefox-launcher\": \"^2.1.3\",\r\n    \"karma-host-environment\": \"^3.0.3\",\r\n    \"karma-jasmine\": \"^5.1.0\",\r\n    \"karma-jasmine-matchers\": \"^5.0.0\",\r\n    \"karma-verbose-reporter\": \"0.0.8\",\r\n    \"karma-webpack\": \"^5.0.1\",\r\n    \"lamejs\": \">=1.2.1\",\r\n    \"libvorbis.js\": \">=1.1.2\",\r\n    \"log-timestamp\": \"^0.3.0\",\r\n    \"mini-css-extract-plugin\": \"^2.8.1\",\r\n    \"node-fs-extra\": \"^0.8.2\",\r\n    \"node-static\": \"^0.7.11\",\r\n    \"npm-run-all\": \"^4.1.5\",\r\n    \"opus-media-recorder\": \">=0.8.0\",\r\n    \"opus-recorder\": \">=8.0.5\",\r\n    \"parse-ms\": \"^3.0.0\",\r\n    \"recorderjs\": \"git+https://github.com/mattdiamond/Recorderjs.git\",\r\n    \"rimraf\": \"^5.0.5\",\r\n    \"sass\": \"^1.72.0\",\r\n    \"sass-loader\": \"^14.1.1\",\r\n    \"style-loader\": \"^3.3.4\",\r\n    \"terser-webpack-plugin\": \"^5.3.10\",\r\n    \"ts-ebml\": \"^3.0.1\",\r\n    \"url-loader\": \"^4.1.1\",\r\n    \"videojs-languages\": \"^2.0.0\",\r\n    \"vmsg\": \">=0.4.0\",\r\n    \"webm-wasm\": \">=0.4.1\",\r\n    \"webpack\": \"^5.91.0\",\r\n    \"webpack-cli\": \"^5.1.4\",\r\n    \"webpack-dev-server\": \"^5.0.4\",\r\n    \"webpack-merge\": \"^5.10.0\",\r\n    \"webpack-remove-empty-scripts\": \"^1.0.4\"\r\n  },\r\n  \"collective\": {\r\n    \"type\": \"opencollective\",\r\n    \"url\": \"https://opencollective.com/collab\"\r\n  }\r\n}\r\n",
    "longname": "C:\\Users\\Thijs\\projects\\videojs-record\\package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  }
]